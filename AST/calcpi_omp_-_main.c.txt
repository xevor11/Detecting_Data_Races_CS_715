TranslationUnitDecl 0x555f6f538e18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x555f6f5393b0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x555f6f5390b0 '__int128'
|-TypedefDecl 0x555f6f539420 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x555f6f5390d0 'unsigned __int128'
|-TypedefDecl 0x555f6f5396f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x555f6f539500 'struct __NSConstantString_tag'
|   `-Record 0x555f6f539478 '__NSConstantString_tag'
|-TypedefDecl 0x555f6f539790 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x555f6f539750 'char *'
|   `-BuiltinType 0x555f6f538eb0 'char'
|-TypedefDecl 0x555f6f539a58 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x555f6f539a00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x555f6f539870 'struct __va_list_tag'
|     `-Record 0x555f6f5397e8 '__va_list_tag'
|-FunctionDecl 0x555f6f592af0 <calcpi_omp_-_main.c:1:1, line:26:1> line:1:5 main 'int ()'
| `-CompoundStmt 0x555f6f5982a0 <line:2:1, line:26:1>
|   |-DeclStmt 0x555f6f592c48 <line:3:3, col:8>
|   | `-VarDecl 0x555f6f592be8 <col:3, col:7> col:7 used i 'int'
|   |-DeclStmt 0x555f6f592cd8 <line:4:3, col:13>
|   | `-VarDecl 0x555f6f592c78 <col:3, col:10> col:10 used mid 'double'
|   |-DeclStmt 0x555f6f592d68 <line:5:3, col:16>
|   | `-VarDecl 0x555f6f592d08 <col:3, col:10> col:10 used height 'double'
|   |-DeclStmt 0x555f6f592df8 <line:6:3, col:15>
|   | `-VarDecl 0x555f6f592d98 <col:3, col:10> col:10 used width 'double'
|   |-DeclStmt 0x555f6f592ea8 <line:7:3, col:19>
|   | `-VarDecl 0x555f6f592e28 <col:3, col:16> col:10 used sum 'double' cinit
|   |   `-FloatingLiteral 0x555f6f592e88 <col:16> 'double' 0.000000e+00
|   |-DeclStmt 0x555f6f592f38 <line:8:3, col:14>
|   | `-VarDecl 0x555f6f592ed8 <col:3, col:10> col:10 used area 'double'
|   |-DeclStmt 0x555f6f592fc8 <line:9:3, col:12>
|   | `-VarDecl 0x555f6f592f68 <col:3, col:10> col:10 used t1 'double'
|   |-DeclStmt 0x555f6f593058 <line:10:3, col:12>
|   | `-VarDecl 0x555f6f592ff8 <col:3, col:10> col:10 used t2 'double'
|   |-BinaryOperator 0x555f6f593220 <line:11:3, col:25> 'double' '='
|   | |-DeclRefExpr 0x555f6f593070 <col:3> 'double' lvalue Var 0x555f6f592f68 't1' 'double'
|   | `-ImplicitCastExpr 0x555f6f593208 <col:8, col:25> 'double' <IntegralToFloating>
|   |   `-CallExpr 0x555f6f5931e0 <col:8, col:25> 'int'
|   |     `-ImplicitCastExpr 0x555f6f5931c8 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x555f6f593170 <col:8> 'int ()' Function 0x555f6f5930c0 'gettimeofday_sec' 'int ()'
|   |-BinaryOperator 0x555f6f593338 <line:12:3, col:36> 'double' '='
|   | |-DeclRefExpr 0x555f6f593248 <col:3> 'double' lvalue Var 0x555f6f592d98 'width' 'double'
|   | `-BinaryOperator 0x555f6f593310 <col:11, col:36> 'double' '/'
|   |   |-FloatingLiteral 0x555f6f593270 <col:11> 'double' 1.000000e+00
|   |   `-ParenExpr 0x555f6f5932f0 <col:17, col:36> 'double'
|   |     `-CStyleCastExpr 0x555f6f5932c8 <col:18, col:27> 'double' <IntegralToFloating>
|   |       `-IntegerLiteral 0x555f6f593290 <col:27> 'int' 100000000
|   |-OMPParallelForDirective 0x555f6f597680 <line:13:11, col:44>
|   | |-OMPReductionClause 0x555f6f593620 <col:28, col:44>
|   | | `-DeclRefExpr 0x555f6f593360 <col:40> 'double' lvalue Var 0x555f6f592e28 'sum' 'double'
|   | |-CapturedStmt 0x555f6f596210 <line:14:3, line:19:3>
|   | | |-CapturedDecl 0x555f6f5937c8 <<invalid sloc>> <invalid sloc>
|   | | | |-ForStmt 0x555f6f5961d8 <line:14:3, line:19:3>
|   | | | | |-BinaryOperator 0x555f6f593a78 <line:14:8, col:12> 'int' '='
|   | | | | | |-DeclRefExpr 0x555f6f5939a8 <col:8> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | | | | | `-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | | | | |-<<<NULL>>>
|   | | | | |-BinaryOperator 0x555f6f595ac8 <col:15, col:19> 'int' '<'
|   | | | | | |-ImplicitCastExpr 0x555f6f595ab0 <col:15> 'int' <LValueToRValue>
|   | | | | | | `-DeclRefExpr 0x555f6f593aa0 <col:15> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | | | | | `-IntegerLiteral 0x555f6f593ac8 <col:19> 'int' 100000000
|   | | | | |-UnaryOperator 0x555f6f595b18 <col:30, col:31> 'int' postfix '++'
|   | | | | | `-DeclRefExpr 0x555f6f595af0 <col:30> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | | | | `-CompoundStmt 0x555f6f5961b0 <line:15:3, line:19:3>
|   | | | |   |-BinaryOperator 0x555f6f595dc8 <line:16:5, col:23> 'double' '='
|   | | | |   | |-DeclRefExpr 0x555f6f595b68 <col:5> 'double' lvalue Var 0x555f6f592c78 'mid' 'double'
|   | | | |   | `-BinaryOperator 0x555f6f595da0 <col:11, col:23> 'double' '*'
|   | | | |   |   |-ParenExpr 0x555f6f595cb8 <col:11, col:19> 'double'
|   | | | |   |   | `-BinaryOperator 0x555f6f595c90 <col:12, col:16> 'double' '+'
|   | | | |   |   |   |-ImplicitCastExpr 0x555f6f595c78 <col:12> 'double' <IntegralToFloating>
|   | | | |   |   |   | `-ImplicitCastExpr 0x555f6f595c60 <col:12> 'int' <LValueToRValue>
|   | | | |   |   |   |   `-DeclRefExpr 0x555f6f595c18 <col:12> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | | | |   |   |   `-FloatingLiteral 0x555f6f595c40 <col:16> 'double' 5.000000e-01
|   | | | |   |   `-ImplicitCastExpr 0x555f6f595d88 <col:23> 'double' <LValueToRValue>
|   | | | |   |     `-DeclRefExpr 0x555f6f595cd8 <col:23> 'double' lvalue Var 0x555f6f592d98 'width' 'double'
|   | | | |   |-BinaryOperator 0x555f6f596018 <line:17:5, col:38> 'double' '='
|   | | | |   | |-DeclRefExpr 0x555f6f595df0 <col:5> 'double' lvalue Var 0x555f6f592d08 'height' 'double'
|   | | | |   | `-BinaryOperator 0x555f6f595ff0 <col:14, col:38> 'double' '/'
|   | | | |   |   |-FloatingLiteral 0x555f6f595ea0 <col:14> 'double' 4.000000e+00
|   | | | |   |   `-ParenExpr 0x555f6f595fd0 <col:20, col:38> 'double'
|   | | | |   |     `-BinaryOperator 0x555f6f595fa8 <col:21, col:37> 'double' '+'
|   | | | |   |       |-FloatingLiteral 0x555f6f595ec0 <col:21> 'double' 1.000000e+00
|   | | | |   |       `-ParenExpr 0x555f6f595f88 <col:27, col:37> 'double'
|   | | | |   |         `-BinaryOperator 0x555f6f595f60 <col:28, col:34> 'double' '*'
|   | | | |   |           |-ImplicitCastExpr 0x555f6f595f30 <col:28> 'double' <LValueToRValue>
|   | | | |   |           | `-DeclRefExpr 0x555f6f595ee0 <col:28> 'double' lvalue Var 0x555f6f592c78 'mid' 'double'
|   | | | |   |           `-ImplicitCastExpr 0x555f6f595f48 <col:34> 'double' <LValueToRValue>
|   | | | |   |             `-DeclRefExpr 0x555f6f595f08 <col:34> 'double' lvalue Var 0x555f6f592c78 'mid' 'double'
|   | | | |   `-CompoundAssignOperator 0x555f6f596178 <line:18:5, col:12> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   | | | |     |-DeclRefExpr 0x555f6f596040 <col:5> 'double' lvalue Var 0x555f6f592e28 'sum' 'double'
|   | | | |     `-ImplicitCastExpr 0x555f6f596160 <col:12> 'double' <LValueToRValue>
|   | | | |       `-DeclRefExpr 0x555f6f596138 <col:12> 'double' lvalue Var 0x555f6f592d08 'height' 'double'
|   | | | |-ImplicitParamDecl 0x555f6f593830 <line:13:11> col:11 implicit .global_tid. 'int *const restrict'
|   | | | |-ImplicitParamDecl 0x555f6f593890 <col:11> col:11 implicit .bound_tid. 'int *const restrict'
|   | | | `-ImplicitParamDecl 0x555f6f593918 <col:11> col:11 implicit __context 'struct (anonymous at calcpi_omp_-_main.c:13:11) *'
|   | | |-DeclRefExpr 0x555f6f593a30 <line:14:8> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | | |-DeclRefExpr 0x555f6f595bf0 <line:16:5> 'double' lvalue Var 0x555f6f592c78 'mid' 'double'
|   | | |-DeclRefExpr 0x555f6f595d60 <col:23> 'double' lvalue Var 0x555f6f592d98 'width' 'double'
|   | | |-DeclRefExpr 0x555f6f595e78 <line:17:5> 'double' lvalue Var 0x555f6f592d08 'height' 'double'
|   | | `-DeclRefExpr 0x555f6f596110 <line:18:5> 'double' lvalue Var 0x555f6f592e28 'sum' 'double'
|   | |-DeclRefExpr 0x555f6f596918 <line:14:8> 'int' lvalue Var 0x555f6f5968b8 '.omp.iv' 'int'
|   | |-BinaryOperator 0x555f6f5964e8 <col:3, <invalid sloc>> 'int' '-'
|   | | |-BinaryOperator 0x555f6f5963c0 <col:3, col:30> 'int' '/'
|   | | | |-ParenExpr 0x555f6f5963a0 <col:3> 'int'
|   | | | | `-BinaryOperator 0x555f6f596378 <col:19, col:30> 'int' '+'
|   | | | |   |-BinaryOperator 0x555f6f596350 <col:19, <invalid sloc>> 'int' '-'
|   | | | |   | |-BinaryOperator 0x555f6f596308 <col:19, col:12> 'int' '-'
|   | | | |   | | |-IntegerLiteral 0x555f6f593ac8 <col:19> 'int' 100000000
|   | | | |   | | `-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | | | |   | `-IntegerLiteral 0x555f6f596330 <<invalid sloc>> 'int' 1
|   | | | |   `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | | | `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | | `-IntegerLiteral 0x555f6f5964c8 <<invalid sloc>> 'int' 1
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x555f6f5962f0 <col:12, col:19> '_Bool' <IntegralToBoolean>
|   | | `-BinaryOperator 0x555f6f5962c8 <col:12, col:19> 'int' '<'
|   | |   |-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | |   `-IntegerLiteral 0x555f6f593ac8 <col:19> 'int' 100000000
|   | |-BinaryOperator 0x555f6f5969b0 <col:8> 'int' '<='
|   | | |-ImplicitCastExpr 0x555f6f596980 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x555f6f596918 <col:8> 'int' lvalue Var 0x555f6f5968b8 '.omp.iv' 'int'
|   | | `-ImplicitCastExpr 0x555f6f596998 <col:8> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x555f6f596648 <col:8> 'int' lvalue Var 0x555f6f5965e8 '.omp.ub' 'int'
|   | |-BinaryOperator 0x555f6f596958 <col:8> 'int' '='
|   | | |-DeclRefExpr 0x555f6f596918 <col:8> 'int' lvalue Var 0x555f6f5968b8 '.omp.iv' 'int'
|   | | `-ImplicitCastExpr 0x555f6f596940 <col:8> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x555f6f596588 <col:8> 'int' lvalue Var 0x555f6f596528 '.omp.lb' 'int'
|   | |-BinaryOperator 0x555f6f596a38 <col:8, <invalid sloc>> 'int' '='
|   | | |-DeclRefExpr 0x555f6f596918 <col:8> 'int' lvalue Var 0x555f6f5968b8 '.omp.iv' 'int'
|   | | `-BinaryOperator 0x555f6f596a10 <col:8, <invalid sloc>> 'int' '+'
|   | |   |-ImplicitCastExpr 0x555f6f5969f8 <col:8> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f6f596918 <col:8> 'int' lvalue Var 0x555f6f5968b8 '.omp.iv' 'int'
|   | |   `-IntegerLiteral 0x555f6f5969d8 <<invalid sloc>> 'int' 1
|   | |-<<<NULL>>>
|   | |-DeclRefExpr 0x555f6f5966e8 <col:8> 'int' lvalue Var 0x555f6f596688 '.omp.is_last' 'int'
|   | |-DeclRefExpr 0x555f6f596588 <col:8> 'int' lvalue Var 0x555f6f596528 '.omp.lb' 'int'
|   | |-DeclRefExpr 0x555f6f596648 <col:8> 'int' lvalue Var 0x555f6f5965e8 '.omp.ub' 'int'
|   | |-DeclRefExpr 0x555f6f5967a8 <col:8> 'int' lvalue Var 0x555f6f596748 '.omp.stride' 'int'
|   | |-BinaryOperator 0x555f6f596878 <col:8> 'int' '='
|   | | |-DeclRefExpr 0x555f6f596648 <col:8> 'int' lvalue Var 0x555f6f5965e8 '.omp.ub' 'int'
|   | | `-ConditionalOperator 0x555f6f596848 <col:8> 'int'
|   | |   |-BinaryOperator 0x555f6f596808 <col:8, <invalid sloc>> 'int' '>'
|   | |   | |-ImplicitCastExpr 0x555f6f5967f0 <col:8> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x555f6f596648 <col:8> 'int' lvalue Var 0x555f6f5965e8 '.omp.ub' 'int'
|   | |   | `-BinaryOperator 0x555f6f5964e8 <col:3, <invalid sloc>> 'int' '-'
|   | |   |   |-BinaryOperator 0x555f6f5963c0 <col:3, col:30> 'int' '/'
|   | |   |   | |-ParenExpr 0x555f6f5963a0 <col:3> 'int'
|   | |   |   | | `-BinaryOperator 0x555f6f596378 <col:19, col:30> 'int' '+'
|   | |   |   | |   |-BinaryOperator 0x555f6f596350 <col:19, <invalid sloc>> 'int' '-'
|   | |   |   | |   | |-BinaryOperator 0x555f6f596308 <col:19, col:12> 'int' '-'
|   | |   |   | |   | | |-IntegerLiteral 0x555f6f593ac8 <col:19> 'int' 100000000
|   | |   |   | |   | | `-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | |   |   | |   | `-IntegerLiteral 0x555f6f596330 <<invalid sloc>> 'int' 1
|   | |   |   | |   `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | |   |   | `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | |   |   `-IntegerLiteral 0x555f6f5964c8 <<invalid sloc>> 'int' 1
|   | |   |-BinaryOperator 0x555f6f5964e8 <col:3, <invalid sloc>> 'int' '-'
|   | |   | |-BinaryOperator 0x555f6f5963c0 <col:3, col:30> 'int' '/'
|   | |   | | |-ParenExpr 0x555f6f5963a0 <col:3> 'int'
|   | |   | | | `-BinaryOperator 0x555f6f596378 <col:19, col:30> 'int' '+'
|   | |   | | |   |-BinaryOperator 0x555f6f596350 <col:19, <invalid sloc>> 'int' '-'
|   | |   | | |   | |-BinaryOperator 0x555f6f596308 <col:19, col:12> 'int' '-'
|   | |   | | |   | | |-IntegerLiteral 0x555f6f593ac8 <col:19> 'int' 100000000
|   | |   | | |   | | `-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | |   | | |   | `-IntegerLiteral 0x555f6f596330 <<invalid sloc>> 'int' 1
|   | |   | | |   `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | |   | | `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | |   | `-IntegerLiteral 0x555f6f5964c8 <<invalid sloc>> 'int' 1
|   | |   `-ImplicitCastExpr 0x555f6f596830 <col:8> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f6f596648 <col:8> 'int' lvalue Var 0x555f6f5965e8 '.omp.ub' 'int'
|   | |-BinaryOperator 0x555f6f597428 <col:8> 'int' '='
|   | | |-DeclRefExpr 0x555f6f596588 <col:8> 'int' lvalue Var 0x555f6f596528 '.omp.lb' 'int'
|   | | `-BinaryOperator 0x555f6f597400 <col:8> 'int' '+'
|   | |   |-ImplicitCastExpr 0x555f6f596a60 <col:8> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f6f596588 <col:8> 'int' lvalue Var 0x555f6f596528 '.omp.lb' 'int'
|   | |   `-ImplicitCastExpr 0x555f6f596a78 <col:8> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f6f5967a8 <col:8> 'int' lvalue Var 0x555f6f596748 '.omp.stride' 'int'
|   | |-BinaryOperator 0x555f6f5974a8 <col:8> 'int' '='
|   | | |-DeclRefExpr 0x555f6f596648 <col:8> 'int' lvalue Var 0x555f6f5965e8 '.omp.ub' 'int'
|   | | `-BinaryOperator 0x555f6f597480 <col:8> 'int' '+'
|   | |   |-ImplicitCastExpr 0x555f6f597450 <col:8> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x555f6f596648 <col:8> 'int' lvalue Var 0x555f6f5965e8 '.omp.ub' 'int'
|   | |   `-ImplicitCastExpr 0x555f6f597468 <col:8> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x555f6f5967a8 <col:8> 'int' lvalue Var 0x555f6f596748 '.omp.stride' 'int'
|   | |-BinaryOperator 0x555f6f5963c0 <col:3, col:30> 'int' '/'
|   | | |-ParenExpr 0x555f6f5963a0 <col:3> 'int'
|   | | | `-BinaryOperator 0x555f6f596378 <col:19, col:30> 'int' '+'
|   | | |   |-BinaryOperator 0x555f6f596350 <col:19, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x555f6f596308 <col:19, col:12> 'int' '-'
|   | | |   | | |-IntegerLiteral 0x555f6f593ac8 <col:19> 'int' 100000000
|   | | |   | | `-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | | |   | `-IntegerLiteral 0x555f6f596330 <<invalid sloc>> 'int' 1
|   | | |   `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | | `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | |-DeclRefExpr 0x555f6f5963e8 <col:3> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | |-DeclRefExpr 0x555f6f596488 <col:3> 'int' lvalue Var 0x555f6f596428 'i' 'int'
|   | |-BinaryOperator 0x555f6f5974f8 <col:3, col:12> 'int' '='
|   | | |-DeclRefExpr 0x555f6f5974d0 <col:3> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | | `-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | |-BinaryOperator 0x555f6f5975a8 <col:3, col:30> 'int' '='
|   | | |-DeclRefExpr 0x555f6f5974d0 <col:3> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   | | `-BinaryOperator 0x555f6f597580 <col:12, col:30> 'int' '+'
|   | |   |-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   | |   `-BinaryOperator 0x555f6f597558 <col:30> 'int' '*'
|   | |     |-ImplicitCastExpr 0x555f6f597540 <col:30> 'int' <LValueToRValue>
|   | |     | `-ParenExpr 0x555f6f597520 <col:30> 'int' lvalue
|   | |     |   `-DeclRefExpr 0x555f6f596918 <col:8> 'int' lvalue Var 0x555f6f5968b8 '.omp.iv' 'int'
|   | |     `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   | `-BinaryOperator 0x555f6f597640 <col:3, col:30> 'int' '='
|   |   |-DeclRefExpr 0x555f6f5974d0 <col:3> 'int' lvalue Var 0x555f6f592be8 'i' 'int'
|   |   `-BinaryOperator 0x555f6f597618 <col:12, col:30> 'int' '+'
|   |     |-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   |     `-BinaryOperator 0x555f6f5975f0 <col:30> 'int' '*'
|   |       |-ParenExpr 0x555f6f5975d0 <col:30> 'int'
|   |       | `-BinaryOperator 0x555f6f5963c0 <col:3, col:30> 'int' '/'
|   |       |   |-ParenExpr 0x555f6f5963a0 <col:3> 'int'
|   |       |   | `-BinaryOperator 0x555f6f596378 <col:19, col:30> 'int' '+'
|   |       |   |   |-BinaryOperator 0x555f6f596350 <col:19, <invalid sloc>> 'int' '-'
|   |       |   |   | |-BinaryOperator 0x555f6f596308 <col:19, col:12> 'int' '-'
|   |       |   |   | | |-IntegerLiteral 0x555f6f593ac8 <col:19> 'int' 100000000
|   |       |   |   | | `-IntegerLiteral 0x555f6f593a58 <col:12> 'int' 0
|   |       |   |   | `-IntegerLiteral 0x555f6f596330 <<invalid sloc>> 'int' 1
|   |       |   |   `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   |       |   `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   |       `-IntegerLiteral 0x555f6f5962a8 <col:30> 'int' 1
|   |-BinaryOperator 0x555f6f597830 <line:21:3, col:18> 'double' '='
|   | |-DeclRefExpr 0x555f6f597760 <col:3> 'double' lvalue Var 0x555f6f592ed8 'area' 'double'
|   | `-BinaryOperator 0x555f6f597808 <col:10, col:18> 'double' '*'
|   |   |-ImplicitCastExpr 0x555f6f5977d8 <col:10> 'double' <LValueToRValue>
|   |   | `-DeclRefExpr 0x555f6f597788 <col:10> 'double' lvalue Var 0x555f6f592d98 'width' 'double'
|   |   `-ImplicitCastExpr 0x555f6f5977f0 <col:18> 'double' <LValueToRValue>
|   |     `-DeclRefExpr 0x555f6f5977b0 <col:18> 'double' lvalue Var 0x555f6f592e28 'sum' 'double'
|   |-BinaryOperator 0x555f6f597900 <line:22:3, col:25> 'double' '='
|   | |-DeclRefExpr 0x555f6f597858 <col:3> 'double' lvalue Var 0x555f6f592ff8 't2' 'double'
|   | `-ImplicitCastExpr 0x555f6f5978e8 <col:8, col:25> 'double' <IntegralToFloating>
|   |   `-CallExpr 0x555f6f5978c0 <col:8, col:25> 'int'
|   |     `-ImplicitCastExpr 0x555f6f5978a8 <col:8> 'int (*)()' <FunctionToPointerDecay>
|   |       `-DeclRefExpr 0x555f6f597880 <col:8> 'int ()' Function 0x555f6f5930c0 'gettimeofday_sec' 'int ()'
|   |-CallExpr 0x555f6f597f90 <line:23:3, col:30> 'int'
|   | |-ImplicitCastExpr 0x555f6f597f78 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f6f597e80 <col:3> 'int (const char *, ...)' Function 0x555f6f597d20 'printf' 'int (const char *, ...)'
|   | |-ImplicitCastExpr 0x555f6f597fe0 <col:10> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x555f6f597fc8 <col:10> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x555f6f597ee8 <col:10> 'char [12]' lvalue "pi=%1.20lf\n"
|   | `-ImplicitCastExpr 0x555f6f597ff8 <col:26> 'double' <LValueToRValue>
|   |   `-DeclRefExpr 0x555f6f597f20 <col:26> 'double' lvalue Var 0x555f6f592ed8 'area' 'double'
|   |-CallExpr 0x555f6f598200 <line:24:3, col:48> 'int'
|   | |-ImplicitCastExpr 0x555f6f5981e8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x555f6f598010 <col:3> 'int (const char *, ...)' Function 0x555f6f597d20 'printf' 'int (const char *, ...)'
|   | |-ImplicitCastExpr 0x555f6f598250 <col:10> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x555f6f598238 <col:10> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x555f6f598078 <col:10> 'char [16]' lvalue "time=%lf [sec]\n"
|   | `-CStyleCastExpr 0x555f6f5981c0 <col:30, col:47> 'double' <NoOp>
|   |   `-ParenExpr 0x555f6f5981a0 <col:39, col:47> 'double'
|   |     `-BinaryOperator 0x555f6f598130 <col:40, col:45> 'double' '-'
|   |       |-ImplicitCastExpr 0x555f6f598100 <col:40> 'double' <LValueToRValue>
|   |       | `-DeclRefExpr 0x555f6f5980b0 <col:40> 'double' lvalue Var 0x555f6f592ff8 't2' 'double'
|   |       `-ImplicitCastExpr 0x555f6f598118 <col:45> 'double' <LValueToRValue>
|   |         `-DeclRefExpr 0x555f6f5980d8 <col:45> 'double' lvalue Var 0x555f6f592f68 't1' 'double'
|   `-ReturnStmt 0x555f6f598288 <line:25:3, col:10>
|     `-IntegerLiteral 0x555f6f598268 <col:10> 'int' 0
`-FunctionDecl 0x555f6f597d20 <line:23:3> col:3 implicit used printf 'int (const char *, ...)' extern
  |-ParmVarDecl 0x555f6f597dc0 <<invalid sloc>> <invalid sloc> 'const char *'
  `-FormatAttr 0x555f6f597e28 <col:3> Implicit printf 1 2
