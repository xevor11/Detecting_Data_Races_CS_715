TranslationUnitDecl 0x55dfe497ae18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55dfe497b3b0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55dfe497b0b0 '__int128'
|-TypedefDecl 0x55dfe497b420 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55dfe497b0d0 'unsigned __int128'
|-TypedefDecl 0x55dfe497b6f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55dfe497b500 'struct __NSConstantString_tag'
|   `-Record 0x55dfe497b478 '__NSConstantString_tag'
|-TypedefDecl 0x55dfe497b790 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55dfe497b750 'char *'
|   `-BuiltinType 0x55dfe497aeb0 'char'
|-TypedefDecl 0x55dfe497ba58 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55dfe497ba00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55dfe497b870 'struct __va_list_tag'
|     `-Record 0x55dfe497b7e8 '__va_list_tag'
|-FunctionDecl 0x55dfe49d5070 <data_range2_-_main.c:1:1, line:90:1> line:1:5 main 'int ()'
| `-CompoundStmt 0x55dfe49e80f8 <line:2:1, line:90:1>
|   |-CompoundStmt 0x55dfe49d7950 <line:3:3, line:10:3>
|   | |-DeclStmt 0x55dfe49d51e8 <line:4:5, col:17>
|   | | `-VarDecl 0x55dfe49d5168 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49d51c8 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49d71a8 <line:5:13, col:29>
|   | | |-CapturedStmt 0x55dfe49d5830 <line:6:5, line:7:21>
|   | | | |-CapturedDecl 0x55dfe49d5318 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49d57f8 <line:6:5, line:7:21>
|   | | | | | |-DeclStmt 0x55dfe49d5560 <line:6:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49d54e0 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49d55d8 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49d55c0 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49d5578 <col:21> 'int' lvalue Var 0x55dfe49d54e0 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49d55a0 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49d5628 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49d5600 <col:32> 'int' lvalue Var 0x55dfe49d54e0 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49d57d0 <line:7:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49d5678 <col:7> 'int' lvalue Var 0x55dfe49d5168 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49d57a8 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49d5778 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49d5728 <col:14> 'int' lvalue Var 0x55dfe49d5168 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49d5790 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49d5750 <col:21> 'int' lvalue Var 0x55dfe49d54e0 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49d5380 <line:5:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49d53e0 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49d5468 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:5:13) *'
|   | | | | `-VarDecl 0x55dfe49d54e0 <line:6:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49d5700 <line:7:7> 'int' lvalue Var 0x55dfe49d5168 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49d5e90 <line:6:10> 'int' lvalue Var 0x55dfe49d5e30 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49d5a60 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49d5938 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49d5918 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49d58f0 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49d58c8 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49d55a0 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49d5a40 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49d58b0 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49d5888 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49d55a0 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49d5f28 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49d5ef8 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49d5e90 <col:10> 'int' lvalue Var 0x55dfe49d5e30 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49d5f10 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49d5bc0 <col:10> 'int' lvalue Var 0x55dfe49d5b60 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49d5ed0 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d5e90 <col:10> 'int' lvalue Var 0x55dfe49d5e30 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49d5eb8 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49d5b00 <col:10> 'int' lvalue Var 0x55dfe49d5aa0 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49d5fb0 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d5e90 <col:10> 'int' lvalue Var 0x55dfe49d5e30 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49d5f88 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49d5f70 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49d5e90 <col:10> 'int' lvalue Var 0x55dfe49d5e30 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49d5f50 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49d5c60 <col:10> 'int' lvalue Var 0x55dfe49d5c00 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49d5b00 <col:10> 'int' lvalue Var 0x55dfe49d5aa0 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49d5bc0 <col:10> 'int' lvalue Var 0x55dfe49d5b60 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49d5d20 <col:10> 'int' lvalue Var 0x55dfe49d5cc0 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49d5df0 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d5bc0 <col:10> 'int' lvalue Var 0x55dfe49d5b60 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49d5dc0 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49d5d80 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49d5d68 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49d5bc0 <col:10> 'int' lvalue Var 0x55dfe49d5b60 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49d5a60 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49d5938 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49d5918 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49d58f0 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49d58c8 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49d55a0 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49d5a40 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49d5a60 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49d5938 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49d5918 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49d58f0 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49d58c8 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49d55a0 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49d5a40 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49d5da8 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49d5bc0 <col:10> 'int' lvalue Var 0x55dfe49d5b60 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49d6030 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d5b00 <col:10> 'int' lvalue Var 0x55dfe49d5aa0 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49d6008 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49d5fd8 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49d5b00 <col:10> 'int' lvalue Var 0x55dfe49d5aa0 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49d5ff0 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49d5d20 <col:10> 'int' lvalue Var 0x55dfe49d5cc0 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49d6fd0 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d5bc0 <col:10> 'int' lvalue Var 0x55dfe49d5b60 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49d6fa8 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49d6058 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49d5bc0 <col:10> 'int' lvalue Var 0x55dfe49d5b60 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49d6f90 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49d5d20 <col:10> 'int' lvalue Var 0x55dfe49d5cc0 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49d5938 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49d5918 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49d58f0 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49d58c8 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49d55a0 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49d5960 <col:5> 'int' lvalue Var 0x55dfe49d54e0 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49d5a00 <col:5> 'int' lvalue Var 0x55dfe49d59a0 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49d7020 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d6ff8 <col:5> 'int' lvalue Var 0x55dfe49d54e0 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49d70d0 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d6ff8 <col:5> 'int' lvalue Var 0x55dfe49d54e0 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49d70a8 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49d7080 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49d7068 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49d7048 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49d5e90 <col:10> 'int' lvalue Var 0x55dfe49d5e30 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49d7168 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49d6ff8 <col:5> 'int' lvalue Var 0x55dfe49d54e0 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49d7140 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49d7118 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49d70f8 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49d5938 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49d5918 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49d58f0 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49d58c8 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49d55a0 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49d5540 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49d5868 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49d78d0 <line:9:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49d78b8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49d77d0 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49d7920 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49d7908 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49d7838 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49d7938 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49d7868 <col:25> 'int' lvalue Var 0x55dfe49d5168 'isum' 'int'
|   |-CompoundStmt 0x55dfe49da550 <line:11:3, line:18:3>
|   | |-DeclStmt 0x55dfe49d7a10 <line:12:5, col:17>
|   | | `-VarDecl 0x55dfe49d7990 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49d79f0 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49da350 <line:13:13, col:66>
|   | | |-OMPFirstprivateClause 0x55dfe49d7ba8 <col:30, col:49>
|   | | | `-DeclRefExpr 0x55dfe49d7a28 <col:43> 'int' lvalue Var 0x55dfe49d7990 'isum' 'int'
|   | | |-OMPLastprivateClause 0x55dfe49d7d90 <col:49, col:66>
|   | | | `-DeclRefExpr 0x55dfe49d7be8 <col:61> 'int' lvalue Var 0x55dfe49d7990 'isum' 'int'
|   | | |-CapturedStmt 0x55dfe49d8c78 <line:14:5, line:15:21>
|   | | | |-CapturedDecl 0x55dfe49d7ed8 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49d8c40 <line:14:5, line:15:21>
|   | | | | | |-DeclStmt 0x55dfe49d8990 <line:14:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49d8910 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49d8a08 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49d89f0 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49d89a8 <col:21> 'int' lvalue Var 0x55dfe49d8910 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49d89d0 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49d8a58 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49d8a30 <col:32> 'int' lvalue Var 0x55dfe49d8910 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49d8c18 <line:15:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49d8a78 <col:7> 'int' lvalue Var 0x55dfe49d7990 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49d8bf0 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49d8bc0 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49d8b70 <col:14> 'int' lvalue Var 0x55dfe49d7990 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49d8bd8 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49d8b98 <col:21> 'int' lvalue Var 0x55dfe49d8910 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49d87b0 <line:13:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49d8810 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49d8898 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:13:13) *'
|   | | | | `-VarDecl 0x55dfe49d8910 <line:14:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49d8b48 <line:15:7> 'int' lvalue Var 0x55dfe49d7990 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49d92d8 <line:14:10> 'int' lvalue Var 0x55dfe49d9278 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49d8ea8 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49d8d80 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49d8d60 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49d8d38 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49d8d10 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49d89d0 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49d8e88 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49d8cf8 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49d8cd0 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49d89d0 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49d9370 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49d9340 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49d92d8 <col:10> 'int' lvalue Var 0x55dfe49d9278 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49d9358 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49d9008 <col:10> 'int' lvalue Var 0x55dfe49d8fa8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49d9318 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d92d8 <col:10> 'int' lvalue Var 0x55dfe49d9278 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49d9300 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49d8f48 <col:10> 'int' lvalue Var 0x55dfe49d8ee8 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49d93f8 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d92d8 <col:10> 'int' lvalue Var 0x55dfe49d9278 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49d93d0 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49d93b8 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49d92d8 <col:10> 'int' lvalue Var 0x55dfe49d9278 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49d9398 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49d90a8 <col:10> 'int' lvalue Var 0x55dfe49d9048 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49d8f48 <col:10> 'int' lvalue Var 0x55dfe49d8ee8 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49d9008 <col:10> 'int' lvalue Var 0x55dfe49d8fa8 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49d9168 <col:10> 'int' lvalue Var 0x55dfe49d9108 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49d9238 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d9008 <col:10> 'int' lvalue Var 0x55dfe49d8fa8 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49d9208 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49d91c8 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49d91b0 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49d9008 <col:10> 'int' lvalue Var 0x55dfe49d8fa8 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49d8ea8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49d8d80 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49d8d60 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49d8d38 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49d8d10 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49d89d0 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49d8e88 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49d8ea8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49d8d80 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49d8d60 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49d8d38 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49d8d10 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49d89d0 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49d8e88 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49d91f0 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49d9008 <col:10> 'int' lvalue Var 0x55dfe49d8fa8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49d9478 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d8f48 <col:10> 'int' lvalue Var 0x55dfe49d8ee8 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49d9450 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49d9420 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49d8f48 <col:10> 'int' lvalue Var 0x55dfe49d8ee8 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49d9438 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49d9168 <col:10> 'int' lvalue Var 0x55dfe49d9108 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49d94f8 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d9008 <col:10> 'int' lvalue Var 0x55dfe49d8fa8 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49d94d0 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49d94a0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49d9008 <col:10> 'int' lvalue Var 0x55dfe49d8fa8 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49d94b8 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49d9168 <col:10> 'int' lvalue Var 0x55dfe49d9108 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49d8d80 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49d8d60 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49d8d38 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49d8d10 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49d89d0 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49d8da8 <col:5> 'int' lvalue Var 0x55dfe49d8910 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49d8e48 <col:5> 'int' lvalue Var 0x55dfe49d8de8 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49d9548 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d9520 <col:5> 'int' lvalue Var 0x55dfe49d8910 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49d95f8 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49d9520 <col:5> 'int' lvalue Var 0x55dfe49d8910 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49d95d0 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49d95a8 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49d9590 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49d9570 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49d92d8 <col:10> 'int' lvalue Var 0x55dfe49d9278 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49d9690 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49d9520 <col:5> 'int' lvalue Var 0x55dfe49d8910 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49d9668 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49d9640 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49d9620 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49d8d80 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49d8d60 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49d8d38 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49d8d10 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49d89d0 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49d8970 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49d8cb0 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49da4d0 <line:17:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49da4b8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49da438 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49da520 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49da508 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49da460 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49da538 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49da490 <col:25> 'int' lvalue Var 0x55dfe49d7990 'isum' 'int'
|   |-CompoundStmt 0x55dfe49dc1f0 <line:19:3, line:26:3>
|   | |-DeclStmt 0x55dfe49da610 <line:20:5, col:17>
|   | | `-VarDecl 0x55dfe49da590 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49da5f0 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49dbff8 <line:21:13, col:47>
|   | | |-OMPReductionClause 0x55dfe49da8d0 <col:30, col:47>
|   | | | `-DeclRefExpr 0x55dfe49da628 <col:42> 'int' lvalue Var 0x55dfe49da590 'isum' 'int'
|   | | |-CapturedStmt 0x55dfe49daf78 <line:22:5, line:23:21>
|   | | | |-CapturedDecl 0x55dfe49daa48 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49daf40 <line:22:5, line:23:21>
|   | | | | | |-DeclStmt 0x55dfe49dac90 <line:22:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49dac10 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49dad08 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49dacf0 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49daca8 <col:21> 'int' lvalue Var 0x55dfe49dac10 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49dacd0 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49dad58 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49dad30 <col:32> 'int' lvalue Var 0x55dfe49dac10 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49daf18 <line:23:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49dad78 <col:7> 'int' lvalue Var 0x55dfe49da590 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49daef0 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49daec0 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49dae70 <col:14> 'int' lvalue Var 0x55dfe49da590 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49daed8 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49dae98 <col:21> 'int' lvalue Var 0x55dfe49dac10 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49daab0 <line:21:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49dab10 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49dab98 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:21:13) *'
|   | | | | `-VarDecl 0x55dfe49dac10 <line:22:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49dae48 <line:23:7> 'int' lvalue Var 0x55dfe49da590 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49dbc00 <line:22:10> 'int' lvalue Var 0x55dfe49dbba0 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49db1a8 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49db080 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49db060 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49db038 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49db010 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49dacd0 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49db188 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49daff8 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49dafd0 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49dacd0 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49dbc98 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49dbc68 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49dbc00 <col:10> 'int' lvalue Var 0x55dfe49dbba0 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49dbc80 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49db308 <col:10> 'int' lvalue Var 0x55dfe49db2a8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49dbc40 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dbc00 <col:10> 'int' lvalue Var 0x55dfe49dbba0 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49dbc28 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49db248 <col:10> 'int' lvalue Var 0x55dfe49db1e8 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49dbd20 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dbc00 <col:10> 'int' lvalue Var 0x55dfe49dbba0 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49dbcf8 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49dbce0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49dbc00 <col:10> 'int' lvalue Var 0x55dfe49dbba0 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49dbcc0 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49db9d0 <col:10> 'int' lvalue Var 0x55dfe49db970 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49db248 <col:10> 'int' lvalue Var 0x55dfe49db1e8 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49db308 <col:10> 'int' lvalue Var 0x55dfe49db2a8 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49dba90 <col:10> 'int' lvalue Var 0x55dfe49dba30 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49dbb60 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49db308 <col:10> 'int' lvalue Var 0x55dfe49db2a8 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49dbb30 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49dbaf0 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49dbad8 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49db308 <col:10> 'int' lvalue Var 0x55dfe49db2a8 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49db1a8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49db080 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49db060 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49db038 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49db010 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49dacd0 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49db188 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49db1a8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49db080 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49db060 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49db038 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49db010 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49dacd0 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49db188 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49dbb18 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49db308 <col:10> 'int' lvalue Var 0x55dfe49db2a8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49dbda0 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49db248 <col:10> 'int' lvalue Var 0x55dfe49db1e8 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49dbd78 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49dbd48 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49db248 <col:10> 'int' lvalue Var 0x55dfe49db1e8 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49dbd60 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49dba90 <col:10> 'int' lvalue Var 0x55dfe49dba30 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49dbe20 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49db308 <col:10> 'int' lvalue Var 0x55dfe49db2a8 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49dbdf8 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49dbdc8 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49db308 <col:10> 'int' lvalue Var 0x55dfe49db2a8 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49dbde0 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49dba90 <col:10> 'int' lvalue Var 0x55dfe49dba30 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49db080 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49db060 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49db038 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49db010 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49dacd0 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49db0a8 <col:5> 'int' lvalue Var 0x55dfe49dac10 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49db148 <col:5> 'int' lvalue Var 0x55dfe49db0e8 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49dbe70 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dbe48 <col:5> 'int' lvalue Var 0x55dfe49dac10 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49dbf20 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dbe48 <col:5> 'int' lvalue Var 0x55dfe49dac10 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49dbef8 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49dbed0 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49dbeb8 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49dbe98 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49dbc00 <col:10> 'int' lvalue Var 0x55dfe49dbba0 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49dbfb8 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49dbe48 <col:5> 'int' lvalue Var 0x55dfe49dac10 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49dbf90 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49dbf68 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49dbf48 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49db080 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49db060 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49db038 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49db010 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49dacd0 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49dac70 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49dafb0 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49dc170 <line:25:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49dc158 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49dc0d8 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49dc1c0 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49dc1a8 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49dc100 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49dc1d8 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49dc130 <col:25> 'int' lvalue Var 0x55dfe49da590 'isum' 'int'
|   |-CompoundStmt 0x55dfe49dd8e0 <line:27:3, line:34:3>
|   | |-DeclStmt 0x55dfe49dc2b0 <line:28:5, col:17>
|   | | `-VarDecl 0x55dfe49dc230 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49dc290 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49dd6e0 <line:29:13, col:64>
|   | | |-OMPReductionClause 0x55dfe49dc570 <col:30, col:48>
|   | | | `-DeclRefExpr 0x55dfe49dc2c8 <col:42> 'int' lvalue Var 0x55dfe49dc230 'isum' 'int'
|   | | |-OMPScheduleClause 0x55dfe49dc5f8 <col:48, col:63>
|   | | | `-<<<NULL>>>
|   | | |-CapturedStmt 0x55dfe49dcc88 <line:30:5, line:31:21>
|   | | | |-CapturedDecl 0x55dfe49dc738 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49dcc50 <line:30:5, line:31:21>
|   | | | | | |-DeclStmt 0x55dfe49dc9a0 <line:30:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49dc900 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49dca18 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49dca00 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49dc9b8 <col:21> 'int' lvalue Var 0x55dfe49dc900 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49dc9e0 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49dca68 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49dca40 <col:32> 'int' lvalue Var 0x55dfe49dc900 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49dcc28 <line:31:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49dca88 <col:7> 'int' lvalue Var 0x55dfe49dc230 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49dcc00 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49dcbd0 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49dcb80 <col:14> 'int' lvalue Var 0x55dfe49dc230 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49dcbe8 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49dcba8 <col:21> 'int' lvalue Var 0x55dfe49dc900 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49dc7a0 <line:29:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49dc800 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49dc888 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:29:13) *'
|   | | | | `-VarDecl 0x55dfe49dc900 <line:30:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49dcb58 <line:31:7> 'int' lvalue Var 0x55dfe49dc230 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49dd2e8 <line:30:10> 'int' lvalue Var 0x55dfe49dd288 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49dceb8 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49dcd90 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49dcd70 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49dcd48 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49dcd20 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49dc9e0 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49dce98 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49dcd08 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49dcce0 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49dc9e0 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49dd380 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49dd350 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49dd2e8 <col:10> 'int' lvalue Var 0x55dfe49dd288 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49dd368 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49dd018 <col:10> 'int' lvalue Var 0x55dfe49dcfb8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49dd328 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dd2e8 <col:10> 'int' lvalue Var 0x55dfe49dd288 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49dd310 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49dcf58 <col:10> 'int' lvalue Var 0x55dfe49dcef8 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49dd408 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dd2e8 <col:10> 'int' lvalue Var 0x55dfe49dd288 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49dd3e0 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49dd3c8 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49dd2e8 <col:10> 'int' lvalue Var 0x55dfe49dd288 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49dd3a8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49dd0b8 <col:10> 'int' lvalue Var 0x55dfe49dd058 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49dcf58 <col:10> 'int' lvalue Var 0x55dfe49dcef8 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49dd018 <col:10> 'int' lvalue Var 0x55dfe49dcfb8 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49dd178 <col:10> 'int' lvalue Var 0x55dfe49dd118 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49dd248 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dd018 <col:10> 'int' lvalue Var 0x55dfe49dcfb8 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49dd218 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49dd1d8 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49dd1c0 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49dd018 <col:10> 'int' lvalue Var 0x55dfe49dcfb8 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49dceb8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49dcd90 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49dcd70 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49dcd48 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49dcd20 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49dc9e0 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49dce98 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49dceb8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49dcd90 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49dcd70 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49dcd48 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49dcd20 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49dc9e0 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49dce98 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49dd200 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49dd018 <col:10> 'int' lvalue Var 0x55dfe49dcfb8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49dd488 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dcf58 <col:10> 'int' lvalue Var 0x55dfe49dcef8 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49dd460 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49dd430 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49dcf58 <col:10> 'int' lvalue Var 0x55dfe49dcef8 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49dd448 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49dd178 <col:10> 'int' lvalue Var 0x55dfe49dd118 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49dd508 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dd018 <col:10> 'int' lvalue Var 0x55dfe49dcfb8 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49dd4e0 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49dd4b0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49dd018 <col:10> 'int' lvalue Var 0x55dfe49dcfb8 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49dd4c8 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49dd178 <col:10> 'int' lvalue Var 0x55dfe49dd118 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49dcd90 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49dcd70 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49dcd48 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49dcd20 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49dc9e0 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49dcdb8 <col:5> 'int' lvalue Var 0x55dfe49dc900 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49dce58 <col:5> 'int' lvalue Var 0x55dfe49dcdf8 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49dd558 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dd530 <col:5> 'int' lvalue Var 0x55dfe49dc900 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49dd608 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49dd530 <col:5> 'int' lvalue Var 0x55dfe49dc900 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49dd5e0 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49dd5b8 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49dd5a0 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49dd580 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49dd2e8 <col:10> 'int' lvalue Var 0x55dfe49dd288 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49dd6a0 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49dd530 <col:5> 'int' lvalue Var 0x55dfe49dc900 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49dd678 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49dd650 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49dd630 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49dcd90 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49dcd70 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49dcd48 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49dcd20 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49dc9e0 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49dc980 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49dccc0 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49dd860 <line:33:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49dd848 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49dd7c8 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49dd8b0 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49dd898 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49dd7f0 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49dd8c8 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49dd820 <col:25> 'int' lvalue Var 0x55dfe49dc230 'isum' 'int'
|   |-CompoundStmt 0x55dfe49df608 <line:35:3, line:42:3>
|   | |-DeclStmt 0x55dfe49dd9b0 <line:36:5, col:17>
|   | | `-VarDecl 0x55dfe49dd920 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49dd990 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49df408 <line:37:13, col:69>
|   | | |-OMPReductionClause 0x55dfe49ddc70 <col:30, col:48>
|   | | | `-DeclRefExpr 0x55dfe49dd9c8 <col:42> 'int' lvalue Var 0x55dfe49dd920 'isum' 'int'
|   | | |-OMPScheduleClause 0x55dfe49ddd18 <col:48, col:68>
|   | | | `-IntegerLiteral 0x55dfe49ddcf8 <col:65> 'int' 100
|   | | |-CapturedStmt 0x55dfe49de388 <line:38:5, line:39:21>
|   | | | |-CapturedDecl 0x55dfe49dde58 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49de350 <line:38:5, line:39:21>
|   | | | | | |-DeclStmt 0x55dfe49de0a0 <line:38:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49de020 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49de118 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49de100 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49de0b8 <col:21> 'int' lvalue Var 0x55dfe49de020 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49de0e0 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49de168 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49de140 <col:32> 'int' lvalue Var 0x55dfe49de020 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49de328 <line:39:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49de188 <col:7> 'int' lvalue Var 0x55dfe49dd920 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49de300 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49de2d0 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49de280 <col:14> 'int' lvalue Var 0x55dfe49dd920 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49de2e8 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49de2a8 <col:21> 'int' lvalue Var 0x55dfe49de020 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49ddec0 <line:37:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49ddf20 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49ddfa8 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:37:13) *'
|   | | | | `-VarDecl 0x55dfe49de020 <line:38:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49de258 <line:39:7> 'int' lvalue Var 0x55dfe49dd920 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49df010 <line:38:10> 'int' lvalue Var 0x55dfe49defb0 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49de5b8 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49de490 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49de470 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49de448 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49de420 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49de0e0 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49de598 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49de408 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49de3e0 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49de0e0 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49df0a8 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49df078 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49df010 <col:10> 'int' lvalue Var 0x55dfe49defb0 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49df090 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49de718 <col:10> 'int' lvalue Var 0x55dfe49de6b8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49df050 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49df010 <col:10> 'int' lvalue Var 0x55dfe49defb0 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49df038 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49de658 <col:10> 'int' lvalue Var 0x55dfe49de5f8 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49df130 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49df010 <col:10> 'int' lvalue Var 0x55dfe49defb0 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49df108 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49df0f0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49df010 <col:10> 'int' lvalue Var 0x55dfe49defb0 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49df0d0 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49de7b8 <col:10> 'int' lvalue Var 0x55dfe49de758 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49de658 <col:10> 'int' lvalue Var 0x55dfe49de5f8 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49de718 <col:10> 'int' lvalue Var 0x55dfe49de6b8 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49de878 <col:10> 'int' lvalue Var 0x55dfe49de818 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49de948 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49de718 <col:10> 'int' lvalue Var 0x55dfe49de6b8 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49de918 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49de8d8 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49de8c0 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49de718 <col:10> 'int' lvalue Var 0x55dfe49de6b8 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49de5b8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49de490 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49de470 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49de448 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49de420 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49de0e0 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49de598 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49de5b8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49de490 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49de470 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49de448 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49de420 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49de0e0 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49de598 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49de900 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49de718 <col:10> 'int' lvalue Var 0x55dfe49de6b8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49df1b0 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49de658 <col:10> 'int' lvalue Var 0x55dfe49de5f8 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49df188 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49df158 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49de658 <col:10> 'int' lvalue Var 0x55dfe49de5f8 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49df170 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49de878 <col:10> 'int' lvalue Var 0x55dfe49de818 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49df230 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49de718 <col:10> 'int' lvalue Var 0x55dfe49de6b8 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49df208 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49df1d8 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49de718 <col:10> 'int' lvalue Var 0x55dfe49de6b8 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49df1f0 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49de878 <col:10> 'int' lvalue Var 0x55dfe49de818 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49de490 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49de470 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49de448 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49de420 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49de0e0 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49de4b8 <col:5> 'int' lvalue Var 0x55dfe49de020 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49de558 <col:5> 'int' lvalue Var 0x55dfe49de4f8 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49df280 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49df258 <col:5> 'int' lvalue Var 0x55dfe49de020 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49df330 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49df258 <col:5> 'int' lvalue Var 0x55dfe49de020 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49df308 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49df2e0 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49df2c8 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49df2a8 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49df010 <col:10> 'int' lvalue Var 0x55dfe49defb0 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49df3c8 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49df258 <col:5> 'int' lvalue Var 0x55dfe49de020 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49df3a0 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49df378 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49df358 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49de490 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49de470 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49de448 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49de420 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49de0e0 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49de080 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49de3c0 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49df588 <line:41:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49df570 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49df4f0 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49df5d8 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49df5c0 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49df518 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49df5f0 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49df548 <col:25> 'int' lvalue Var 0x55dfe49dd920 'isum' 'int'
|   |-CompoundStmt 0x55dfe49e0d20 <line:43:3, line:50:3>
|   | |-DeclStmt 0x55dfe49df6c8 <line:44:5, col:17>
|   | | `-VarDecl 0x55dfe49df648 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49df6a8 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49e0b20 <line:45:13, col:70>
|   | | |-OMPReductionClause 0x55dfe49df988 <col:30, col:48>
|   | | | `-DeclRefExpr 0x55dfe49df6e0 <col:42> 'int' lvalue Var 0x55dfe49df648 'isum' 'int'
|   | | |-OMPScheduleClause 0x55dfe49dfa30 <col:48, col:69>
|   | | | `-IntegerLiteral 0x55dfe49dfa10 <col:66> 'int' 100
|   | | |-CapturedStmt 0x55dfe49e00c8 <line:46:5, line:47:21>
|   | | | |-CapturedDecl 0x55dfe49dfb68 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49e0090 <line:46:5, line:47:21>
|   | | | | | |-DeclStmt 0x55dfe49dfdb0 <line:46:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49dfd30 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49dfe28 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49dfe10 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49dfdc8 <col:21> 'int' lvalue Var 0x55dfe49dfd30 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49dfdf0 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49dfe78 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49dfe50 <col:32> 'int' lvalue Var 0x55dfe49dfd30 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e0068 <line:47:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49dfe98 <col:7> 'int' lvalue Var 0x55dfe49df648 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49e0040 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49e0010 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49dffc0 <col:14> 'int' lvalue Var 0x55dfe49df648 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49e0028 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49dffe8 <col:21> 'int' lvalue Var 0x55dfe49dfd30 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49dfbd0 <line:45:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49dfc30 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49dfcb8 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:45:13) *'
|   | | | | `-VarDecl 0x55dfe49dfd30 <line:46:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49dff68 <line:47:7> 'int' lvalue Var 0x55dfe49df648 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49e0728 <line:46:10> 'int' lvalue Var 0x55dfe49e06c8 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49e02f8 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49e01d0 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49e01b0 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e0188 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49e0160 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49dfdf0 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e02d8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49e0148 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49e0120 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49dfdf0 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49e07c0 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49e0790 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49e0728 <col:10> 'int' lvalue Var 0x55dfe49e06c8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e07a8 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e0458 <col:10> 'int' lvalue Var 0x55dfe49e03f8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e0768 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e0728 <col:10> 'int' lvalue Var 0x55dfe49e06c8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e0750 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e0398 <col:10> 'int' lvalue Var 0x55dfe49e0338 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49e0848 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e0728 <col:10> 'int' lvalue Var 0x55dfe49e06c8 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49e0820 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e0808 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e0728 <col:10> 'int' lvalue Var 0x55dfe49e06c8 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49e07e8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49e04f8 <col:10> 'int' lvalue Var 0x55dfe49e0498 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49e0398 <col:10> 'int' lvalue Var 0x55dfe49e0338 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49e0458 <col:10> 'int' lvalue Var 0x55dfe49e03f8 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49e05b8 <col:10> 'int' lvalue Var 0x55dfe49e0558 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e0688 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e0458 <col:10> 'int' lvalue Var 0x55dfe49e03f8 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49e0658 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49e0618 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49e0600 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49e0458 <col:10> 'int' lvalue Var 0x55dfe49e03f8 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49e02f8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49e01d0 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49e01b0 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49e0188 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49e0160 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49dfdf0 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49e02d8 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49e02f8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49e01d0 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49e01b0 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49e0188 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49e0160 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49dfdf0 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49e02d8 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49e0640 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e0458 <col:10> 'int' lvalue Var 0x55dfe49e03f8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e08c8 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e0398 <col:10> 'int' lvalue Var 0x55dfe49e0338 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49e08a0 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e0870 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e0398 <col:10> 'int' lvalue Var 0x55dfe49e0338 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e0888 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e05b8 <col:10> 'int' lvalue Var 0x55dfe49e0558 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e0948 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e0458 <col:10> 'int' lvalue Var 0x55dfe49e03f8 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49e0920 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e08f0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e0458 <col:10> 'int' lvalue Var 0x55dfe49e03f8 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e0908 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e05b8 <col:10> 'int' lvalue Var 0x55dfe49e0558 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e01d0 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49e01b0 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49e0188 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49e0160 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49dfdf0 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49e01f8 <col:5> 'int' lvalue Var 0x55dfe49dfd30 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49e0298 <col:5> 'int' lvalue Var 0x55dfe49e0238 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49e0998 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e0970 <col:5> 'int' lvalue Var 0x55dfe49dfd30 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49e0a48 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e0970 <col:5> 'int' lvalue Var 0x55dfe49dfd30 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49e0a20 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49e09f8 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49e09e0 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49e09c0 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49e0728 <col:10> 'int' lvalue Var 0x55dfe49e06c8 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49e0ae0 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49e0970 <col:5> 'int' lvalue Var 0x55dfe49dfd30 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49e0ab8 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49e0a90 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49e0a70 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49e01d0 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49e01b0 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49e0188 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49e0160 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49dfdf0 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49dfd90 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49e0100 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49e0ca0 <line:49:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49e0c88 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49e0c08 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49e0cf0 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49e0cd8 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49e0c30 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49e0d08 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49e0c60 <col:25> 'int' lvalue Var 0x55dfe49df648 'isum' 'int'
|   |-CompoundStmt 0x55dfe49e2460 <line:51:3, line:58:3>
|   | |-DeclStmt 0x55dfe49e0de0 <line:52:5, col:17>
|   | | `-VarDecl 0x55dfe49e0d60 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49e0dc0 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49e2260 <line:53:13, col:69>
|   | | |-OMPReductionClause 0x55dfe49e10c0 <col:30, col:48>
|   | | | `-DeclRefExpr 0x55dfe49e0df8 <col:42> 'int' lvalue Var 0x55dfe49e0d60 'isum' 'int'
|   | | |-OMPScheduleClause 0x55dfe49e1168 <col:48, col:68>
|   | | | `-IntegerLiteral 0x55dfe49e1148 <col:65> 'int' 100
|   | | |-CapturedStmt 0x55dfe49e17d8 <line:54:5, line:55:21>
|   | | | |-CapturedDecl 0x55dfe49e12a8 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49e17a0 <line:54:5, line:55:21>
|   | | | | | |-DeclStmt 0x55dfe49e14f0 <line:54:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49e1470 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49e1568 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49e1550 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49e1508 <col:21> 'int' lvalue Var 0x55dfe49e1470 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49e1530 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49e15b8 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49e1590 <col:32> 'int' lvalue Var 0x55dfe49e1470 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e1778 <line:55:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49e15d8 <col:7> 'int' lvalue Var 0x55dfe49e0d60 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49e1750 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49e1720 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49e16d0 <col:14> 'int' lvalue Var 0x55dfe49e0d60 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49e1738 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49e16f8 <col:21> 'int' lvalue Var 0x55dfe49e1470 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49e1310 <line:53:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49e1370 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49e13f8 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:53:13) *'
|   | | | | `-VarDecl 0x55dfe49e1470 <line:54:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49e16a8 <line:55:7> 'int' lvalue Var 0x55dfe49e0d60 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49e1e38 <line:54:10> 'int' lvalue Var 0x55dfe49e1dd8 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49e1a08 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49e18e0 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49e18c0 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e1898 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49e1870 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49e1530 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e19e8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49e1858 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49e1830 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49e1530 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49e1ed0 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49e1ea0 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49e1e38 <col:10> 'int' lvalue Var 0x55dfe49e1dd8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e1eb8 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e1b68 <col:10> 'int' lvalue Var 0x55dfe49e1b08 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e1e78 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e1e38 <col:10> 'int' lvalue Var 0x55dfe49e1dd8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e1e60 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e1aa8 <col:10> 'int' lvalue Var 0x55dfe49e1a48 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49e1f58 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e1e38 <col:10> 'int' lvalue Var 0x55dfe49e1dd8 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49e1f30 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e1f18 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e1e38 <col:10> 'int' lvalue Var 0x55dfe49e1dd8 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49e1ef8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49e1c08 <col:10> 'int' lvalue Var 0x55dfe49e1ba8 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49e1aa8 <col:10> 'int' lvalue Var 0x55dfe49e1a48 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49e1b68 <col:10> 'int' lvalue Var 0x55dfe49e1b08 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49e1cc8 <col:10> 'int' lvalue Var 0x55dfe49e1c68 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e1d98 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e1b68 <col:10> 'int' lvalue Var 0x55dfe49e1b08 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49e1d68 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49e1d28 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49e1d10 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49e1b68 <col:10> 'int' lvalue Var 0x55dfe49e1b08 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49e1a08 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49e18e0 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49e18c0 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49e1898 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49e1870 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49e1530 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49e19e8 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49e1a08 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49e18e0 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49e18c0 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49e1898 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49e1870 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49e1530 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49e19e8 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49e1d50 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e1b68 <col:10> 'int' lvalue Var 0x55dfe49e1b08 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e2008 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e1aa8 <col:10> 'int' lvalue Var 0x55dfe49e1a48 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49e1fe0 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e1f80 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e1aa8 <col:10> 'int' lvalue Var 0x55dfe49e1a48 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e1f98 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e1cc8 <col:10> 'int' lvalue Var 0x55dfe49e1c68 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e2088 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e1b68 <col:10> 'int' lvalue Var 0x55dfe49e1b08 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49e2060 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e2030 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e1b68 <col:10> 'int' lvalue Var 0x55dfe49e1b08 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e2048 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e1cc8 <col:10> 'int' lvalue Var 0x55dfe49e1c68 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e18e0 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49e18c0 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49e1898 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49e1870 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49e1530 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49e1908 <col:5> 'int' lvalue Var 0x55dfe49e1470 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49e19a8 <col:5> 'int' lvalue Var 0x55dfe49e1948 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49e20d8 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e20b0 <col:5> 'int' lvalue Var 0x55dfe49e1470 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49e2188 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e20b0 <col:5> 'int' lvalue Var 0x55dfe49e1470 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49e2160 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49e2138 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49e2120 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49e2100 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49e1e38 <col:10> 'int' lvalue Var 0x55dfe49e1dd8 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49e2220 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49e20b0 <col:5> 'int' lvalue Var 0x55dfe49e1470 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49e21f8 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49e21d0 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49e21b0 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49e18e0 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49e18c0 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49e1898 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49e1870 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49e1530 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49e14d0 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49e1810 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49e23e0 <line:57:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49e23c8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49e2348 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49e2430 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49e2418 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49e2370 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49e2448 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49e23a0 <col:25> 'int' lvalue Var 0x55dfe49e0d60 'isum' 'int'
|   |-CompoundStmt 0x55dfe49e3b40 <line:59:3, line:66:3>
|   | |-DeclStmt 0x55dfe49e2520 <line:60:5, col:17>
|   | | `-VarDecl 0x55dfe49e24a0 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49e2500 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49e3940 <line:61:13, col:65>
|   | | |-OMPReductionClause 0x55dfe49e27e0 <col:30, col:48>
|   | | | `-DeclRefExpr 0x55dfe49e2538 <col:42> 'int' lvalue Var 0x55dfe49e24a0 'isum' 'int'
|   | | |-OMPScheduleClause 0x55dfe49e2868 <col:48, col:64>
|   | | | `-<<<NULL>>>
|   | | |-CapturedStmt 0x55dfe49e2ed8 <line:62:5, line:63:21>
|   | | | |-CapturedDecl 0x55dfe49e29a8 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49e2ea0 <line:62:5, line:63:21>
|   | | | | | |-DeclStmt 0x55dfe49e2bf0 <line:62:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49e2b70 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49e2c68 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49e2c50 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49e2c08 <col:21> 'int' lvalue Var 0x55dfe49e2b70 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49e2c30 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49e2cb8 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49e2c90 <col:32> 'int' lvalue Var 0x55dfe49e2b70 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e2e78 <line:63:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49e2cd8 <col:7> 'int' lvalue Var 0x55dfe49e24a0 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49e2e50 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49e2e20 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49e2dd0 <col:14> 'int' lvalue Var 0x55dfe49e24a0 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49e2e38 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49e2df8 <col:21> 'int' lvalue Var 0x55dfe49e2b70 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49e2a10 <line:61:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49e2a70 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49e2af8 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:61:13) *'
|   | | | | `-VarDecl 0x55dfe49e2b70 <line:62:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49e2da8 <line:63:7> 'int' lvalue Var 0x55dfe49e24a0 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49e3548 <line:62:10> 'int' lvalue Var 0x55dfe49e34e8 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49e3118 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49e2ff0 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49e2fc0 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e2f98 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49e2f70 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49e2c30 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e30f8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49e2f58 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49e2f30 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49e2c30 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49e35e0 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49e35b0 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49e3548 <col:10> 'int' lvalue Var 0x55dfe49e34e8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e35c8 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e3278 <col:10> 'int' lvalue Var 0x55dfe49e3218 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e3588 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e3548 <col:10> 'int' lvalue Var 0x55dfe49e34e8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e3570 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e31b8 <col:10> 'int' lvalue Var 0x55dfe49e3158 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49e3668 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e3548 <col:10> 'int' lvalue Var 0x55dfe49e34e8 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49e3640 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e3628 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e3548 <col:10> 'int' lvalue Var 0x55dfe49e34e8 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49e3608 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49e3318 <col:10> 'int' lvalue Var 0x55dfe49e32b8 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49e31b8 <col:10> 'int' lvalue Var 0x55dfe49e3158 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49e3278 <col:10> 'int' lvalue Var 0x55dfe49e3218 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49e33d8 <col:10> 'int' lvalue Var 0x55dfe49e3378 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e34a8 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e3278 <col:10> 'int' lvalue Var 0x55dfe49e3218 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49e3478 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49e3438 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49e3420 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49e3278 <col:10> 'int' lvalue Var 0x55dfe49e3218 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49e3118 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49e2ff0 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49e2fc0 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49e2f98 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49e2f70 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49e2c30 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49e30f8 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49e3118 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49e2ff0 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49e2fc0 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49e2f98 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49e2f70 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49e2c30 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49e30f8 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49e3460 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e3278 <col:10> 'int' lvalue Var 0x55dfe49e3218 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e36e8 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e31b8 <col:10> 'int' lvalue Var 0x55dfe49e3158 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49e36c0 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e3690 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e31b8 <col:10> 'int' lvalue Var 0x55dfe49e3158 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e36a8 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e33d8 <col:10> 'int' lvalue Var 0x55dfe49e3378 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e3768 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e3278 <col:10> 'int' lvalue Var 0x55dfe49e3218 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49e3740 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e3710 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e3278 <col:10> 'int' lvalue Var 0x55dfe49e3218 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e3728 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e33d8 <col:10> 'int' lvalue Var 0x55dfe49e3378 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e2ff0 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49e2fc0 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49e2f98 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49e2f70 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49e2c30 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49e3018 <col:5> 'int' lvalue Var 0x55dfe49e2b70 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49e30b8 <col:5> 'int' lvalue Var 0x55dfe49e3058 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49e37b8 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e3790 <col:5> 'int' lvalue Var 0x55dfe49e2b70 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49e3868 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e3790 <col:5> 'int' lvalue Var 0x55dfe49e2b70 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49e3840 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49e3818 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49e3800 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49e37e0 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49e3548 <col:10> 'int' lvalue Var 0x55dfe49e34e8 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49e3900 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49e3790 <col:5> 'int' lvalue Var 0x55dfe49e2b70 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49e38d8 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49e38b0 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49e3890 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49e2ff0 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49e2fc0 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49e2f98 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49e2f70 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49e2c30 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49e2bd0 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49e2f10 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49e3ac0 <line:65:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49e3aa8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49e3a28 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49e3b10 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49e3af8 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49e3a50 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49e3b28 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49e3a80 <col:25> 'int' lvalue Var 0x55dfe49e24a0 'isum' 'int'
|   |-CompoundStmt 0x55dfe49e5a40 <line:67:3, line:75:3>
|   | |-DeclStmt 0x55dfe49e3c00 <line:68:5, col:17>
|   | | `-VarDecl 0x55dfe49e3b80 <col:5, col:16> col:9 used isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49e3be0 <col:16> 'int' 0
|   | |-DeclStmt 0x55dfe49e3cb0 <line:69:5, col:16>
|   | | `-VarDecl 0x55dfe49e3c30 <col:5, col:13> col:9 used n 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49e3c90 <col:13> 'int' 800
|   | |-OMPParallelForDirective 0x55dfe49e5838 <line:70:13, col:79>
|   | | |-OMPReductionClause 0x55dfe49e4000 <col:30, col:48>
|   | | | `-DeclRefExpr 0x55dfe49e3cc8 <col:42> 'int' lvalue Var 0x55dfe49e3b80 'isum' 'int'
|   | | |-OMPScheduleClause 0x55dfe49e4088 <col:48, col:64>
|   | | | `-<<<NULL>>>
|   | | |-OMPIfClause 0x55dfe49e4158 <col:66, col:78>
|   | | | `-BinaryOperator 0x55dfe49e4130 <col:70, col:77> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49e40d0 <col:70> 'int' 800
|   | | |   `-ImplicitCastExpr 0x55dfe49e4118 <col:77> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e40f0 <col:77> 'int' lvalue Var 0x55dfe49e3c30 'n' 'int'
|   | | |-CapturedStmt 0x55dfe49e47b8 <line:71:5, line:72:21>
|   | | | |-CapturedDecl 0x55dfe49e4288 <<invalid sloc>> <invalid sloc>
|   | | | | |-ForStmt 0x55dfe49e4780 <line:71:5, line:72:21>
|   | | | | | |-DeclStmt 0x55dfe49e44d0 <line:71:10, col:19>
|   | | | | | | `-VarDecl 0x55dfe49e4450 <col:10, col:18> col:14 used i 'int' cinit
|   | | | | | |   `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | | | | |-<<<NULL>>>
|   | | | | | |-BinaryOperator 0x55dfe49e4548 <col:21, col:26> 'int' '<='
|   | | | | | | |-ImplicitCastExpr 0x55dfe49e4530 <col:21> 'int' <LValueToRValue>
|   | | | | | | | `-DeclRefExpr 0x55dfe49e44e8 <col:21> 'int' lvalue Var 0x55dfe49e4450 'i' 'int'
|   | | | | | | `-IntegerLiteral 0x55dfe49e4510 <col:26> 'int' 1000
|   | | | | | |-UnaryOperator 0x55dfe49e4598 <col:32, col:33> 'int' postfix '++'
|   | | | | | | `-DeclRefExpr 0x55dfe49e4570 <col:32> 'int' lvalue Var 0x55dfe49e4450 'i' 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e4758 <line:72:7, col:21> 'int' '='
|   | | | | |   |-DeclRefExpr 0x55dfe49e45b8 <col:7> 'int' lvalue Var 0x55dfe49e3b80 'isum' 'int'
|   | | | | |   `-BinaryOperator 0x55dfe49e4730 <col:14, col:21> 'int' '+'
|   | | | | |     |-ImplicitCastExpr 0x55dfe49e4700 <col:14> 'int' <LValueToRValue>
|   | | | | |     | `-DeclRefExpr 0x55dfe49e46b0 <col:14> 'int' lvalue Var 0x55dfe49e3b80 'isum' 'int'
|   | | | | |     `-ImplicitCastExpr 0x55dfe49e4718 <col:21> 'int' <LValueToRValue>
|   | | | | |       `-DeclRefExpr 0x55dfe49e46d8 <col:21> 'int' lvalue Var 0x55dfe49e4450 'i' 'int'
|   | | | | |-ImplicitParamDecl 0x55dfe49e42f0 <line:70:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49e4350 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | | | |-ImplicitParamDecl 0x55dfe49e43d8 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:70:13) *'
|   | | | | `-VarDecl 0x55dfe49e4450 <line:71:10, col:18> col:14 used i 'int' cinit
|   | | | |   `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | | `-DeclRefExpr 0x55dfe49e4688 <line:72:7> 'int' lvalue Var 0x55dfe49e3b80 'isum' 'int'
|   | | |-DeclRefExpr 0x55dfe49e4e18 <line:71:10> 'int' lvalue Var 0x55dfe49e4db8 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49e49e8 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49e48c0 <col:5, col:32> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49e48a0 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e4878 <col:26, col:32> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49e4850 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49e4510 <col:26> 'int' 1000
|   | | | | |   | `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e49c8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49e4838 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49e4810 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49e4510 <col:26> 'int' 1000
|   | | |-BinaryOperator 0x55dfe49e4eb0 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49e4e80 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49e4e18 <col:10> 'int' lvalue Var 0x55dfe49e4db8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e4e98 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e4b48 <col:10> 'int' lvalue Var 0x55dfe49e4ae8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e4e58 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e4e18 <col:10> 'int' lvalue Var 0x55dfe49e4db8 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e4e40 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e4a88 <col:10> 'int' lvalue Var 0x55dfe49e4a28 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49e4f38 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e4e18 <col:10> 'int' lvalue Var 0x55dfe49e4db8 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49e4f10 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e4ef8 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e4e18 <col:10> 'int' lvalue Var 0x55dfe49e4db8 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49e4ed8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49e4be8 <col:10> 'int' lvalue Var 0x55dfe49e4b88 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49e4a88 <col:10> 'int' lvalue Var 0x55dfe49e4a28 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49e4b48 <col:10> 'int' lvalue Var 0x55dfe49e4ae8 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49e4ca8 <col:10> 'int' lvalue Var 0x55dfe49e4c48 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e4d78 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e4b48 <col:10> 'int' lvalue Var 0x55dfe49e4ae8 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49e4d48 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49e4d08 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49e4cf0 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49e4b48 <col:10> 'int' lvalue Var 0x55dfe49e4ae8 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49e49e8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49e48c0 <col:5, col:32> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49e48a0 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49e4878 <col:26, col:32> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49e4850 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49e4510 <col:26> 'int' 1000
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49e49c8 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49e49e8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49e48c0 <col:5, col:32> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49e48a0 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49e4878 <col:26, col:32> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49e4850 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49e4510 <col:26> 'int' 1000
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49e49c8 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49e4d30 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e4b48 <col:10> 'int' lvalue Var 0x55dfe49e4ae8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e4fb8 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e4a88 <col:10> 'int' lvalue Var 0x55dfe49e4a28 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49e4f90 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e4f60 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e4a88 <col:10> 'int' lvalue Var 0x55dfe49e4a28 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e4f78 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e4ca8 <col:10> 'int' lvalue Var 0x55dfe49e4c48 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e5660 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e4b48 <col:10> 'int' lvalue Var 0x55dfe49e4ae8 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49e5638 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e4fe0 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e4b48 <col:10> 'int' lvalue Var 0x55dfe49e4ae8 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e5620 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e4ca8 <col:10> 'int' lvalue Var 0x55dfe49e4c48 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e48c0 <col:5, col:32> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49e48a0 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49e4878 <col:26, col:32> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49e4850 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49e4510 <col:26> 'int' 1000
|   | | | |   | `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49e48e8 <col:5> 'int' lvalue Var 0x55dfe49e4450 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49e4988 <col:5> 'int' lvalue Var 0x55dfe49e4928 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49e56b0 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e5688 <col:5> 'int' lvalue Var 0x55dfe49e4450 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49e5760 <col:5, col:32> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e5688 <col:5> 'int' lvalue Var 0x55dfe49e4450 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49e5738 <col:18, col:32> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49e5710 <col:32> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49e56f8 <col:32> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49e56d8 <col:32> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49e4e18 <col:10> 'int' lvalue Var 0x55dfe49e4db8 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | | `-BinaryOperator 0x55dfe49e57f8 <col:5, col:32> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49e5688 <col:5> 'int' lvalue Var 0x55dfe49e4450 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49e57d0 <col:18, col:32> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49e57a8 <col:32> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49e5788 <col:32> 'int'
|   | |       | `-BinaryOperator 0x55dfe49e48c0 <col:5, col:32> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49e48a0 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49e4878 <col:26, col:32> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49e4850 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49e4510 <col:26> 'int' 1000
|   | |       |   |   | `-IntegerLiteral 0x55dfe49e44b0 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49e47f0 <col:32> 'int' 1
|   | `-CallExpr 0x55dfe49e59c0 <line:74:5, col:29> 'int'
|   |   |-ImplicitCastExpr 0x55dfe49e59a8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55dfe49e5928 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |-ImplicitCastExpr 0x55dfe49e5a10 <col:12> 'const char *' <BitCast>
|   |   | `-ImplicitCastExpr 0x55dfe49e59f8 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x55dfe49e5950 <col:12> 'char [9]' lvalue "isum=%d\n"
|   |   `-ImplicitCastExpr 0x55dfe49e5a28 <col:25> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55dfe49e5980 <col:25> 'int' lvalue Var 0x55dfe49e3b80 'isum' 'int'
|   |-CompoundStmt 0x55dfe49e8090 <line:76:3, line:88:3>
|   | |-DeclStmt 0x55dfe49e5b08 <line:77:5, col:17>
|   | | `-VarDecl 0x55dfe49e5a88 <col:5, col:16> col:9 isum 'int' cinit
|   | |   `-IntegerLiteral 0x55dfe49e5ae8 <col:16> 'int' 0
|   | |-OMPParallelForDirective 0x55dfe49e6b38 <line:78:13, col:37>
|   | | |-OMPOrderedClause 0x55dfe49e5b20 <col:30, col:37>
|   | | | `-<<<NULL>>>
|   | | |-CapturedStmt 0x55dfe49e60e0 <line:79:5, line:80:22>
|   | | | `-CapturedDecl 0x55dfe49e5c28 <<invalid sloc>> <invalid sloc>
|   | | |   |-ForStmt 0x55dfe49e60a8 <line:79:5, line:80:22>
|   | | |   | |-DeclStmt 0x55dfe49e5e70 <line:79:10, col:19>
|   | | |   | | `-VarDecl 0x55dfe49e5df0 <col:10, col:18> col:14 used i 'int' cinit
|   | | |   | |   `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | |   | |-<<<NULL>>>
|   | | |   | |-BinaryOperator 0x55dfe49e5ee8 <col:21, col:26> 'int' '<='
|   | | |   | | |-ImplicitCastExpr 0x55dfe49e5ed0 <col:21> 'int' <LValueToRValue>
|   | | |   | | | `-DeclRefExpr 0x55dfe49e5e88 <col:21> 'int' lvalue Var 0x55dfe49e5df0 'i' 'int'
|   | | |   | | `-IntegerLiteral 0x55dfe49e5eb0 <col:26> 'int' 10
|   | | |   | |-UnaryOperator 0x55dfe49e5f38 <col:30, col:31> 'int' postfix '++'
|   | | |   | | `-DeclRefExpr 0x55dfe49e5f10 <col:30> 'int' lvalue Var 0x55dfe49e5df0 'i' 'int'
|   | | |   | `-CallExpr 0x55dfe49e6028 <line:80:7, col:22> 'int'
|   | | |   |   |-ImplicitCastExpr 0x55dfe49e6010 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | |   |   | `-DeclRefExpr 0x55dfe49e5f58 <col:7> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   | | |   |   |-ImplicitCastExpr 0x55dfe49e6078 <col:14> 'const char *' <BitCast>
|   | | |   |   | `-ImplicitCastExpr 0x55dfe49e6060 <col:14> 'char *' <ArrayToPointerDecay>
|   | | |   |   |   `-StringLiteral 0x55dfe49e5fb8 <col:14> 'char [4]' lvalue "%d "
|   | | |   |   `-ImplicitCastExpr 0x55dfe49e6090 <col:21> 'int' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x55dfe49e5fe8 <col:21> 'int' lvalue Var 0x55dfe49e5df0 'i' 'int'
|   | | |   |-ImplicitParamDecl 0x55dfe49e5c90 <line:78:13> col:13 implicit .global_tid. 'int *const restrict'
|   | | |   |-ImplicitParamDecl 0x55dfe49e5cf0 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   | | |   |-ImplicitParamDecl 0x55dfe49e5d78 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:78:13) *'
|   | | |   `-VarDecl 0x55dfe49e5df0 <line:79:10, col:18> col:14 used i 'int' cinit
|   | | |     `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | |-DeclRefExpr 0x55dfe49e6740 <col:10> 'int' lvalue Var 0x55dfe49e66e0 '.omp.iv' 'int'
|   | | |-BinaryOperator 0x55dfe49e62f8 <col:5, <invalid sloc>> 'int' '-'
|   | | | |-BinaryOperator 0x55dfe49e61d0 <col:5, col:30> 'int' '/'
|   | | | | |-ParenExpr 0x55dfe49e61b0 <col:5> 'int'
|   | | | | | `-BinaryOperator 0x55dfe49e6188 <col:26, col:30> 'int' '+'
|   | | | | |   |-BinaryOperator 0x55dfe49e6160 <col:26, col:18> 'int' '-'
|   | | | | |   | |-IntegerLiteral 0x55dfe49e5eb0 <col:26> 'int' 10
|   | | | | |   | `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | | | |   `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | | | `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e62d8 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-ImplicitCastExpr 0x55dfe49e6148 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   | | | `-BinaryOperator 0x55dfe49e6120 <col:18, col:26> 'int' '<='
|   | | |   |-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | |   `-IntegerLiteral 0x55dfe49e5eb0 <col:26> 'int' 10
|   | | |-BinaryOperator 0x55dfe49e67d8 <col:10> 'int' '<='
|   | | | |-ImplicitCastExpr 0x55dfe49e67a8 <col:10> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x55dfe49e6740 <col:10> 'int' lvalue Var 0x55dfe49e66e0 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e67c0 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e6458 <col:10> 'int' lvalue Var 0x55dfe49e63f8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e6780 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e6740 <col:10> 'int' lvalue Var 0x55dfe49e66e0 '.omp.iv' 'int'
|   | | | `-ImplicitCastExpr 0x55dfe49e6768 <col:10> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x55dfe49e6398 <col:10> 'int' lvalue Var 0x55dfe49e6338 '.omp.lb' 'int'
|   | | |-BinaryOperator 0x55dfe49e6860 <col:10, <invalid sloc>> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e6740 <col:10> 'int' lvalue Var 0x55dfe49e66e0 '.omp.iv' 'int'
|   | | | `-BinaryOperator 0x55dfe49e6838 <col:10, <invalid sloc>> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e6820 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e6740 <col:10> 'int' lvalue Var 0x55dfe49e66e0 '.omp.iv' 'int'
|   | | |   `-IntegerLiteral 0x55dfe49e6800 <<invalid sloc>> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-DeclRefExpr 0x55dfe49e64f8 <col:10> 'int' lvalue Var 0x55dfe49e6498 '.omp.is_last' 'int'
|   | | |-DeclRefExpr 0x55dfe49e6398 <col:10> 'int' lvalue Var 0x55dfe49e6338 '.omp.lb' 'int'
|   | | |-DeclRefExpr 0x55dfe49e6458 <col:10> 'int' lvalue Var 0x55dfe49e63f8 '.omp.ub' 'int'
|   | | |-DeclRefExpr 0x55dfe49e65b8 <col:10> 'int' lvalue Var 0x55dfe49e6558 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e66a0 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e6458 <col:10> 'int' lvalue Var 0x55dfe49e63f8 '.omp.ub' 'int'
|   | | | `-ConditionalOperator 0x55dfe49e6670 <col:10> 'int'
|   | | |   |-BinaryOperator 0x55dfe49e6630 <col:10, <invalid sloc>> 'int' '>'
|   | | |   | |-ImplicitCastExpr 0x55dfe49e6600 <col:10> 'int' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x55dfe49e6458 <col:10> 'int' lvalue Var 0x55dfe49e63f8 '.omp.ub' 'int'
|   | | |   | `-BinaryOperator 0x55dfe49e62f8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   |   |-BinaryOperator 0x55dfe49e61d0 <col:5, col:30> 'int' '/'
|   | | |   |   | |-ParenExpr 0x55dfe49e61b0 <col:5> 'int'
|   | | |   |   | | `-BinaryOperator 0x55dfe49e6188 <col:26, col:30> 'int' '+'
|   | | |   |   | |   |-BinaryOperator 0x55dfe49e6160 <col:26, col:18> 'int' '-'
|   | | |   |   | |   | |-IntegerLiteral 0x55dfe49e5eb0 <col:26> 'int' 10
|   | | |   |   | |   | `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | |   |   | |   `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | |   |   | `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | |   |   `-IntegerLiteral 0x55dfe49e62d8 <<invalid sloc>> 'int' 1
|   | | |   |-BinaryOperator 0x55dfe49e62f8 <col:5, <invalid sloc>> 'int' '-'
|   | | |   | |-BinaryOperator 0x55dfe49e61d0 <col:5, col:30> 'int' '/'
|   | | |   | | |-ParenExpr 0x55dfe49e61b0 <col:5> 'int'
|   | | |   | | | `-BinaryOperator 0x55dfe49e6188 <col:26, col:30> 'int' '+'
|   | | |   | | |   |-BinaryOperator 0x55dfe49e6160 <col:26, col:18> 'int' '-'
|   | | |   | | |   | |-IntegerLiteral 0x55dfe49e5eb0 <col:26> 'int' 10
|   | | |   | | |   | `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | |   | | |   `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | |   | | `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | |   | `-IntegerLiteral 0x55dfe49e62d8 <<invalid sloc>> 'int' 1
|   | | |   `-ImplicitCastExpr 0x55dfe49e6658 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e6458 <col:10> 'int' lvalue Var 0x55dfe49e63f8 '.omp.ub' 'int'
|   | | |-BinaryOperator 0x55dfe49e68e0 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e6398 <col:10> 'int' lvalue Var 0x55dfe49e6338 '.omp.lb' 'int'
|   | | | `-BinaryOperator 0x55dfe49e68b8 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e6888 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e6398 <col:10> 'int' lvalue Var 0x55dfe49e6338 '.omp.lb' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e68a0 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e65b8 <col:10> 'int' lvalue Var 0x55dfe49e6558 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e6960 <col:10> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e6458 <col:10> 'int' lvalue Var 0x55dfe49e63f8 '.omp.ub' 'int'
|   | | | `-BinaryOperator 0x55dfe49e6938 <col:10> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x55dfe49e6908 <col:10> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x55dfe49e6458 <col:10> 'int' lvalue Var 0x55dfe49e63f8 '.omp.ub' 'int'
|   | | |   `-ImplicitCastExpr 0x55dfe49e6920 <col:10> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55dfe49e65b8 <col:10> 'int' lvalue Var 0x55dfe49e6558 '.omp.stride' 'int'
|   | | |-BinaryOperator 0x55dfe49e61d0 <col:5, col:30> 'int' '/'
|   | | | |-ParenExpr 0x55dfe49e61b0 <col:5> 'int'
|   | | | | `-BinaryOperator 0x55dfe49e6188 <col:26, col:30> 'int' '+'
|   | | | |   |-BinaryOperator 0x55dfe49e6160 <col:26, col:18> 'int' '-'
|   | | | |   | |-IntegerLiteral 0x55dfe49e5eb0 <col:26> 'int' 10
|   | | | |   | `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | | |   `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | | `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | |-DeclRefExpr 0x55dfe49e61f8 <col:5> 'int' lvalue Var 0x55dfe49e5df0 'i' 'int'
|   | | |-DeclRefExpr 0x55dfe49e6298 <col:5> 'int' lvalue Var 0x55dfe49e6238 'i' 'int'
|   | | |-BinaryOperator 0x55dfe49e69b0 <col:5, col:18> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e6988 <col:5> 'int' lvalue Var 0x55dfe49e5df0 'i' 'int'
|   | | | `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | |-BinaryOperator 0x55dfe49e6a60 <col:5, col:30> 'int' '='
|   | | | |-DeclRefExpr 0x55dfe49e6988 <col:5> 'int' lvalue Var 0x55dfe49e5df0 'i' 'int'
|   | | | `-BinaryOperator 0x55dfe49e6a38 <col:18, col:30> 'int' '+'
|   | | |   |-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | | |   `-BinaryOperator 0x55dfe49e6a10 <col:30> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x55dfe49e69f8 <col:30> 'int' <LValueToRValue>
|   | | |     | `-ParenExpr 0x55dfe49e69d8 <col:30> 'int' lvalue
|   | | |     |   `-DeclRefExpr 0x55dfe49e6740 <col:10> 'int' lvalue Var 0x55dfe49e66e0 '.omp.iv' 'int'
|   | | |     `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | | `-BinaryOperator 0x55dfe49e6af8 <col:5, col:30> 'int' '='
|   | |   |-DeclRefExpr 0x55dfe49e6988 <col:5> 'int' lvalue Var 0x55dfe49e5df0 'i' 'int'
|   | |   `-BinaryOperator 0x55dfe49e6ad0 <col:18, col:30> 'int' '+'
|   | |     |-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | |     `-BinaryOperator 0x55dfe49e6aa8 <col:30> 'int' '*'
|   | |       |-ParenExpr 0x55dfe49e6a88 <col:30> 'int'
|   | |       | `-BinaryOperator 0x55dfe49e61d0 <col:5, col:30> 'int' '/'
|   | |       |   |-ParenExpr 0x55dfe49e61b0 <col:5> 'int'
|   | |       |   | `-BinaryOperator 0x55dfe49e6188 <col:26, col:30> 'int' '+'
|   | |       |   |   |-BinaryOperator 0x55dfe49e6160 <col:26, col:18> 'int' '-'
|   | |       |   |   | |-IntegerLiteral 0x55dfe49e5eb0 <col:26> 'int' 10
|   | |       |   |   | `-IntegerLiteral 0x55dfe49e5e50 <col:18> 'int' 0
|   | |       |   |   `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | |       |   `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | |       `-IntegerLiteral 0x55dfe49e6100 <col:30> 'int' 1
|   | |-CallExpr 0x55dfe49e6cc0 <line:82:5, col:16> 'int'
|   | | |-ImplicitCastExpr 0x55dfe49e6ca8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x55dfe49e6c18 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   | | `-ImplicitCastExpr 0x55dfe49e6d08 <col:12> 'const char *' <BitCast>
|   | |   `-ImplicitCastExpr 0x55dfe49e6cf0 <col:12> 'char *' <ArrayToPointerDecay>
|   | |     `-StringLiteral 0x55dfe49e6c78 <col:12> 'char [2]' lvalue "\n"
|   | `-OMPParallelForDirective 0x55dfe49e7fb0 <line:83:13, col:37>
|   |   |-OMPOrderedClause 0x55dfe49e6d20 <col:30, col:37>
|   |   | `-<<<NULL>>>
|   |   |-CapturedStmt 0x55dfe49e7560 <line:84:5, line:85:26>
|   |   | `-CapturedDecl 0x55dfe49e6e28 <<invalid sloc>> <invalid sloc>
|   |   |   |-ForStmt 0x55dfe49e7528 <line:84:5, line:85:26>
|   |   |   | |-DeclStmt 0x55dfe49e7070 <line:84:10, col:19>
|   |   |   | | `-VarDecl 0x55dfe49e6ff0 <col:10, col:18> col:14 used i 'int' cinit
|   |   |   | |   `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x55dfe49e70e8 <col:21, col:26> 'int' '<='
|   |   |   | | |-ImplicitCastExpr 0x55dfe49e70d0 <col:21> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x55dfe49e7088 <col:21> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x55dfe49e70b0 <col:26> 'int' 10
|   |   |   | |-UnaryOperator 0x55dfe49e7138 <col:30, col:31> 'int' postfix '++'
|   |   |   | | `-DeclRefExpr 0x55dfe49e7110 <col:30> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   |   | `-OMPOrderedDirective 0x55dfe49e7500 <line:85:15, col:26>
|   |   |   |   `-CapturedStmt 0x55dfe49e74c8 <line:87:5, col:20>
|   |   |   |     |-CapturedDecl 0x55dfe49e7248 <<invalid sloc>> <invalid sloc>
|   |   |   |     | |-CallExpr 0x55dfe49e7448 <col:5, col:20> 'int'
|   |   |   |     | | |-ImplicitCastExpr 0x55dfe49e7430 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   |   |     | | | `-DeclRefExpr 0x55dfe49e7328 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |   |     | | |-ImplicitCastExpr 0x55dfe49e7498 <col:12> 'const char *' <BitCast>
|   |   |   |     | | | `-ImplicitCastExpr 0x55dfe49e7480 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |   |     | | |   `-StringLiteral 0x55dfe49e7350 <col:12> 'char [4]' lvalue "%d "
|   |   |   |     | | `-ImplicitCastExpr 0x55dfe49e74b0 <col:19> 'int' <LValueToRValue>
|   |   |   |     | |   `-DeclRefExpr 0x55dfe49e7380 <col:19> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   |   |     | `-ImplicitParamDecl 0x55dfe49e72c8 <line:85:15> col:15 implicit __context 'struct (anonymous at data_range2_-_main.c:85:15) *'
|   |   |   |     `-DeclRefExpr 0x55dfe49e7408 <line:87:19> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   |   |-ImplicitParamDecl 0x55dfe49e6e90 <line:83:13> col:13 implicit .global_tid. 'int *const restrict'
|   |   |   |-ImplicitParamDecl 0x55dfe49e6ef0 <col:13> col:13 implicit .bound_tid. 'int *const restrict'
|   |   |   |-ImplicitParamDecl 0x55dfe49e6f78 <col:13> col:13 implicit __context 'struct (anonymous at data_range2_-_main.c:83:13) *'
|   |   |   |-VarDecl 0x55dfe49e6ff0 <line:84:10, col:18> col:14 used i 'int' cinit
|   |   |   | `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   |   |-RecordDecl 0x55dfe49e7158 <line:85:15> col:15 implicit struct definition
|   |   |   | |-CapturedRecordAttr 0x55dfe49e7200 <<invalid sloc>> Implicit
|   |   |   | `-FieldDecl 0x55dfe49e73c0 <line:87:19> col:19 implicit 'int &'
|   |   |   `-CapturedDecl 0x55dfe49e7248 <<invalid sloc>> <invalid sloc>
|   |   |     |-CallExpr 0x55dfe49e7448 <col:5, col:20> 'int'
|   |   |     | |-ImplicitCastExpr 0x55dfe49e7430 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x55dfe49e7328 <col:5> 'int (const char *, ...)' Function 0x55dfe49d7670 'printf' 'int (const char *, ...)'
|   |   |     | |-ImplicitCastExpr 0x55dfe49e7498 <col:12> 'const char *' <BitCast>
|   |   |     | | `-ImplicitCastExpr 0x55dfe49e7480 <col:12> 'char *' <ArrayToPointerDecay>
|   |   |     | |   `-StringLiteral 0x55dfe49e7350 <col:12> 'char [4]' lvalue "%d "
|   |   |     | `-ImplicitCastExpr 0x55dfe49e74b0 <col:19> 'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x55dfe49e7380 <col:19> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   |     `-ImplicitParamDecl 0x55dfe49e72c8 <line:85:15> col:15 implicit __context 'struct (anonymous at data_range2_-_main.c:85:15) *'
|   |   |-DeclRefExpr 0x55dfe49e7bb8 <line:84:10> 'int' lvalue Var 0x55dfe49e7b58 '.omp.iv' 'int'
|   |   |-BinaryOperator 0x55dfe49e7788 <col:5, <invalid sloc>> 'int' '-'
|   |   | |-BinaryOperator 0x55dfe49e7660 <col:5, col:30> 'int' '/'
|   |   | | |-ParenExpr 0x55dfe49e7640 <col:5> 'int'
|   |   | | | `-BinaryOperator 0x55dfe49e7608 <col:26, col:30> 'int' '+'
|   |   | | |   |-BinaryOperator 0x55dfe49e75e0 <col:26, col:18> 'int' '-'
|   |   | | |   | |-IntegerLiteral 0x55dfe49e70b0 <col:26> 'int' 10
|   |   | | |   | `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   | | |   `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   | | `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   | `-IntegerLiteral 0x55dfe49e7768 <<invalid sloc>> 'int' 1
|   |   |-<<<NULL>>>
|   |   |-ImplicitCastExpr 0x55dfe49e75c8 <col:18, col:26> '_Bool' <IntegralToBoolean>
|   |   | `-BinaryOperator 0x55dfe49e75a0 <col:18, col:26> 'int' '<='
|   |   |   |-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   |   `-IntegerLiteral 0x55dfe49e70b0 <col:26> 'int' 10
|   |   |-BinaryOperator 0x55dfe49e7c50 <col:10> 'int' '<='
|   |   | |-ImplicitCastExpr 0x55dfe49e7c20 <col:10> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x55dfe49e7bb8 <col:10> 'int' lvalue Var 0x55dfe49e7b58 '.omp.iv' 'int'
|   |   | `-ImplicitCastExpr 0x55dfe49e7c38 <col:10> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55dfe49e78e8 <col:10> 'int' lvalue Var 0x55dfe49e7888 '.omp.ub' 'int'
|   |   |-BinaryOperator 0x55dfe49e7bf8 <col:10> 'int' '='
|   |   | |-DeclRefExpr 0x55dfe49e7bb8 <col:10> 'int' lvalue Var 0x55dfe49e7b58 '.omp.iv' 'int'
|   |   | `-ImplicitCastExpr 0x55dfe49e7be0 <col:10> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55dfe49e7828 <col:10> 'int' lvalue Var 0x55dfe49e77c8 '.omp.lb' 'int'
|   |   |-BinaryOperator 0x55dfe49e7cd8 <col:10, <invalid sloc>> 'int' '='
|   |   | |-DeclRefExpr 0x55dfe49e7bb8 <col:10> 'int' lvalue Var 0x55dfe49e7b58 '.omp.iv' 'int'
|   |   | `-BinaryOperator 0x55dfe49e7cb0 <col:10, <invalid sloc>> 'int' '+'
|   |   |   |-ImplicitCastExpr 0x55dfe49e7c98 <col:10> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55dfe49e7bb8 <col:10> 'int' lvalue Var 0x55dfe49e7b58 '.omp.iv' 'int'
|   |   |   `-IntegerLiteral 0x55dfe49e7c78 <<invalid sloc>> 'int' 1
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x55dfe49e7988 <col:10> 'int' lvalue Var 0x55dfe49e7928 '.omp.is_last' 'int'
|   |   |-DeclRefExpr 0x55dfe49e7828 <col:10> 'int' lvalue Var 0x55dfe49e77c8 '.omp.lb' 'int'
|   |   |-DeclRefExpr 0x55dfe49e78e8 <col:10> 'int' lvalue Var 0x55dfe49e7888 '.omp.ub' 'int'
|   |   |-DeclRefExpr 0x55dfe49e7a48 <col:10> 'int' lvalue Var 0x55dfe49e79e8 '.omp.stride' 'int'
|   |   |-BinaryOperator 0x55dfe49e7b18 <col:10> 'int' '='
|   |   | |-DeclRefExpr 0x55dfe49e78e8 <col:10> 'int' lvalue Var 0x55dfe49e7888 '.omp.ub' 'int'
|   |   | `-ConditionalOperator 0x55dfe49e7ae8 <col:10> 'int'
|   |   |   |-BinaryOperator 0x55dfe49e7aa8 <col:10, <invalid sloc>> 'int' '>'
|   |   |   | |-ImplicitCastExpr 0x55dfe49e7a90 <col:10> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55dfe49e78e8 <col:10> 'int' lvalue Var 0x55dfe49e7888 '.omp.ub' 'int'
|   |   |   | `-BinaryOperator 0x55dfe49e7788 <col:5, <invalid sloc>> 'int' '-'
|   |   |   |   |-BinaryOperator 0x55dfe49e7660 <col:5, col:30> 'int' '/'
|   |   |   |   | |-ParenExpr 0x55dfe49e7640 <col:5> 'int'
|   |   |   |   | | `-BinaryOperator 0x55dfe49e7608 <col:26, col:30> 'int' '+'
|   |   |   |   | |   |-BinaryOperator 0x55dfe49e75e0 <col:26, col:18> 'int' '-'
|   |   |   |   | |   | |-IntegerLiteral 0x55dfe49e70b0 <col:26> 'int' 10
|   |   |   |   | |   | `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   |   |   | |   `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   |   |   | `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   |   |   `-IntegerLiteral 0x55dfe49e7768 <<invalid sloc>> 'int' 1
|   |   |   |-BinaryOperator 0x55dfe49e7788 <col:5, <invalid sloc>> 'int' '-'
|   |   |   | |-BinaryOperator 0x55dfe49e7660 <col:5, col:30> 'int' '/'
|   |   |   | | |-ParenExpr 0x55dfe49e7640 <col:5> 'int'
|   |   |   | | | `-BinaryOperator 0x55dfe49e7608 <col:26, col:30> 'int' '+'
|   |   |   | | |   |-BinaryOperator 0x55dfe49e75e0 <col:26, col:18> 'int' '-'
|   |   |   | | |   | |-IntegerLiteral 0x55dfe49e70b0 <col:26> 'int' 10
|   |   |   | | |   | `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   |   | | |   `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   |   | | `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   |   | `-IntegerLiteral 0x55dfe49e7768 <<invalid sloc>> 'int' 1
|   |   |   `-ImplicitCastExpr 0x55dfe49e7ad0 <col:10> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55dfe49e78e8 <col:10> 'int' lvalue Var 0x55dfe49e7888 '.omp.ub' 'int'
|   |   |-BinaryOperator 0x55dfe49e7d58 <col:10> 'int' '='
|   |   | |-DeclRefExpr 0x55dfe49e7828 <col:10> 'int' lvalue Var 0x55dfe49e77c8 '.omp.lb' 'int'
|   |   | `-BinaryOperator 0x55dfe49e7d30 <col:10> 'int' '+'
|   |   |   |-ImplicitCastExpr 0x55dfe49e7d00 <col:10> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55dfe49e7828 <col:10> 'int' lvalue Var 0x55dfe49e77c8 '.omp.lb' 'int'
|   |   |   `-ImplicitCastExpr 0x55dfe49e7d18 <col:10> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55dfe49e7a48 <col:10> 'int' lvalue Var 0x55dfe49e79e8 '.omp.stride' 'int'
|   |   |-BinaryOperator 0x55dfe49e7dd8 <col:10> 'int' '='
|   |   | |-DeclRefExpr 0x55dfe49e78e8 <col:10> 'int' lvalue Var 0x55dfe49e7888 '.omp.ub' 'int'
|   |   | `-BinaryOperator 0x55dfe49e7db0 <col:10> 'int' '+'
|   |   |   |-ImplicitCastExpr 0x55dfe49e7d80 <col:10> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55dfe49e78e8 <col:10> 'int' lvalue Var 0x55dfe49e7888 '.omp.ub' 'int'
|   |   |   `-ImplicitCastExpr 0x55dfe49e7d98 <col:10> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x55dfe49e7a48 <col:10> 'int' lvalue Var 0x55dfe49e79e8 '.omp.stride' 'int'
|   |   |-BinaryOperator 0x55dfe49e7660 <col:5, col:30> 'int' '/'
|   |   | |-ParenExpr 0x55dfe49e7640 <col:5> 'int'
|   |   | | `-BinaryOperator 0x55dfe49e7608 <col:26, col:30> 'int' '+'
|   |   | |   |-BinaryOperator 0x55dfe49e75e0 <col:26, col:18> 'int' '-'
|   |   | |   | |-IntegerLiteral 0x55dfe49e70b0 <col:26> 'int' 10
|   |   | |   | `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   | |   `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   | `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   |-DeclRefExpr 0x55dfe49e7688 <col:5> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   |-DeclRefExpr 0x55dfe49e7728 <col:5> 'int' lvalue Var 0x55dfe49e76c8 'i' 'int'
|   |   |-BinaryOperator 0x55dfe49e7e28 <col:5, col:18> 'int' '='
|   |   | |-DeclRefExpr 0x55dfe49e7e00 <col:5> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   | `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   |-BinaryOperator 0x55dfe49e7ed8 <col:5, col:30> 'int' '='
|   |   | |-DeclRefExpr 0x55dfe49e7e00 <col:5> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |   | `-BinaryOperator 0x55dfe49e7eb0 <col:18, col:30> 'int' '+'
|   |   |   |-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |   |   `-BinaryOperator 0x55dfe49e7e88 <col:30> 'int' '*'
|   |   |     |-ImplicitCastExpr 0x55dfe49e7e70 <col:30> 'int' <LValueToRValue>
|   |   |     | `-ParenExpr 0x55dfe49e7e50 <col:30> 'int' lvalue
|   |   |     |   `-DeclRefExpr 0x55dfe49e7bb8 <col:10> 'int' lvalue Var 0x55dfe49e7b58 '.omp.iv' 'int'
|   |   |     `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |   `-BinaryOperator 0x55dfe49e7f70 <col:5, col:30> 'int' '='
|   |     |-DeclRefExpr 0x55dfe49e7e00 <col:5> 'int' lvalue Var 0x55dfe49e6ff0 'i' 'int'
|   |     `-BinaryOperator 0x55dfe49e7f48 <col:18, col:30> 'int' '+'
|   |       |-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |       `-BinaryOperator 0x55dfe49e7f20 <col:30> 'int' '*'
|   |         |-ParenExpr 0x55dfe49e7f00 <col:30> 'int'
|   |         | `-BinaryOperator 0x55dfe49e7660 <col:5, col:30> 'int' '/'
|   |         |   |-ParenExpr 0x55dfe49e7640 <col:5> 'int'
|   |         |   | `-BinaryOperator 0x55dfe49e7608 <col:26, col:30> 'int' '+'
|   |         |   |   |-BinaryOperator 0x55dfe49e75e0 <col:26, col:18> 'int' '-'
|   |         |   |   | |-IntegerLiteral 0x55dfe49e70b0 <col:26> 'int' 10
|   |         |   |   | `-IntegerLiteral 0x55dfe49e7050 <col:18> 'int' 0
|   |         |   |   `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |         |   `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   |         `-IntegerLiteral 0x55dfe49e7580 <col:30> 'int' 1
|   `-ReturnStmt 0x55dfe49e80e0 <line:89:3, col:10>
|     `-IntegerLiteral 0x55dfe49e80c0 <col:10> 'int' 0
`-FunctionDecl 0x55dfe49d7670 <line:9:5> col:5 implicit used printf 'int (const char *, ...)' extern
  |-ParmVarDecl 0x55dfe49d7710 <<invalid sloc>> <invalid sloc> 'const char *'
  `-FormatAttr 0x55dfe49d7778 <col:5> Implicit printf 1 2
