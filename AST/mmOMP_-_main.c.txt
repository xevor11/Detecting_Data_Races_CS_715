TranslationUnitDecl 0x559af0df9b98 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x559af0dfa130 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x559af0df9e30 '__int128'
|-TypedefDecl 0x559af0dfa1a0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x559af0df9e50 'unsigned __int128'
|-TypedefDecl 0x559af0dfa478 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x559af0dfa280 'struct __NSConstantString_tag'
|   `-Record 0x559af0dfa1f8 '__NSConstantString_tag'
|-TypedefDecl 0x559af0dfa510 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x559af0dfa4d0 'char *'
|   `-BuiltinType 0x559af0df9c30 'char'
|-TypedefDecl 0x559af0dfa7d8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x559af0dfa780 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x559af0dfa5f0 'struct __va_list_tag'
|     `-Record 0x559af0dfa568 '__va_list_tag'
|-FunctionDecl 0x559af0e53d40 <mmOMP_-_main.c:1:1, line:67:1> line:1:5 main 'int ()'
| `-CompoundStmt 0x559af0e60378 <line:2:1, line:67:1>
|   |-DeclStmt 0x559af0e53e98 <line:3:3, col:10>
|   | `-VarDecl 0x559af0e53e38 <col:3, col:7> col:7 used tid 'int'
|   |-DeclStmt 0x559af0e53f28 <line:4:3, col:15>
|   | `-VarDecl 0x559af0e53ec8 <col:3, col:7> col:7 used nthreads 'int'
|   |-DeclStmt 0x559af0e53fb8 <line:5:3, col:8>
|   | `-VarDecl 0x559af0e53f58 <col:3, col:7> col:7 used i 'int'
|   |-DeclStmt 0x559af0e54048 <line:6:3, col:8>
|   | `-VarDecl 0x559af0e53fe8 <col:3, col:7> col:7 used j 'int'
|   |-DeclStmt 0x559af0e540d8 <line:7:3, col:8>
|   | `-VarDecl 0x559af0e54078 <col:3, col:7> col:7 used k 'int'
|   |-DeclStmt 0x559af0e54168 <line:8:3, col:12>
|   | `-VarDecl 0x559af0e54108 <col:3, col:7> col:7 used chunk 'int'
|   |-DeclStmt 0x559af0e542d0 <line:9:3, col:18>
|   | `-VarDecl 0x559af0e54270 <col:3, col:17> col:10 used a 'double [8][10]'
|   |-DeclStmt 0x559af0e54440 <line:10:3, col:18>
|   | `-VarDecl 0x559af0e543e0 <col:3, col:17> col:10 used b 'double [10][5]'
|   |-DeclStmt 0x559af0e54570 <line:11:3, col:17>
|   | `-VarDecl 0x559af0e54510 <col:3, col:16> col:10 used c 'double [8][5]'
|   |-BinaryOperator 0x559af0e545d0 <line:12:3, col:11> 'int' '='
|   | |-DeclRefExpr 0x559af0e54588 <col:3> 'int' lvalue Var 0x559af0e54108 'chunk' 'int'
|   | `-IntegerLiteral 0x559af0e545b0 <col:11> 'int' 10
|   |-OMPParallelDirective 0x559af0e5f828 <line:13:11, col:52>
|   | |-OMPSharedClause 0x559af0e546c0 <col:24, col:52>
|   | | |-DeclRefExpr 0x559af0e545f8 <col:31> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   | | |-DeclRefExpr 0x559af0e54620 <col:33> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   | | |-DeclRefExpr 0x559af0e54648 <col:35> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   | | |-DeclRefExpr 0x559af0e54670 <col:37> 'int' lvalue Var 0x559af0e53ec8 'nthreads' 'int'
|   | | `-DeclRefExpr 0x559af0e54698 <col:46> 'int' lvalue Var 0x559af0e54108 'chunk' 'int'
|   | `-CapturedStmt 0x559af0e5f730 <line:14:3, line:53:3>
|   |   |-CapturedDecl 0x559af0e54818 <<invalid sloc>> <invalid sloc>
|   |   | |-CompoundStmt 0x559af0e5f6e8 <line:14:3, line:53:3>
|   |   | | |-BinaryOperator 0x559af0e54c18 <line:15:5, col:30> 'int' '='
|   |   | | | |-DeclRefExpr 0x559af0e549f8 <col:5> 'int' lvalue Var 0x559af0e53e38 'tid' 'int'
|   |   | | | `-CallExpr 0x559af0e54bf0 <col:11, col:30> 'int'
|   |   | | |   `-ImplicitCastExpr 0x559af0e54bd8 <col:11> 'int (*)()' <FunctionToPointerDecay>
|   |   | | |     `-DeclRefExpr 0x559af0e54b80 <col:11> 'int ()' Function 0x559af0e54ad0 'omp_get_thread_num' 'int ()'
|   |   | | |-IfStmt 0x559af0e56a50 <line:16:5, line:21:5>
|   |   | | | |-<<<NULL>>>
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559af0e54ca0 <line:16:9, col:16> 'int' '=='
|   |   | | | | |-ImplicitCastExpr 0x559af0e54c88 <col:9> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559af0e54c40 <col:9> 'int' lvalue Var 0x559af0e53e38 'tid' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e54c68 <col:16> 'int' 0
|   |   | | | |-CompoundStmt 0x559af0e56a28 <line:17:5, line:21:5>
|   |   | | | | |-BinaryOperator 0x559af0e561d0 <line:18:7, col:38> 'int' '='
|   |   | | | | | |-DeclRefExpr 0x559af0e54cc8 <col:7> 'int' lvalue Var 0x559af0e53ec8 'nthreads' 'int'
|   |   | | | | | `-CallExpr 0x559af0e561a8 <col:18, col:38> 'int'
|   |   | | | | |   `-ImplicitCastExpr 0x559af0e56190 <col:18> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | | |     `-DeclRefExpr 0x559af0e56168 <col:18> 'int ()' Function 0x559af0e560b8 'omp_get_num_threads' 'int ()'
|   |   | | | | |-CallExpr 0x559af0e56880 <line:19:7, col:76> 'int'
|   |   | | | | | |-ImplicitCastExpr 0x559af0e56868 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | | | | | `-DeclRefExpr 0x559af0e56750 <col:7> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   |   | | | | | |-ImplicitCastExpr 0x559af0e568d0 <col:14> 'const char *' <BitCast>
|   |   | | | | | | `-ImplicitCastExpr 0x559af0e568b8 <col:14> 'char *' <ArrayToPointerDecay>
|   |   | | | | | |   `-StringLiteral 0x559af0e567b8 <col:14> 'char [50]' lvalue "Starting matrix multiple example with %d threads\n"
|   |   | | | | | `-ImplicitCastExpr 0x559af0e568e8 <col:68> 'int' <LValueToRValue>
|   |   | | | | |   `-DeclRefExpr 0x559af0e56818 <col:68> 'int' lvalue Var 0x559af0e53ec8 'nthreads' 'int'
|   |   | | | | `-CallExpr 0x559af0e569c8 <line:20:7, col:42> 'int'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e569b0 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | | |   | `-DeclRefExpr 0x559af0e56900 <col:7> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   |   | | | |   `-ImplicitCastExpr 0x559af0e56a10 <col:14> 'const char *' <BitCast>
|   |   | | | |     `-ImplicitCastExpr 0x559af0e569f8 <col:14> 'char *' <ArrayToPointerDecay>
|   |   | | | |       `-StringLiteral 0x559af0e56968 <col:14> 'char [26]' lvalue "Initializing matrices...\n"
|   |   | | | `-<<<NULL>>>
|   |   | | |-OMPForDirective 0x559af0e5a3b0 <line:23:13, col:45>
|   |   | | | |-OMPScheduleClause 0x559af0e56b50 <col:21, col:44>
|   |   | | | | `-ImplicitCastExpr 0x559af0e56b38 <col:39> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e56a88 <col:39> 'int' lvalue Var 0x559af0e54108 'chunk' 'int'
|   |   | | | |-CapturedStmt 0x559af0e58ee8 <line:24:5, line:26:21>
|   |   | | | | |-CapturedDecl 0x559af0e56c88 <<invalid sloc>> <invalid sloc>
|   |   | | | | | |-ForStmt 0x559af0e58eb0 <line:24:5, line:26:21>
|   |   | | | | | | |-BinaryOperator 0x559af0e56ec0 <line:24:10, col:14> 'int' '='
|   |   | | | | | | | |-DeclRefExpr 0x559af0e56d68 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | | | | |-<<<NULL>>>
|   |   | | | | | | |-BinaryOperator 0x559af0e56f48 <col:17, col:21> 'int' '<'
|   |   | | | | | | | |-ImplicitCastExpr 0x559af0e56f30 <col:17> 'int' <LValueToRValue>
|   |   | | | | | | | | `-DeclRefExpr 0x559af0e56ee8 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | | `-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | | | | | |-UnaryOperator 0x559af0e56f98 <col:24, col:25> 'int' postfix '++'
|   |   | | | | | | | `-DeclRefExpr 0x559af0e56f70 <col:24> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | `-ForStmt 0x559af0e58e78 <line:25:7, line:26:21>
|   |   | | | | | |   |-BinaryOperator 0x559af0e58988 <line:25:12, col:16> 'int' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559af0e56fb8 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e58968 <col:16> 'int' 0
|   |   | | | | | |   |-<<<NULL>>>
|   |   | | | | | |   |-BinaryOperator 0x559af0e58a10 <col:19, col:23> 'int' '<'
|   |   | | | | | |   | |-ImplicitCastExpr 0x559af0e589f8 <col:19> 'int' <LValueToRValue>
|   |   | | | | | |   | | `-DeclRefExpr 0x559af0e589b0 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e589d8 <col:23> 'int' 10
|   |   | | | | | |   |-UnaryOperator 0x559af0e58a60 <col:27, col:28> 'int' postfix '++'
|   |   | | | | | |   | `-DeclRefExpr 0x559af0e58a38 <col:27> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   `-BinaryOperator 0x559af0e58e50 <line:26:7, col:21> 'double' '='
|   |   | | | | | |     |-ArraySubscriptExpr 0x559af0e58d68 <col:7, col:13> 'double' lvalue
|   |   | | | | | |     | |-ImplicitCastExpr 0x559af0e58d38 <col:7, col:10> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |     | | `-ArraySubscriptExpr 0x559af0e58cb8 <col:7, col:10> 'double [10]' lvalue
|   |   | | | | | |     | |   |-ImplicitCastExpr 0x559af0e58c88 <col:7> 'double (*)[10]' <ArrayToPointerDecay>
|   |   | | | | | |     | |   | `-DeclRefExpr 0x559af0e58aa8 <col:7> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   |   | | | | | |     | |   `-ImplicitCastExpr 0x559af0e58ca0 <col:9> 'int' <LValueToRValue>
|   |   | | | | | |     | |     `-DeclRefExpr 0x559af0e58c30 <col:9> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | |     | `-ImplicitCastExpr 0x559af0e58d50 <col:12> 'int' <LValueToRValue>
|   |   | | | | | |     |   `-DeclRefExpr 0x559af0e58ce0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |     `-ImplicitCastExpr 0x559af0e58e38 <col:17, col:21> 'double' <IntegralToFloating>
|   |   | | | | | |       `-BinaryOperator 0x559af0e58e10 <col:17, col:21> 'int' '+'
|   |   | | | | | |         |-ImplicitCastExpr 0x559af0e58de0 <col:17> 'int' <LValueToRValue>
|   |   | | | | | |         | `-DeclRefExpr 0x559af0e58d90 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | |         `-ImplicitCastExpr 0x559af0e58df8 <col:21> 'int' <LValueToRValue>
|   |   | | | | | |           `-DeclRefExpr 0x559af0e58db8 <col:21> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | `-ImplicitParamDecl 0x559af0e56d08 <line:23:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:23:13) *'
|   |   | | | | |-DeclRefExpr 0x559af0e56e78 <line:24:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | |-DeclRefExpr 0x559af0e58940 <line:25:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | `-DeclRefExpr 0x559af0e58c08 <line:26:7> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   |   | | | |-DeclRefExpr 0x559af0e595c0 <line:24:10> 'int' lvalue Var 0x559af0e59560 '.omp.iv' 'int'
|   |   | | | |-BinaryOperator 0x559af0e59190 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | | |-BinaryOperator 0x559af0e59068 <col:5, col:24> 'int' '/'
|   |   | | | | | |-ParenExpr 0x559af0e59048 <col:5> 'int'
|   |   | | | | | | `-BinaryOperator 0x559af0e59020 <col:21, col:24> 'int' '+'
|   |   | | | | | |   |-BinaryOperator 0x559af0e58ff8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | | | |   | |-BinaryOperator 0x559af0e58fb0 <col:21, col:14> 'int' '-'
|   |   | | | | | |   | | |-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | | | | |   | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e58fd8 <<invalid sloc>> 'int' 1
|   |   | | | | | |   `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | | | `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | | `-IntegerLiteral 0x559af0e59170 <<invalid sloc>> 'int' 1
|   |   | | | |-<<<NULL>>>
|   |   | | | |-ImplicitCastExpr 0x559af0e58f98 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | | | | `-BinaryOperator 0x559af0e58f70 <col:14, col:21> 'int' '<'
|   |   | | | |   |-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | |   `-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | | |-BinaryOperator 0x559af0e59658 <col:10> 'int' '<='
|   |   | | | | |-ImplicitCastExpr 0x559af0e59628 <col:10> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559af0e595c0 <col:10> 'int' lvalue Var 0x559af0e59560 '.omp.iv' 'int'
|   |   | | | | `-ImplicitCastExpr 0x559af0e59640 <col:10> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e592f0 <col:10> 'int' lvalue Var 0x559af0e59290 '.omp.ub' 'int'
|   |   | | | |-BinaryOperator 0x559af0e59600 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e595c0 <col:10> 'int' lvalue Var 0x559af0e59560 '.omp.iv' 'int'
|   |   | | | | `-ImplicitCastExpr 0x559af0e595e8 <col:10> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e59230 <col:10> 'int' lvalue Var 0x559af0e591d0 '.omp.lb' 'int'
|   |   | | | |-BinaryOperator 0x559af0e596e0 <col:10, <invalid sloc>> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e595c0 <col:10> 'int' lvalue Var 0x559af0e59560 '.omp.iv' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e596b8 <col:10, <invalid sloc>> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e596a0 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e595c0 <col:10> 'int' lvalue Var 0x559af0e59560 '.omp.iv' 'int'
|   |   | | | |   `-IntegerLiteral 0x559af0e59680 <<invalid sloc>> 'int' 1
|   |   | | | |-<<<NULL>>>
|   |   | | | |-DeclRefExpr 0x559af0e59390 <col:10> 'int' lvalue Var 0x559af0e59330 '.omp.is_last' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e59230 <col:10> 'int' lvalue Var 0x559af0e591d0 '.omp.lb' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e592f0 <col:10> 'int' lvalue Var 0x559af0e59290 '.omp.ub' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e59450 <col:10> 'int' lvalue Var 0x559af0e593f0 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e59520 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e592f0 <col:10> 'int' lvalue Var 0x559af0e59290 '.omp.ub' 'int'
|   |   | | | | `-ConditionalOperator 0x559af0e594f0 <col:10> 'int'
|   |   | | | |   |-BinaryOperator 0x559af0e594b0 <col:10, <invalid sloc>> 'int' '>'
|   |   | | | |   | |-ImplicitCastExpr 0x559af0e59498 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | | `-DeclRefExpr 0x559af0e592f0 <col:10> 'int' lvalue Var 0x559af0e59290 '.omp.ub' 'int'
|   |   | | | |   | `-BinaryOperator 0x559af0e59190 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | |   |   |-BinaryOperator 0x559af0e59068 <col:5, col:24> 'int' '/'
|   |   | | | |   |   | |-ParenExpr 0x559af0e59048 <col:5> 'int'
|   |   | | | |   |   | | `-BinaryOperator 0x559af0e59020 <col:21, col:24> 'int' '+'
|   |   | | | |   |   | |   |-BinaryOperator 0x559af0e58ff8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | |   |   | |   | |-BinaryOperator 0x559af0e58fb0 <col:21, col:14> 'int' '-'
|   |   | | | |   |   | |   | | |-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | | |   |   | |   | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | |   |   | |   | `-IntegerLiteral 0x559af0e58fd8 <<invalid sloc>> 'int' 1
|   |   | | | |   |   | |   `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | |   |   | `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | |   |   `-IntegerLiteral 0x559af0e59170 <<invalid sloc>> 'int' 1
|   |   | | | |   |-BinaryOperator 0x559af0e59190 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | |   | |-BinaryOperator 0x559af0e59068 <col:5, col:24> 'int' '/'
|   |   | | | |   | | |-ParenExpr 0x559af0e59048 <col:5> 'int'
|   |   | | | |   | | | `-BinaryOperator 0x559af0e59020 <col:21, col:24> 'int' '+'
|   |   | | | |   | | |   |-BinaryOperator 0x559af0e58ff8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | |   | | |   | |-BinaryOperator 0x559af0e58fb0 <col:21, col:14> 'int' '-'
|   |   | | | |   | | |   | | |-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | | |   | | |   | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | |   | | |   | `-IntegerLiteral 0x559af0e58fd8 <<invalid sloc>> 'int' 1
|   |   | | | |   | | |   `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | |   | | `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | |   | `-IntegerLiteral 0x559af0e59170 <<invalid sloc>> 'int' 1
|   |   | | | |   `-ImplicitCastExpr 0x559af0e594d8 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e592f0 <col:10> 'int' lvalue Var 0x559af0e59290 '.omp.ub' 'int'
|   |   | | | |-BinaryOperator 0x559af0e59760 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e59230 <col:10> 'int' lvalue Var 0x559af0e591d0 '.omp.lb' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e59738 <col:10> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e59708 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e59230 <col:10> 'int' lvalue Var 0x559af0e591d0 '.omp.lb' 'int'
|   |   | | | |   `-ImplicitCastExpr 0x559af0e59720 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e59450 <col:10> 'int' lvalue Var 0x559af0e593f0 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e597e0 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e592f0 <col:10> 'int' lvalue Var 0x559af0e59290 '.omp.ub' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e597b8 <col:10> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e59788 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e592f0 <col:10> 'int' lvalue Var 0x559af0e59290 '.omp.ub' 'int'
|   |   | | | |   `-ImplicitCastExpr 0x559af0e597a0 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e59450 <col:10> 'int' lvalue Var 0x559af0e593f0 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e59068 <col:5, col:24> 'int' '/'
|   |   | | | | |-ParenExpr 0x559af0e59048 <col:5> 'int'
|   |   | | | | | `-BinaryOperator 0x559af0e59020 <col:21, col:24> 'int' '+'
|   |   | | | | |   |-BinaryOperator 0x559af0e58ff8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | | |   | |-BinaryOperator 0x559af0e58fb0 <col:21, col:14> 'int' '-'
|   |   | | | | |   | | |-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | | | |   | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | | |   | `-IntegerLiteral 0x559af0e58fd8 <<invalid sloc>> 'int' 1
|   |   | | | | |   `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | | `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | |-DeclRefExpr 0x559af0e59090 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e59130 <col:5> 'int' lvalue Var 0x559af0e590d0 'i' 'int'
|   |   | | | |-BinaryOperator 0x559af0e59830 <col:5, col:14> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e59808 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | |-BinaryOperator 0x559af0e5a2d8 <col:5, col:24> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e59808 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5a2b0 <col:14, col:24> 'int' '+'
|   |   | | | |   |-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | |   `-BinaryOperator 0x559af0e5a288 <col:24> 'int' '*'
|   |   | | | |     |-ImplicitCastExpr 0x559af0e5a270 <col:24> 'int' <LValueToRValue>
|   |   | | | |     | `-ParenExpr 0x559af0e5a250 <col:24> 'int' lvalue
|   |   | | | |     |   `-DeclRefExpr 0x559af0e595c0 <col:10> 'int' lvalue Var 0x559af0e59560 '.omp.iv' 'int'
|   |   | | | |     `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | | `-BinaryOperator 0x559af0e5a370 <col:5, col:24> 'int' '='
|   |   | | |   |-DeclRefExpr 0x559af0e59808 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |   `-BinaryOperator 0x559af0e5a348 <col:14, col:24> 'int' '+'
|   |   | | |     |-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | |     `-BinaryOperator 0x559af0e5a320 <col:24> 'int' '*'
|   |   | | |       |-ParenExpr 0x559af0e5a300 <col:24> 'int'
|   |   | | |       | `-BinaryOperator 0x559af0e59068 <col:5, col:24> 'int' '/'
|   |   | | |       |   |-ParenExpr 0x559af0e59048 <col:5> 'int'
|   |   | | |       |   | `-BinaryOperator 0x559af0e59020 <col:21, col:24> 'int' '+'
|   |   | | |       |   |   |-BinaryOperator 0x559af0e58ff8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | |       |   |   | |-BinaryOperator 0x559af0e58fb0 <col:21, col:14> 'int' '-'
|   |   | | |       |   |   | | |-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | |       |   |   | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | |       |   |   | `-IntegerLiteral 0x559af0e58fd8 <<invalid sloc>> 'int' 1
|   |   | | |       |   |   `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | |       |   `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | |       `-IntegerLiteral 0x559af0e58f50 <col:24> 'int' 1
|   |   | | |-OMPForDirective 0x559af0e5c1b0 <line:29:13, col:45>
|   |   | | | |-OMPScheduleClause 0x559af0e5a4d0 <col:21, col:44>
|   |   | | | | `-ImplicitCastExpr 0x559af0e5a4b8 <col:39> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e5a490 <col:39> 'int' lvalue Var 0x559af0e54108 'chunk' 'int'
|   |   | | | |-CapturedStmt 0x559af0e5aeb8 <line:30:5, line:32:21>
|   |   | | | | |-CapturedDecl 0x559af0e5a608 <<invalid sloc>> <invalid sloc>
|   |   | | | | | |-ForStmt 0x559af0e5ae80 <line:30:5, line:32:21>
|   |   | | | | | | |-BinaryOperator 0x559af0e5a7b8 <line:30:10, col:14> 'int' '='
|   |   | | | | | | | |-DeclRefExpr 0x559af0e5a6e8 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | | | | |-<<<NULL>>>
|   |   | | | | | | |-BinaryOperator 0x559af0e5a840 <col:17, col:21> 'int' '<'
|   |   | | | | | | | |-ImplicitCastExpr 0x559af0e5a828 <col:17> 'int' <LValueToRValue>
|   |   | | | | | | | | `-DeclRefExpr 0x559af0e5a7e0 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | | `-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | | | | | |-UnaryOperator 0x559af0e5a890 <col:25, col:26> 'int' postfix '++'
|   |   | | | | | | | `-DeclRefExpr 0x559af0e5a868 <col:25> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | `-ForStmt 0x559af0e5ae48 <line:31:7, line:32:21>
|   |   | | | | | |   |-BinaryOperator 0x559af0e5a980 <line:31:12, col:16> 'int' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559af0e5a8b0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e5a960 <col:16> 'int' 0
|   |   | | | | | |   |-<<<NULL>>>
|   |   | | | | | |   |-BinaryOperator 0x559af0e5aa08 <col:19, col:23> 'int' '<'
|   |   | | | | | |   | |-ImplicitCastExpr 0x559af0e5a9f0 <col:19> 'int' <LValueToRValue>
|   |   | | | | | |   | | `-DeclRefExpr 0x559af0e5a9a8 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e5a9d0 <col:23> 'int' 5
|   |   | | | | | |   |-UnaryOperator 0x559af0e5aa58 <col:26, col:27> 'int' postfix '++'
|   |   | | | | | |   | `-DeclRefExpr 0x559af0e5aa30 <col:26> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   `-BinaryOperator 0x559af0e5ae20 <line:32:7, col:21> 'double' '='
|   |   | | | | | |     |-ArraySubscriptExpr 0x559af0e5ad38 <col:7, col:13> 'double' lvalue
|   |   | | | | | |     | |-ImplicitCastExpr 0x559af0e5ad08 <col:7, col:10> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |     | | `-ArraySubscriptExpr 0x559af0e5acb8 <col:7, col:10> 'double [5]' lvalue
|   |   | | | | | |     | |   |-ImplicitCastExpr 0x559af0e5ac88 <col:7> 'double (*)[5]' <ArrayToPointerDecay>
|   |   | | | | | |     | |   | `-DeclRefExpr 0x559af0e5aaa8 <col:7> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   |   | | | | | |     | |   `-ImplicitCastExpr 0x559af0e5aca0 <col:9> 'int' <LValueToRValue>
|   |   | | | | | |     | |     `-DeclRefExpr 0x559af0e5ac30 <col:9> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | |     | `-ImplicitCastExpr 0x559af0e5ad20 <col:12> 'int' <LValueToRValue>
|   |   | | | | | |     |   `-DeclRefExpr 0x559af0e5ace0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |     `-ImplicitCastExpr 0x559af0e5ae08 <col:17, col:21> 'double' <IntegralToFloating>
|   |   | | | | | |       `-BinaryOperator 0x559af0e5ade0 <col:17, col:21> 'int' '*'
|   |   | | | | | |         |-ImplicitCastExpr 0x559af0e5adb0 <col:17> 'int' <LValueToRValue>
|   |   | | | | | |         | `-DeclRefExpr 0x559af0e5ad60 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | |         `-ImplicitCastExpr 0x559af0e5adc8 <col:21> 'int' <LValueToRValue>
|   |   | | | | | |           `-DeclRefExpr 0x559af0e5ad88 <col:21> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | `-ImplicitParamDecl 0x559af0e5a688 <line:29:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:29:13) *'
|   |   | | | | |-DeclRefExpr 0x559af0e5a770 <line:30:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | |-DeclRefExpr 0x559af0e5a938 <line:31:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | `-DeclRefExpr 0x559af0e5ac08 <line:32:7> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   |   | | | |-DeclRefExpr 0x559af0e5bdb8 <line:30:10> 'int' lvalue Var 0x559af0e5bd58 '.omp.iv' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5b160 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | | |-BinaryOperator 0x559af0e5b038 <col:5, col:25> 'int' '/'
|   |   | | | | | |-ParenExpr 0x559af0e5b018 <col:5> 'int'
|   |   | | | | | | `-BinaryOperator 0x559af0e5aff0 <col:21, col:25> 'int' '+'
|   |   | | | | | |   |-BinaryOperator 0x559af0e5afc8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | | | |   | |-BinaryOperator 0x559af0e5af80 <col:21, col:14> 'int' '-'
|   |   | | | | | |   | | |-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | | | | |   | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e5afa8 <<invalid sloc>> 'int' 1
|   |   | | | | | |   `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | | | `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | | `-IntegerLiteral 0x559af0e5b140 <<invalid sloc>> 'int' 1
|   |   | | | |-<<<NULL>>>
|   |   | | | |-ImplicitCastExpr 0x559af0e5af68 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | | | | `-BinaryOperator 0x559af0e5af40 <col:14, col:21> 'int' '<'
|   |   | | | |   |-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | |   `-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | | |-BinaryOperator 0x559af0e5be50 <col:10> 'int' '<='
|   |   | | | | |-ImplicitCastExpr 0x559af0e5be20 <col:10> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559af0e5bdb8 <col:10> 'int' lvalue Var 0x559af0e5bd58 '.omp.iv' 'int'
|   |   | | | | `-ImplicitCastExpr 0x559af0e5be38 <col:10> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e5bae8 <col:10> 'int' lvalue Var 0x559af0e5ba88 '.omp.ub' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5bdf8 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5bdb8 <col:10> 'int' lvalue Var 0x559af0e5bd58 '.omp.iv' 'int'
|   |   | | | | `-ImplicitCastExpr 0x559af0e5bde0 <col:10> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e5b200 <col:10> 'int' lvalue Var 0x559af0e5b1a0 '.omp.lb' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5bed8 <col:10, <invalid sloc>> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5bdb8 <col:10> 'int' lvalue Var 0x559af0e5bd58 '.omp.iv' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5beb0 <col:10, <invalid sloc>> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e5be98 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e5bdb8 <col:10> 'int' lvalue Var 0x559af0e5bd58 '.omp.iv' 'int'
|   |   | | | |   `-IntegerLiteral 0x559af0e5be78 <<invalid sloc>> 'int' 1
|   |   | | | |-<<<NULL>>>
|   |   | | | |-DeclRefExpr 0x559af0e5bb88 <col:10> 'int' lvalue Var 0x559af0e5bb28 '.omp.is_last' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5b200 <col:10> 'int' lvalue Var 0x559af0e5b1a0 '.omp.lb' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5bae8 <col:10> 'int' lvalue Var 0x559af0e5ba88 '.omp.ub' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5bc48 <col:10> 'int' lvalue Var 0x559af0e5bbe8 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5bd18 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5bae8 <col:10> 'int' lvalue Var 0x559af0e5ba88 '.omp.ub' 'int'
|   |   | | | | `-ConditionalOperator 0x559af0e5bce8 <col:10> 'int'
|   |   | | | |   |-BinaryOperator 0x559af0e5bca8 <col:10, <invalid sloc>> 'int' '>'
|   |   | | | |   | |-ImplicitCastExpr 0x559af0e5bc90 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | | `-DeclRefExpr 0x559af0e5bae8 <col:10> 'int' lvalue Var 0x559af0e5ba88 '.omp.ub' 'int'
|   |   | | | |   | `-BinaryOperator 0x559af0e5b160 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | |   |   |-BinaryOperator 0x559af0e5b038 <col:5, col:25> 'int' '/'
|   |   | | | |   |   | |-ParenExpr 0x559af0e5b018 <col:5> 'int'
|   |   | | | |   |   | | `-BinaryOperator 0x559af0e5aff0 <col:21, col:25> 'int' '+'
|   |   | | | |   |   | |   |-BinaryOperator 0x559af0e5afc8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | |   |   | |   | |-BinaryOperator 0x559af0e5af80 <col:21, col:14> 'int' '-'
|   |   | | | |   |   | |   | | |-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | | |   |   | |   | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | |   |   | |   | `-IntegerLiteral 0x559af0e5afa8 <<invalid sloc>> 'int' 1
|   |   | | | |   |   | |   `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | |   |   | `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | |   |   `-IntegerLiteral 0x559af0e5b140 <<invalid sloc>> 'int' 1
|   |   | | | |   |-BinaryOperator 0x559af0e5b160 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | |   | |-BinaryOperator 0x559af0e5b038 <col:5, col:25> 'int' '/'
|   |   | | | |   | | |-ParenExpr 0x559af0e5b018 <col:5> 'int'
|   |   | | | |   | | | `-BinaryOperator 0x559af0e5aff0 <col:21, col:25> 'int' '+'
|   |   | | | |   | | |   |-BinaryOperator 0x559af0e5afc8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | |   | | |   | |-BinaryOperator 0x559af0e5af80 <col:21, col:14> 'int' '-'
|   |   | | | |   | | |   | | |-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | | |   | | |   | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | |   | | |   | `-IntegerLiteral 0x559af0e5afa8 <<invalid sloc>> 'int' 1
|   |   | | | |   | | |   `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | |   | | `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | |   | `-IntegerLiteral 0x559af0e5b140 <<invalid sloc>> 'int' 1
|   |   | | | |   `-ImplicitCastExpr 0x559af0e5bcd0 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e5bae8 <col:10> 'int' lvalue Var 0x559af0e5ba88 '.omp.ub' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5bf58 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5b200 <col:10> 'int' lvalue Var 0x559af0e5b1a0 '.omp.lb' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5bf30 <col:10> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e5bf00 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e5b200 <col:10> 'int' lvalue Var 0x559af0e5b1a0 '.omp.lb' 'int'
|   |   | | | |   `-ImplicitCastExpr 0x559af0e5bf18 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e5bc48 <col:10> 'int' lvalue Var 0x559af0e5bbe8 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5bfd8 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5bae8 <col:10> 'int' lvalue Var 0x559af0e5ba88 '.omp.ub' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5bfb0 <col:10> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e5bf80 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e5bae8 <col:10> 'int' lvalue Var 0x559af0e5ba88 '.omp.ub' 'int'
|   |   | | | |   `-ImplicitCastExpr 0x559af0e5bf98 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e5bc48 <col:10> 'int' lvalue Var 0x559af0e5bbe8 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5b038 <col:5, col:25> 'int' '/'
|   |   | | | | |-ParenExpr 0x559af0e5b018 <col:5> 'int'
|   |   | | | | | `-BinaryOperator 0x559af0e5aff0 <col:21, col:25> 'int' '+'
|   |   | | | | |   |-BinaryOperator 0x559af0e5afc8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | | |   | |-BinaryOperator 0x559af0e5af80 <col:21, col:14> 'int' '-'
|   |   | | | | |   | | |-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | | | |   | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | | |   | `-IntegerLiteral 0x559af0e5afa8 <<invalid sloc>> 'int' 1
|   |   | | | | |   `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | | `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | |-DeclRefExpr 0x559af0e5b060 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5b100 <col:5> 'int' lvalue Var 0x559af0e5b0a0 'i' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5c028 <col:5, col:14> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5c000 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | |-BinaryOperator 0x559af0e5c0d8 <col:5, col:25> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5c000 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5c0b0 <col:14, col:25> 'int' '+'
|   |   | | | |   |-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | |   `-BinaryOperator 0x559af0e5c088 <col:25> 'int' '*'
|   |   | | | |     |-ImplicitCastExpr 0x559af0e5c070 <col:25> 'int' <LValueToRValue>
|   |   | | | |     | `-ParenExpr 0x559af0e5c050 <col:25> 'int' lvalue
|   |   | | | |     |   `-DeclRefExpr 0x559af0e5bdb8 <col:10> 'int' lvalue Var 0x559af0e5bd58 '.omp.iv' 'int'
|   |   | | | |     `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | | `-BinaryOperator 0x559af0e5c170 <col:5, col:25> 'int' '='
|   |   | | |   |-DeclRefExpr 0x559af0e5c000 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |   `-BinaryOperator 0x559af0e5c148 <col:14, col:25> 'int' '+'
|   |   | | |     |-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | |     `-BinaryOperator 0x559af0e5c120 <col:25> 'int' '*'
|   |   | | |       |-ParenExpr 0x559af0e5c100 <col:25> 'int'
|   |   | | |       | `-BinaryOperator 0x559af0e5b038 <col:5, col:25> 'int' '/'
|   |   | | |       |   |-ParenExpr 0x559af0e5b018 <col:5> 'int'
|   |   | | |       |   | `-BinaryOperator 0x559af0e5aff0 <col:21, col:25> 'int' '+'
|   |   | | |       |   |   |-BinaryOperator 0x559af0e5afc8 <col:21, <invalid sloc>> 'int' '-'
|   |   | | |       |   |   | |-BinaryOperator 0x559af0e5af80 <col:21, col:14> 'int' '-'
|   |   | | |       |   |   | | |-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | |       |   |   | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | |       |   |   | `-IntegerLiteral 0x559af0e5afa8 <<invalid sloc>> 'int' 1
|   |   | | |       |   |   `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | |       |   `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | |       `-IntegerLiteral 0x559af0e5af20 <col:25> 'int' 1
|   |   | | |-OMPForDirective 0x559af0e5d6e0 <line:35:13, col:45>
|   |   | | | |-OMPScheduleClause 0x559af0e5c2d0 <col:21, col:44>
|   |   | | | | `-ImplicitCastExpr 0x559af0e5c2b8 <col:39> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e5c290 <col:39> 'int' lvalue Var 0x559af0e54108 'chunk' 'int'
|   |   | | | |-CapturedStmt 0x559af0e5cc10 <line:36:5, line:38:17>
|   |   | | | | |-CapturedDecl 0x559af0e5c408 <<invalid sloc>> <invalid sloc>
|   |   | | | | | |-ForStmt 0x559af0e5cbd8 <line:36:5, line:38:17>
|   |   | | | | | | |-BinaryOperator 0x559af0e5c5b8 <line:36:10, col:14> 'int' '='
|   |   | | | | | | | |-DeclRefExpr 0x559af0e5c4e8 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | | | | |-<<<NULL>>>
|   |   | | | | | | |-BinaryOperator 0x559af0e5c640 <col:17, col:21> 'int' '<'
|   |   | | | | | | | |-ImplicitCastExpr 0x559af0e5c628 <col:17> 'int' <LValueToRValue>
|   |   | | | | | | | | `-DeclRefExpr 0x559af0e5c5e0 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | | `-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | | | | | |-UnaryOperator 0x559af0e5c690 <col:24, col:25> 'int' postfix '++'
|   |   | | | | | | | `-DeclRefExpr 0x559af0e5c668 <col:24> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | | `-ForStmt 0x559af0e5cba0 <line:37:7, line:38:17>
|   |   | | | | | |   |-BinaryOperator 0x559af0e5c780 <line:37:12, col:16> 'int' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559af0e5c6b0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e5c760 <col:16> 'int' 0
|   |   | | | | | |   |-<<<NULL>>>
|   |   | | | | | |   |-BinaryOperator 0x559af0e5c808 <col:19, col:23> 'int' '<'
|   |   | | | | | |   | |-ImplicitCastExpr 0x559af0e5c7f0 <col:19> 'int' <LValueToRValue>
|   |   | | | | | |   | | `-DeclRefExpr 0x559af0e5c7a8 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e5c7d0 <col:23> 'int' 5
|   |   | | | | | |   |-UnaryOperator 0x559af0e5c858 <col:26, col:27> 'int' postfix '++'
|   |   | | | | | |   | `-DeclRefExpr 0x559af0e5c830 <col:26> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |   `-BinaryOperator 0x559af0e5cb78 <line:38:7, col:17> 'double' '='
|   |   | | | | | |     |-ArraySubscriptExpr 0x559af0e5cb18 <col:7, col:13> 'double' lvalue
|   |   | | | | | |     | |-ImplicitCastExpr 0x559af0e5cae8 <col:7, col:10> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |     | | `-ArraySubscriptExpr 0x559af0e5ca98 <col:7, col:10> 'double [5]' lvalue
|   |   | | | | | |     | |   |-ImplicitCastExpr 0x559af0e5ca58 <col:7> 'double (*)[5]' <ArrayToPointerDecay>
|   |   | | | | | |     | |   | `-DeclRefExpr 0x559af0e5c8a8 <col:7> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   | | | | | |     | |   `-ImplicitCastExpr 0x559af0e5ca80 <col:9> 'int' <LValueToRValue>
|   |   | | | | | |     | |     `-DeclRefExpr 0x559af0e5ca30 <col:9> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | | |     | `-ImplicitCastExpr 0x559af0e5cb00 <col:12> 'int' <LValueToRValue>
|   |   | | | | | |     |   `-DeclRefExpr 0x559af0e5cac0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | | |     `-ImplicitCastExpr 0x559af0e5cb60 <col:17> 'double' <IntegralToFloating>
|   |   | | | | | |       `-IntegerLiteral 0x559af0e5cb40 <col:17> 'int' 0
|   |   | | | | | `-ImplicitParamDecl 0x559af0e5c488 <line:35:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:35:13) *'
|   |   | | | | |-DeclRefExpr 0x559af0e5c570 <line:36:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | |-DeclRefExpr 0x559af0e5c738 <line:37:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | | | `-DeclRefExpr 0x559af0e5ca08 <line:38:7> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   | | | |-DeclRefExpr 0x559af0e5d2e8 <line:36:10> 'int' lvalue Var 0x559af0e5d288 '.omp.iv' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5ceb8 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | | |-BinaryOperator 0x559af0e5cd90 <col:5, col:24> 'int' '/'
|   |   | | | | | |-ParenExpr 0x559af0e5cd70 <col:5> 'int'
|   |   | | | | | | `-BinaryOperator 0x559af0e5cd48 <col:21, col:24> 'int' '+'
|   |   | | | | | |   |-BinaryOperator 0x559af0e5cd20 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | | | |   | |-BinaryOperator 0x559af0e5ccd8 <col:21, col:14> 'int' '-'
|   |   | | | | | |   | | |-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | | | | |   | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | | | |   | `-IntegerLiteral 0x559af0e5cd00 <<invalid sloc>> 'int' 1
|   |   | | | | | |   `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | | | `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | | `-IntegerLiteral 0x559af0e5ce98 <<invalid sloc>> 'int' 1
|   |   | | | |-<<<NULL>>>
|   |   | | | |-ImplicitCastExpr 0x559af0e5ccc0 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | | | | `-BinaryOperator 0x559af0e5cc98 <col:14, col:21> 'int' '<'
|   |   | | | |   |-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | |   `-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | | |-BinaryOperator 0x559af0e5d380 <col:10> 'int' '<='
|   |   | | | | |-ImplicitCastExpr 0x559af0e5d350 <col:10> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559af0e5d2e8 <col:10> 'int' lvalue Var 0x559af0e5d288 '.omp.iv' 'int'
|   |   | | | | `-ImplicitCastExpr 0x559af0e5d368 <col:10> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e5d018 <col:10> 'int' lvalue Var 0x559af0e5cfb8 '.omp.ub' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5d328 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5d2e8 <col:10> 'int' lvalue Var 0x559af0e5d288 '.omp.iv' 'int'
|   |   | | | | `-ImplicitCastExpr 0x559af0e5d310 <col:10> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559af0e5cf58 <col:10> 'int' lvalue Var 0x559af0e5cef8 '.omp.lb' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5d408 <col:10, <invalid sloc>> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5d2e8 <col:10> 'int' lvalue Var 0x559af0e5d288 '.omp.iv' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5d3e0 <col:10, <invalid sloc>> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e5d3c8 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e5d2e8 <col:10> 'int' lvalue Var 0x559af0e5d288 '.omp.iv' 'int'
|   |   | | | |   `-IntegerLiteral 0x559af0e5d3a8 <<invalid sloc>> 'int' 1
|   |   | | | |-<<<NULL>>>
|   |   | | | |-DeclRefExpr 0x559af0e5d0b8 <col:10> 'int' lvalue Var 0x559af0e5d058 '.omp.is_last' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5cf58 <col:10> 'int' lvalue Var 0x559af0e5cef8 '.omp.lb' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5d018 <col:10> 'int' lvalue Var 0x559af0e5cfb8 '.omp.ub' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5d178 <col:10> 'int' lvalue Var 0x559af0e5d118 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5d248 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5d018 <col:10> 'int' lvalue Var 0x559af0e5cfb8 '.omp.ub' 'int'
|   |   | | | | `-ConditionalOperator 0x559af0e5d218 <col:10> 'int'
|   |   | | | |   |-BinaryOperator 0x559af0e5d1d8 <col:10, <invalid sloc>> 'int' '>'
|   |   | | | |   | |-ImplicitCastExpr 0x559af0e5d1c0 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | | `-DeclRefExpr 0x559af0e5d018 <col:10> 'int' lvalue Var 0x559af0e5cfb8 '.omp.ub' 'int'
|   |   | | | |   | `-BinaryOperator 0x559af0e5ceb8 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | |   |   |-BinaryOperator 0x559af0e5cd90 <col:5, col:24> 'int' '/'
|   |   | | | |   |   | |-ParenExpr 0x559af0e5cd70 <col:5> 'int'
|   |   | | | |   |   | | `-BinaryOperator 0x559af0e5cd48 <col:21, col:24> 'int' '+'
|   |   | | | |   |   | |   |-BinaryOperator 0x559af0e5cd20 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | |   |   | |   | |-BinaryOperator 0x559af0e5ccd8 <col:21, col:14> 'int' '-'
|   |   | | | |   |   | |   | | |-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | | |   |   | |   | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | |   |   | |   | `-IntegerLiteral 0x559af0e5cd00 <<invalid sloc>> 'int' 1
|   |   | | | |   |   | |   `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | |   |   | `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | |   |   `-IntegerLiteral 0x559af0e5ce98 <<invalid sloc>> 'int' 1
|   |   | | | |   |-BinaryOperator 0x559af0e5ceb8 <col:5, <invalid sloc>> 'int' '-'
|   |   | | | |   | |-BinaryOperator 0x559af0e5cd90 <col:5, col:24> 'int' '/'
|   |   | | | |   | | |-ParenExpr 0x559af0e5cd70 <col:5> 'int'
|   |   | | | |   | | | `-BinaryOperator 0x559af0e5cd48 <col:21, col:24> 'int' '+'
|   |   | | | |   | | |   |-BinaryOperator 0x559af0e5cd20 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | |   | | |   | |-BinaryOperator 0x559af0e5ccd8 <col:21, col:14> 'int' '-'
|   |   | | | |   | | |   | | |-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | | |   | | |   | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | |   | | |   | `-IntegerLiteral 0x559af0e5cd00 <<invalid sloc>> 'int' 1
|   |   | | | |   | | |   `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | |   | | `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | |   | `-IntegerLiteral 0x559af0e5ce98 <<invalid sloc>> 'int' 1
|   |   | | | |   `-ImplicitCastExpr 0x559af0e5d200 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e5d018 <col:10> 'int' lvalue Var 0x559af0e5cfb8 '.omp.ub' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5d488 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5cf58 <col:10> 'int' lvalue Var 0x559af0e5cef8 '.omp.lb' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5d460 <col:10> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e5d430 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e5cf58 <col:10> 'int' lvalue Var 0x559af0e5cef8 '.omp.lb' 'int'
|   |   | | | |   `-ImplicitCastExpr 0x559af0e5d448 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e5d178 <col:10> 'int' lvalue Var 0x559af0e5d118 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5d508 <col:10> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5d018 <col:10> 'int' lvalue Var 0x559af0e5cfb8 '.omp.ub' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5d4e0 <col:10> 'int' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559af0e5d4b0 <col:10> 'int' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559af0e5d018 <col:10> 'int' lvalue Var 0x559af0e5cfb8 '.omp.ub' 'int'
|   |   | | | |   `-ImplicitCastExpr 0x559af0e5d4c8 <col:10> 'int' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559af0e5d178 <col:10> 'int' lvalue Var 0x559af0e5d118 '.omp.stride' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5cd90 <col:5, col:24> 'int' '/'
|   |   | | | | |-ParenExpr 0x559af0e5cd70 <col:5> 'int'
|   |   | | | | | `-BinaryOperator 0x559af0e5cd48 <col:21, col:24> 'int' '+'
|   |   | | | | |   |-BinaryOperator 0x559af0e5cd20 <col:21, <invalid sloc>> 'int' '-'
|   |   | | | | |   | |-BinaryOperator 0x559af0e5ccd8 <col:21, col:14> 'int' '-'
|   |   | | | | |   | | |-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | | | |   | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | | |   | `-IntegerLiteral 0x559af0e5cd00 <<invalid sloc>> 'int' 1
|   |   | | | | |   `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | | `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | |-DeclRefExpr 0x559af0e5cdb8 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | |-DeclRefExpr 0x559af0e5ce58 <col:5> 'int' lvalue Var 0x559af0e5cdf8 'i' 'int'
|   |   | | | |-BinaryOperator 0x559af0e5d558 <col:5, col:14> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5d530 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | |-BinaryOperator 0x559af0e5d608 <col:5, col:24> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5d530 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-BinaryOperator 0x559af0e5d5e0 <col:14, col:24> 'int' '+'
|   |   | | | |   |-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | |   `-BinaryOperator 0x559af0e5d5b8 <col:24> 'int' '*'
|   |   | | | |     |-ImplicitCastExpr 0x559af0e5d5a0 <col:24> 'int' <LValueToRValue>
|   |   | | | |     | `-ParenExpr 0x559af0e5d580 <col:24> 'int' lvalue
|   |   | | | |     |   `-DeclRefExpr 0x559af0e5d2e8 <col:10> 'int' lvalue Var 0x559af0e5d288 '.omp.iv' 'int'
|   |   | | | |     `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | | `-BinaryOperator 0x559af0e5d6a0 <col:5, col:24> 'int' '='
|   |   | | |   |-DeclRefExpr 0x559af0e5d530 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |   `-BinaryOperator 0x559af0e5d678 <col:14, col:24> 'int' '+'
|   |   | | |     |-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | |     `-BinaryOperator 0x559af0e5d650 <col:24> 'int' '*'
|   |   | | |       |-ParenExpr 0x559af0e5d630 <col:24> 'int'
|   |   | | |       | `-BinaryOperator 0x559af0e5cd90 <col:5, col:24> 'int' '/'
|   |   | | |       |   |-ParenExpr 0x559af0e5cd70 <col:5> 'int'
|   |   | | |       |   | `-BinaryOperator 0x559af0e5cd48 <col:21, col:24> 'int' '+'
|   |   | | |       |   |   |-BinaryOperator 0x559af0e5cd20 <col:21, <invalid sloc>> 'int' '-'
|   |   | | |       |   |   | |-BinaryOperator 0x559af0e5ccd8 <col:21, col:14> 'int' '-'
|   |   | | |       |   |   | | |-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | |       |   |   | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | |       |   |   | `-IntegerLiteral 0x559af0e5cd00 <<invalid sloc>> 'int' 1
|   |   | | |       |   |   `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | |       |   `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | |       `-IntegerLiteral 0x559af0e5cc78 <col:24> 'int' 1
|   |   | | |-CallExpr 0x559af0e5d8b8 <line:41:5, col:58> 'int'
|   |   | | | |-ImplicitCastExpr 0x559af0e5d8a0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559af0e5d7c0 <col:5> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   |   | | | |-ImplicitCastExpr 0x559af0e5d908 <col:12> 'const char *' <BitCast>
|   |   | | | | `-ImplicitCastExpr 0x559af0e5d8f0 <col:12> 'char *' <ArrayToPointerDecay>
|   |   | | | |   `-StringLiteral 0x559af0e5d828 <col:12> 'char [39]' lvalue "Thread %d starting matrix multiply...\n"
|   |   | | | `-ImplicitCastExpr 0x559af0e5d920 <col:55> 'int' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x559af0e5d878 <col:55> 'int' lvalue Var 0x559af0e53e38 'tid' 'int'
|   |   | | `-OMPForDirective 0x559af0e5f608 <line:42:13, col:45>
|   |   | |   |-OMPScheduleClause 0x559af0e5d978 <col:21, col:44>
|   |   | |   | `-ImplicitCastExpr 0x559af0e5d960 <col:39> 'int' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x559af0e5d938 <col:39> 'int' lvalue Var 0x559af0e54108 'chunk' 'int'
|   |   | |   |-CapturedStmt 0x559af0e5ead8 <line:43:5, line:51:5>
|   |   | |   | |-CapturedDecl 0x559af0e5dac8 <<invalid sloc>> <invalid sloc>
|   |   | |   | | |-ForStmt 0x559af0e5eaa0 <line:43:5, line:51:5>
|   |   | |   | | | |-BinaryOperator 0x559af0e5dc78 <line:43:10, col:14> 'int' '='
|   |   | |   | | | | |-DeclRefExpr 0x559af0e5dba8 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | | | | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   | | | |-<<<NULL>>>
|   |   | |   | | | |-BinaryOperator 0x559af0e5dd00 <col:17, col:21> 'int' '<'
|   |   | |   | | | | |-ImplicitCastExpr 0x559af0e5dce8 <col:17> 'int' <LValueToRValue>
|   |   | |   | | | | | `-DeclRefExpr 0x559af0e5dca0 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | | | | `-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   | |   | | | |-UnaryOperator 0x559af0e5dd50 <col:24, col:25> 'int' postfix '++'
|   |   | |   | | | | `-DeclRefExpr 0x559af0e5dd28 <col:24> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | | | `-CompoundStmt 0x559af0e5ea48 <line:44:5, line:51:5>
|   |   | |   | | |   |-CallExpr 0x559af0e5df08 <line:45:7, col:46> 'int'
|   |   | |   | | |   | |-ImplicitCastExpr 0x559af0e5def0 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | |   | | |   | | `-DeclRefExpr 0x559af0e5dd70 <col:7> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   |   | |   | | |   | |-ImplicitCastExpr 0x559af0e5df60 <col:14> 'const char *' <BitCast>
|   |   | |   | | |   | | `-ImplicitCastExpr 0x559af0e5df48 <col:14> 'char *' <ArrayToPointerDecay>
|   |   | |   | | |   | |   `-StringLiteral 0x559af0e5ddd8 <col:14> 'char [22]' lvalue "Thread=%d did row=%d\n"
|   |   | |   | | |   | |-ImplicitCastExpr 0x559af0e5df78 <col:40> 'int' <LValueToRValue>
|   |   | |   | | |   | | `-DeclRefExpr 0x559af0e5de18 <col:40> 'int' lvalue Var 0x559af0e53e38 'tid' 'int'
|   |   | |   | | |   | `-ImplicitCastExpr 0x559af0e5df90 <col:45> 'int' <LValueToRValue>
|   |   | |   | | |   |   `-DeclRefExpr 0x559af0e5dec8 <col:45> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | | |   `-ForStmt 0x559af0e5ea10 <line:46:7, line:48:36>
|   |   | |   | | |     |-BinaryOperator 0x559af0e5e078 <line:46:12, col:16> 'int' '='
|   |   | |   | | |     | |-DeclRefExpr 0x559af0e5dfa8 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | |   | | |     | `-IntegerLiteral 0x559af0e5e058 <col:16> 'int' 0
|   |   | |   | | |     |-<<<NULL>>>
|   |   | |   | | |     |-BinaryOperator 0x559af0e5e100 <col:19, col:23> 'int' '<'
|   |   | |   | | |     | |-ImplicitCastExpr 0x559af0e5e0e8 <col:19> 'int' <LValueToRValue>
|   |   | |   | | |     | | `-DeclRefExpr 0x559af0e5e0a0 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | |   | | |     | `-IntegerLiteral 0x559af0e5e0c8 <col:23> 'int' 5
|   |   | |   | | |     |-UnaryOperator 0x559af0e5e150 <col:26, col:27> 'int' postfix '++'
|   |   | |   | | |     | `-DeclRefExpr 0x559af0e5e128 <col:26> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | |   | | |     `-ForStmt 0x559af0e5e9d8 <line:47:9, line:48:36>
|   |   | |   | | |       |-BinaryOperator 0x559af0e5e2c8 <line:47:14, col:18> 'int' '='
|   |   | |   | | |       | |-DeclRefExpr 0x559af0e5e170 <col:14> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   | |   | | |       | `-IntegerLiteral 0x559af0e5e2a8 <col:18> 'int' 0
|   |   | |   | | |       |-<<<NULL>>>
|   |   | |   | | |       |-BinaryOperator 0x559af0e5e350 <col:21, col:25> 'int' '<'
|   |   | |   | | |       | |-ImplicitCastExpr 0x559af0e5e338 <col:21> 'int' <LValueToRValue>
|   |   | |   | | |       | | `-DeclRefExpr 0x559af0e5e2f0 <col:21> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   | |   | | |       | `-IntegerLiteral 0x559af0e5e318 <col:25> 'int' 10
|   |   | |   | | |       |-UnaryOperator 0x559af0e5e3a0 <col:29, col:30> 'int' postfix '++'
|   |   | |   | | |       | `-DeclRefExpr 0x559af0e5e378 <col:29> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   | |   | | |       `-CompoundAssignOperator 0x559af0e5e9a0 <line:48:9, col:36> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   | |   | | |         |-ArraySubscriptExpr 0x559af0e5e570 <col:9, col:15> 'double' lvalue
|   |   | |   | | |         | |-ImplicitCastExpr 0x559af0e5e540 <col:9, col:12> 'double *' <ArrayToPointerDecay>
|   |   | |   | | |         | | `-ArraySubscriptExpr 0x559af0e5e4f0 <col:9, col:12> 'double [5]' lvalue
|   |   | |   | | |         | |   |-ImplicitCastExpr 0x559af0e5e4c0 <col:9> 'double (*)[5]' <ArrayToPointerDecay>
|   |   | |   | | |         | |   | `-DeclRefExpr 0x559af0e5e3c0 <col:9> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   | |   | | |         | |   `-ImplicitCastExpr 0x559af0e5e4d8 <col:11> 'int' <LValueToRValue>
|   |   | |   | | |         | |     `-DeclRefExpr 0x559af0e5e498 <col:11> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | | |         | `-ImplicitCastExpr 0x559af0e5e558 <col:14> 'int' <LValueToRValue>
|   |   | |   | | |         |   `-DeclRefExpr 0x559af0e5e518 <col:14> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | |   | | |         `-BinaryOperator 0x559af0e5e978 <col:20, col:36> 'double' '*'
|   |   | |   | | |           |-ImplicitCastExpr 0x559af0e5e948 <col:20, col:26> 'double' <LValueToRValue>
|   |   | |   | | |           | `-ArraySubscriptExpr 0x559af0e5e748 <col:20, col:26> 'double' lvalue
|   |   | |   | | |           |   |-ImplicitCastExpr 0x559af0e5e718 <col:20, col:23> 'double *' <ArrayToPointerDecay>
|   |   | |   | | |           |   | `-ArraySubscriptExpr 0x559af0e5e6c8 <col:20, col:23> 'double [10]' lvalue
|   |   | |   | | |           |   |   |-ImplicitCastExpr 0x559af0e5e698 <col:20> 'double (*)[10]' <ArrayToPointerDecay>
|   |   | |   | | |           |   |   | `-DeclRefExpr 0x559af0e5e598 <col:20> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   |   | |   | | |           |   |   `-ImplicitCastExpr 0x559af0e5e6b0 <col:22> 'int' <LValueToRValue>
|   |   | |   | | |           |   |     `-DeclRefExpr 0x559af0e5e670 <col:22> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | | |           |   `-ImplicitCastExpr 0x559af0e5e730 <col:25> 'int' <LValueToRValue>
|   |   | |   | | |           |     `-DeclRefExpr 0x559af0e5e6f0 <col:25> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   | |   | | |           `-ImplicitCastExpr 0x559af0e5e960 <col:30, col:36> 'double' <LValueToRValue>
|   |   | |   | | |             `-ArraySubscriptExpr 0x559af0e5e920 <col:30, col:36> 'double' lvalue
|   |   | |   | | |               |-ImplicitCastExpr 0x559af0e5e8f0 <col:30, col:33> 'double *' <ArrayToPointerDecay>
|   |   | |   | | |               | `-ArraySubscriptExpr 0x559af0e5e8a0 <col:30, col:33> 'double [5]' lvalue
|   |   | |   | | |               |   |-ImplicitCastExpr 0x559af0e5e870 <col:30> 'double (*)[5]' <ArrayToPointerDecay>
|   |   | |   | | |               |   | `-DeclRefExpr 0x559af0e5e770 <col:30> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   |   | |   | | |               |   `-ImplicitCastExpr 0x559af0e5e888 <col:32> 'int' <LValueToRValue>
|   |   | |   | | |               |     `-DeclRefExpr 0x559af0e5e848 <col:32> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   | |   | | |               `-ImplicitCastExpr 0x559af0e5e908 <col:35> 'int' <LValueToRValue>
|   |   | |   | | |                 `-DeclRefExpr 0x559af0e5e8c8 <col:35> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | |   | | `-ImplicitParamDecl 0x559af0e5db48 <line:42:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:42:13) *'
|   |   | |   | |-DeclRefExpr 0x559af0e5dc30 <line:43:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | |-DeclRefExpr 0x559af0e5dea0 <line:45:40> 'int' lvalue Var 0x559af0e53e38 'tid' 'int'
|   |   | |   | |-DeclRefExpr 0x559af0e5e030 <line:46:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | |   | |-DeclRefExpr 0x559af0e5e280 <line:47:14> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   | |   | |-DeclRefExpr 0x559af0e5e470 <line:48:9> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   | |   | |-DeclRefExpr 0x559af0e5e648 <col:20> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   |   | |   | `-DeclRefExpr 0x559af0e5e820 <col:30> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   |   | |   |-DeclRefExpr 0x559af0e5f210 <line:43:10> 'int' lvalue Var 0x559af0e5f1b0 '.omp.iv' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5ede0 <col:5, <invalid sloc>> 'int' '-'
|   |   | |   | |-BinaryOperator 0x559af0e5ecb8 <col:5, col:24> 'int' '/'
|   |   | |   | | |-ParenExpr 0x559af0e5ec98 <col:5> 'int'
|   |   | |   | | | `-BinaryOperator 0x559af0e5ec70 <col:21, col:24> 'int' '+'
|   |   | |   | | |   |-BinaryOperator 0x559af0e5ec48 <col:21, <invalid sloc>> 'int' '-'
|   |   | |   | | |   | |-BinaryOperator 0x559af0e5ec00 <col:21, col:14> 'int' '-'
|   |   | |   | | |   | | |-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   | |   | | |   | | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   | | |   | `-IntegerLiteral 0x559af0e5ec28 <<invalid sloc>> 'int' 1
|   |   | |   | | |   `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   | | `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   | `-IntegerLiteral 0x559af0e5edc0 <<invalid sloc>> 'int' 1
|   |   | |   |-<<<NULL>>>
|   |   | |   |-ImplicitCastExpr 0x559af0e5ebe8 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | |   | `-BinaryOperator 0x559af0e5ebc0 <col:14, col:21> 'int' '<'
|   |   | |   |   |-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   |   `-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   | |   |-BinaryOperator 0x559af0e5f2a8 <col:10> 'int' '<='
|   |   | |   | |-ImplicitCastExpr 0x559af0e5f278 <col:10> 'int' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x559af0e5f210 <col:10> 'int' lvalue Var 0x559af0e5f1b0 '.omp.iv' 'int'
|   |   | |   | `-ImplicitCastExpr 0x559af0e5f290 <col:10> 'int' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x559af0e5ef40 <col:10> 'int' lvalue Var 0x559af0e5eee0 '.omp.ub' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5f250 <col:10> 'int' '='
|   |   | |   | |-DeclRefExpr 0x559af0e5f210 <col:10> 'int' lvalue Var 0x559af0e5f1b0 '.omp.iv' 'int'
|   |   | |   | `-ImplicitCastExpr 0x559af0e5f238 <col:10> 'int' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x559af0e5ee80 <col:10> 'int' lvalue Var 0x559af0e5ee20 '.omp.lb' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5f330 <col:10, <invalid sloc>> 'int' '='
|   |   | |   | |-DeclRefExpr 0x559af0e5f210 <col:10> 'int' lvalue Var 0x559af0e5f1b0 '.omp.iv' 'int'
|   |   | |   | `-BinaryOperator 0x559af0e5f308 <col:10, <invalid sloc>> 'int' '+'
|   |   | |   |   |-ImplicitCastExpr 0x559af0e5f2f0 <col:10> 'int' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x559af0e5f210 <col:10> 'int' lvalue Var 0x559af0e5f1b0 '.omp.iv' 'int'
|   |   | |   |   `-IntegerLiteral 0x559af0e5f2d0 <<invalid sloc>> 'int' 1
|   |   | |   |-<<<NULL>>>
|   |   | |   |-DeclRefExpr 0x559af0e5efe0 <col:10> 'int' lvalue Var 0x559af0e5ef80 '.omp.is_last' 'int'
|   |   | |   |-DeclRefExpr 0x559af0e5ee80 <col:10> 'int' lvalue Var 0x559af0e5ee20 '.omp.lb' 'int'
|   |   | |   |-DeclRefExpr 0x559af0e5ef40 <col:10> 'int' lvalue Var 0x559af0e5eee0 '.omp.ub' 'int'
|   |   | |   |-DeclRefExpr 0x559af0e5f0a0 <col:10> 'int' lvalue Var 0x559af0e5f040 '.omp.stride' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5f170 <col:10> 'int' '='
|   |   | |   | |-DeclRefExpr 0x559af0e5ef40 <col:10> 'int' lvalue Var 0x559af0e5eee0 '.omp.ub' 'int'
|   |   | |   | `-ConditionalOperator 0x559af0e5f140 <col:10> 'int'
|   |   | |   |   |-BinaryOperator 0x559af0e5f100 <col:10, <invalid sloc>> 'int' '>'
|   |   | |   |   | |-ImplicitCastExpr 0x559af0e5f0e8 <col:10> 'int' <LValueToRValue>
|   |   | |   |   | | `-DeclRefExpr 0x559af0e5ef40 <col:10> 'int' lvalue Var 0x559af0e5eee0 '.omp.ub' 'int'
|   |   | |   |   | `-BinaryOperator 0x559af0e5ede0 <col:5, <invalid sloc>> 'int' '-'
|   |   | |   |   |   |-BinaryOperator 0x559af0e5ecb8 <col:5, col:24> 'int' '/'
|   |   | |   |   |   | |-ParenExpr 0x559af0e5ec98 <col:5> 'int'
|   |   | |   |   |   | | `-BinaryOperator 0x559af0e5ec70 <col:21, col:24> 'int' '+'
|   |   | |   |   |   | |   |-BinaryOperator 0x559af0e5ec48 <col:21, <invalid sloc>> 'int' '-'
|   |   | |   |   |   | |   | |-BinaryOperator 0x559af0e5ec00 <col:21, col:14> 'int' '-'
|   |   | |   |   |   | |   | | |-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   | |   |   |   | |   | | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   |   |   | |   | `-IntegerLiteral 0x559af0e5ec28 <<invalid sloc>> 'int' 1
|   |   | |   |   |   | |   `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   |   |   | `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   |   |   `-IntegerLiteral 0x559af0e5edc0 <<invalid sloc>> 'int' 1
|   |   | |   |   |-BinaryOperator 0x559af0e5ede0 <col:5, <invalid sloc>> 'int' '-'
|   |   | |   |   | |-BinaryOperator 0x559af0e5ecb8 <col:5, col:24> 'int' '/'
|   |   | |   |   | | |-ParenExpr 0x559af0e5ec98 <col:5> 'int'
|   |   | |   |   | | | `-BinaryOperator 0x559af0e5ec70 <col:21, col:24> 'int' '+'
|   |   | |   |   | | |   |-BinaryOperator 0x559af0e5ec48 <col:21, <invalid sloc>> 'int' '-'
|   |   | |   |   | | |   | |-BinaryOperator 0x559af0e5ec00 <col:21, col:14> 'int' '-'
|   |   | |   |   | | |   | | |-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   | |   |   | | |   | | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   |   | | |   | `-IntegerLiteral 0x559af0e5ec28 <<invalid sloc>> 'int' 1
|   |   | |   |   | | |   `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   |   | | `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   |   | `-IntegerLiteral 0x559af0e5edc0 <<invalid sloc>> 'int' 1
|   |   | |   |   `-ImplicitCastExpr 0x559af0e5f128 <col:10> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x559af0e5ef40 <col:10> 'int' lvalue Var 0x559af0e5eee0 '.omp.ub' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5f3b0 <col:10> 'int' '='
|   |   | |   | |-DeclRefExpr 0x559af0e5ee80 <col:10> 'int' lvalue Var 0x559af0e5ee20 '.omp.lb' 'int'
|   |   | |   | `-BinaryOperator 0x559af0e5f388 <col:10> 'int' '+'
|   |   | |   |   |-ImplicitCastExpr 0x559af0e5f358 <col:10> 'int' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x559af0e5ee80 <col:10> 'int' lvalue Var 0x559af0e5ee20 '.omp.lb' 'int'
|   |   | |   |   `-ImplicitCastExpr 0x559af0e5f370 <col:10> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x559af0e5f0a0 <col:10> 'int' lvalue Var 0x559af0e5f040 '.omp.stride' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5f430 <col:10> 'int' '='
|   |   | |   | |-DeclRefExpr 0x559af0e5ef40 <col:10> 'int' lvalue Var 0x559af0e5eee0 '.omp.ub' 'int'
|   |   | |   | `-BinaryOperator 0x559af0e5f408 <col:10> 'int' '+'
|   |   | |   |   |-ImplicitCastExpr 0x559af0e5f3d8 <col:10> 'int' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x559af0e5ef40 <col:10> 'int' lvalue Var 0x559af0e5eee0 '.omp.ub' 'int'
|   |   | |   |   `-ImplicitCastExpr 0x559af0e5f3f0 <col:10> 'int' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x559af0e5f0a0 <col:10> 'int' lvalue Var 0x559af0e5f040 '.omp.stride' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5ecb8 <col:5, col:24> 'int' '/'
|   |   | |   | |-ParenExpr 0x559af0e5ec98 <col:5> 'int'
|   |   | |   | | `-BinaryOperator 0x559af0e5ec70 <col:21, col:24> 'int' '+'
|   |   | |   | |   |-BinaryOperator 0x559af0e5ec48 <col:21, <invalid sloc>> 'int' '-'
|   |   | |   | |   | |-BinaryOperator 0x559af0e5ec00 <col:21, col:14> 'int' '-'
|   |   | |   | |   | | |-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   | |   | |   | | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   | |   | `-IntegerLiteral 0x559af0e5ec28 <<invalid sloc>> 'int' 1
|   |   | |   | |   `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   | `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   |-DeclRefExpr 0x559af0e5ece0 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   |-DeclRefExpr 0x559af0e5ed80 <col:5> 'int' lvalue Var 0x559af0e5ed20 'i' 'int'
|   |   | |   |-BinaryOperator 0x559af0e5f480 <col:5, col:14> 'int' '='
|   |   | |   | |-DeclRefExpr 0x559af0e5f458 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   |-BinaryOperator 0x559af0e5f530 <col:5, col:24> 'int' '='
|   |   | |   | |-DeclRefExpr 0x559af0e5f458 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |   | `-BinaryOperator 0x559af0e5f508 <col:14, col:24> 'int' '+'
|   |   | |   |   |-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |   |   `-BinaryOperator 0x559af0e5f4e0 <col:24> 'int' '*'
|   |   | |   |     |-ImplicitCastExpr 0x559af0e5f4c8 <col:24> 'int' <LValueToRValue>
|   |   | |   |     | `-ParenExpr 0x559af0e5f4a8 <col:24> 'int' lvalue
|   |   | |   |     |   `-DeclRefExpr 0x559af0e5f210 <col:10> 'int' lvalue Var 0x559af0e5f1b0 '.omp.iv' 'int'
|   |   | |   |     `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |   `-BinaryOperator 0x559af0e5f5c8 <col:5, col:24> 'int' '='
|   |   | |     |-DeclRefExpr 0x559af0e5f458 <col:5> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | |     `-BinaryOperator 0x559af0e5f5a0 <col:14, col:24> 'int' '+'
|   |   | |       |-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |       `-BinaryOperator 0x559af0e5f578 <col:24> 'int' '*'
|   |   | |         |-ParenExpr 0x559af0e5f558 <col:24> 'int'
|   |   | |         | `-BinaryOperator 0x559af0e5ecb8 <col:5, col:24> 'int' '/'
|   |   | |         |   |-ParenExpr 0x559af0e5ec98 <col:5> 'int'
|   |   | |         |   | `-BinaryOperator 0x559af0e5ec70 <col:21, col:24> 'int' '+'
|   |   | |         |   |   |-BinaryOperator 0x559af0e5ec48 <col:21, <invalid sloc>> 'int' '-'
|   |   | |         |   |   | |-BinaryOperator 0x559af0e5ec00 <col:21, col:14> 'int' '-'
|   |   | |         |   |   | | |-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   | |         |   |   | | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   | |         |   |   | `-IntegerLiteral 0x559af0e5ec28 <<invalid sloc>> 'int' 1
|   |   | |         |   |   `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |         |   `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |         `-IntegerLiteral 0x559af0e5eba0 <col:24> 'int' 1
|   |   | |-ImplicitParamDecl 0x559af0e54880 <line:13:11> col:11 implicit .global_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559af0e548e0 <col:11> col:11 implicit .bound_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559af0e54968 <col:11> col:11 implicit __context 'struct (anonymous at mmOMP_-_main.c:13:11) *'
|   |   | |-FunctionDecl 0x559af0e54ad0 parent 0x559af0df9b98 <<invalid sloc>> line:15:11 implicit used omp_get_thread_num 'int ()'
|   |   | |-FunctionDecl 0x559af0e560b8 parent 0x559af0df9b98 <<invalid sloc>> line:18:18 implicit used omp_get_num_threads 'int ()'
|   |   | |-RecordDecl 0x559af0e56b98 <line:23:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559af0e56c40 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559af0e56e30 <line:24:10> col:10 implicit 'int &'
|   |   | | |-FieldDecl 0x559af0e588f8 <line:25:12> col:12 implicit 'int &'
|   |   | | `-FieldDecl 0x559af0e58bc0 <line:26:7> col:7 implicit 'double (&)[8][10]'
|   |   | |-CapturedDecl 0x559af0e56c88 <<invalid sloc>> <invalid sloc>
|   |   | | |-ForStmt 0x559af0e58eb0 <line:24:5, line:26:21>
|   |   | | | |-BinaryOperator 0x559af0e56ec0 <line:24:10, col:14> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e56d68 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e56ea0 <col:14> 'int' 0
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559af0e56f48 <col:17, col:21> 'int' '<'
|   |   | | | | |-ImplicitCastExpr 0x559af0e56f30 <col:17> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559af0e56ee8 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e56f10 <col:21> 'int' 8
|   |   | | | |-UnaryOperator 0x559af0e56f98 <col:24, col:25> 'int' postfix '++'
|   |   | | | | `-DeclRefExpr 0x559af0e56f70 <col:24> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | `-ForStmt 0x559af0e58e78 <line:25:7, line:26:21>
|   |   | | |   |-BinaryOperator 0x559af0e58988 <line:25:12, col:16> 'int' '='
|   |   | | |   | |-DeclRefExpr 0x559af0e56fb8 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   | `-IntegerLiteral 0x559af0e58968 <col:16> 'int' 0
|   |   | | |   |-<<<NULL>>>
|   |   | | |   |-BinaryOperator 0x559af0e58a10 <col:19, col:23> 'int' '<'
|   |   | | |   | |-ImplicitCastExpr 0x559af0e589f8 <col:19> 'int' <LValueToRValue>
|   |   | | |   | | `-DeclRefExpr 0x559af0e589b0 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   | `-IntegerLiteral 0x559af0e589d8 <col:23> 'int' 10
|   |   | | |   |-UnaryOperator 0x559af0e58a60 <col:27, col:28> 'int' postfix '++'
|   |   | | |   | `-DeclRefExpr 0x559af0e58a38 <col:27> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   `-BinaryOperator 0x559af0e58e50 <line:26:7, col:21> 'double' '='
|   |   | | |     |-ArraySubscriptExpr 0x559af0e58d68 <col:7, col:13> 'double' lvalue
|   |   | | |     | |-ImplicitCastExpr 0x559af0e58d38 <col:7, col:10> 'double *' <ArrayToPointerDecay>
|   |   | | |     | | `-ArraySubscriptExpr 0x559af0e58cb8 <col:7, col:10> 'double [10]' lvalue
|   |   | | |     | |   |-ImplicitCastExpr 0x559af0e58c88 <col:7> 'double (*)[10]' <ArrayToPointerDecay>
|   |   | | |     | |   | `-DeclRefExpr 0x559af0e58aa8 <col:7> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   |   | | |     | |   `-ImplicitCastExpr 0x559af0e58ca0 <col:9> 'int' <LValueToRValue>
|   |   | | |     | |     `-DeclRefExpr 0x559af0e58c30 <col:9> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |     | `-ImplicitCastExpr 0x559af0e58d50 <col:12> 'int' <LValueToRValue>
|   |   | | |     |   `-DeclRefExpr 0x559af0e58ce0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |     `-ImplicitCastExpr 0x559af0e58e38 <col:17, col:21> 'double' <IntegralToFloating>
|   |   | | |       `-BinaryOperator 0x559af0e58e10 <col:17, col:21> 'int' '+'
|   |   | | |         |-ImplicitCastExpr 0x559af0e58de0 <col:17> 'int' <LValueToRValue>
|   |   | | |         | `-DeclRefExpr 0x559af0e58d90 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |         `-ImplicitCastExpr 0x559af0e58df8 <col:21> 'int' <LValueToRValue>
|   |   | | |           `-DeclRefExpr 0x559af0e58db8 <col:21> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | `-ImplicitParamDecl 0x559af0e56d08 <line:23:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:23:13) *'
|   |   | |-RecordDecl 0x559af0e5a518 <line:29:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559af0e5a5c0 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559af0e5a728 <line:30:10> col:10 implicit 'int &'
|   |   | | |-FieldDecl 0x559af0e5a8f0 <line:31:12> col:12 implicit 'int &'
|   |   | | `-FieldDecl 0x559af0e5abc0 <line:32:7> col:7 implicit 'double (&)[10][5]'
|   |   | |-CapturedDecl 0x559af0e5a608 <<invalid sloc>> <invalid sloc>
|   |   | | |-ForStmt 0x559af0e5ae80 <line:30:5, line:32:21>
|   |   | | | |-BinaryOperator 0x559af0e5a7b8 <line:30:10, col:14> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5a6e8 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e5a798 <col:14> 'int' 0
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559af0e5a840 <col:17, col:21> 'int' '<'
|   |   | | | | |-ImplicitCastExpr 0x559af0e5a828 <col:17> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559af0e5a7e0 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e5a808 <col:21> 'int' 10
|   |   | | | |-UnaryOperator 0x559af0e5a890 <col:25, col:26> 'int' postfix '++'
|   |   | | | | `-DeclRefExpr 0x559af0e5a868 <col:25> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | `-ForStmt 0x559af0e5ae48 <line:31:7, line:32:21>
|   |   | | |   |-BinaryOperator 0x559af0e5a980 <line:31:12, col:16> 'int' '='
|   |   | | |   | |-DeclRefExpr 0x559af0e5a8b0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   | `-IntegerLiteral 0x559af0e5a960 <col:16> 'int' 0
|   |   | | |   |-<<<NULL>>>
|   |   | | |   |-BinaryOperator 0x559af0e5aa08 <col:19, col:23> 'int' '<'
|   |   | | |   | |-ImplicitCastExpr 0x559af0e5a9f0 <col:19> 'int' <LValueToRValue>
|   |   | | |   | | `-DeclRefExpr 0x559af0e5a9a8 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   | `-IntegerLiteral 0x559af0e5a9d0 <col:23> 'int' 5
|   |   | | |   |-UnaryOperator 0x559af0e5aa58 <col:26, col:27> 'int' postfix '++'
|   |   | | |   | `-DeclRefExpr 0x559af0e5aa30 <col:26> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   `-BinaryOperator 0x559af0e5ae20 <line:32:7, col:21> 'double' '='
|   |   | | |     |-ArraySubscriptExpr 0x559af0e5ad38 <col:7, col:13> 'double' lvalue
|   |   | | |     | |-ImplicitCastExpr 0x559af0e5ad08 <col:7, col:10> 'double *' <ArrayToPointerDecay>
|   |   | | |     | | `-ArraySubscriptExpr 0x559af0e5acb8 <col:7, col:10> 'double [5]' lvalue
|   |   | | |     | |   |-ImplicitCastExpr 0x559af0e5ac88 <col:7> 'double (*)[5]' <ArrayToPointerDecay>
|   |   | | |     | |   | `-DeclRefExpr 0x559af0e5aaa8 <col:7> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   |   | | |     | |   `-ImplicitCastExpr 0x559af0e5aca0 <col:9> 'int' <LValueToRValue>
|   |   | | |     | |     `-DeclRefExpr 0x559af0e5ac30 <col:9> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |     | `-ImplicitCastExpr 0x559af0e5ad20 <col:12> 'int' <LValueToRValue>
|   |   | | |     |   `-DeclRefExpr 0x559af0e5ace0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |     `-ImplicitCastExpr 0x559af0e5ae08 <col:17, col:21> 'double' <IntegralToFloating>
|   |   | | |       `-BinaryOperator 0x559af0e5ade0 <col:17, col:21> 'int' '*'
|   |   | | |         |-ImplicitCastExpr 0x559af0e5adb0 <col:17> 'int' <LValueToRValue>
|   |   | | |         | `-DeclRefExpr 0x559af0e5ad60 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |         `-ImplicitCastExpr 0x559af0e5adc8 <col:21> 'int' <LValueToRValue>
|   |   | | |           `-DeclRefExpr 0x559af0e5ad88 <col:21> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | `-ImplicitParamDecl 0x559af0e5a688 <line:29:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:29:13) *'
|   |   | |-RecordDecl 0x559af0e5c318 <line:35:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559af0e5c3c0 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559af0e5c528 <line:36:10> col:10 implicit 'int &'
|   |   | | |-FieldDecl 0x559af0e5c6f0 <line:37:12> col:12 implicit 'int &'
|   |   | | `-FieldDecl 0x559af0e5c9c0 <line:38:7> col:7 implicit 'double (&)[8][5]'
|   |   | |-CapturedDecl 0x559af0e5c408 <<invalid sloc>> <invalid sloc>
|   |   | | |-ForStmt 0x559af0e5cbd8 <line:36:5, line:38:17>
|   |   | | | |-BinaryOperator 0x559af0e5c5b8 <line:36:10, col:14> 'int' '='
|   |   | | | | |-DeclRefExpr 0x559af0e5c4e8 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e5c598 <col:14> 'int' 0
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559af0e5c640 <col:17, col:21> 'int' '<'
|   |   | | | | |-ImplicitCastExpr 0x559af0e5c628 <col:17> 'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559af0e5c5e0 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | | `-IntegerLiteral 0x559af0e5c608 <col:21> 'int' 8
|   |   | | | |-UnaryOperator 0x559af0e5c690 <col:24, col:25> 'int' postfix '++'
|   |   | | | | `-DeclRefExpr 0x559af0e5c668 <col:24> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | | `-ForStmt 0x559af0e5cba0 <line:37:7, line:38:17>
|   |   | | |   |-BinaryOperator 0x559af0e5c780 <line:37:12, col:16> 'int' '='
|   |   | | |   | |-DeclRefExpr 0x559af0e5c6b0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   | `-IntegerLiteral 0x559af0e5c760 <col:16> 'int' 0
|   |   | | |   |-<<<NULL>>>
|   |   | | |   |-BinaryOperator 0x559af0e5c808 <col:19, col:23> 'int' '<'
|   |   | | |   | |-ImplicitCastExpr 0x559af0e5c7f0 <col:19> 'int' <LValueToRValue>
|   |   | | |   | | `-DeclRefExpr 0x559af0e5c7a8 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   | `-IntegerLiteral 0x559af0e5c7d0 <col:23> 'int' 5
|   |   | | |   |-UnaryOperator 0x559af0e5c858 <col:26, col:27> 'int' postfix '++'
|   |   | | |   | `-DeclRefExpr 0x559af0e5c830 <col:26> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |   `-BinaryOperator 0x559af0e5cb78 <line:38:7, col:17> 'double' '='
|   |   | | |     |-ArraySubscriptExpr 0x559af0e5cb18 <col:7, col:13> 'double' lvalue
|   |   | | |     | |-ImplicitCastExpr 0x559af0e5cae8 <col:7, col:10> 'double *' <ArrayToPointerDecay>
|   |   | | |     | | `-ArraySubscriptExpr 0x559af0e5ca98 <col:7, col:10> 'double [5]' lvalue
|   |   | | |     | |   |-ImplicitCastExpr 0x559af0e5ca58 <col:7> 'double (*)[5]' <ArrayToPointerDecay>
|   |   | | |     | |   | `-DeclRefExpr 0x559af0e5c8a8 <col:7> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   | | |     | |   `-ImplicitCastExpr 0x559af0e5ca80 <col:9> 'int' <LValueToRValue>
|   |   | | |     | |     `-DeclRefExpr 0x559af0e5ca30 <col:9> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   | | |     | `-ImplicitCastExpr 0x559af0e5cb00 <col:12> 'int' <LValueToRValue>
|   |   | | |     |   `-DeclRefExpr 0x559af0e5cac0 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | |     `-ImplicitCastExpr 0x559af0e5cb60 <col:17> 'double' <IntegralToFloating>
|   |   | | |       `-IntegerLiteral 0x559af0e5cb40 <col:17> 'int' 0
|   |   | | `-ImplicitParamDecl 0x559af0e5c488 <line:35:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:35:13) *'
|   |   | |-RecordDecl 0x559af0e5d9c0 <line:42:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559af0e5da70 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559af0e5dbe8 <line:43:10> col:10 implicit 'int &'
|   |   | | |-FieldDecl 0x559af0e5de58 <line:45:40> col:40 implicit 'int &'
|   |   | | |-FieldDecl 0x559af0e5dfe8 <line:46:12> col:12 implicit 'int &'
|   |   | | |-FieldDecl 0x559af0e5e238 <line:47:14> col:14 implicit 'int &'
|   |   | | |-FieldDecl 0x559af0e5e428 <line:48:9> col:9 implicit 'double (&)[8][5]'
|   |   | | |-FieldDecl 0x559af0e5e600 <col:20> col:20 implicit 'double (&)[8][10]'
|   |   | | `-FieldDecl 0x559af0e5e7d8 <col:30> col:30 implicit 'double (&)[10][5]'
|   |   | `-CapturedDecl 0x559af0e5dac8 <<invalid sloc>> <invalid sloc>
|   |   |   |-ForStmt 0x559af0e5eaa0 <line:43:5, line:51:5>
|   |   |   | |-BinaryOperator 0x559af0e5dc78 <line:43:10, col:14> 'int' '='
|   |   |   | | |-DeclRefExpr 0x559af0e5dba8 <col:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x559af0e5dc58 <col:14> 'int' 0
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x559af0e5dd00 <col:17, col:21> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x559af0e5dce8 <col:17> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x559af0e5dca0 <col:17> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x559af0e5dcc8 <col:21> 'int' 8
|   |   |   | |-UnaryOperator 0x559af0e5dd50 <col:24, col:25> 'int' postfix '++'
|   |   |   | | `-DeclRefExpr 0x559af0e5dd28 <col:24> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |   | `-CompoundStmt 0x559af0e5ea48 <line:44:5, line:51:5>
|   |   |   |   |-CallExpr 0x559af0e5df08 <line:45:7, col:46> 'int'
|   |   |   |   | |-ImplicitCastExpr 0x559af0e5def0 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x559af0e5dd70 <col:7> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   |   |   |   | |-ImplicitCastExpr 0x559af0e5df60 <col:14> 'const char *' <BitCast>
|   |   |   |   | | `-ImplicitCastExpr 0x559af0e5df48 <col:14> 'char *' <ArrayToPointerDecay>
|   |   |   |   | |   `-StringLiteral 0x559af0e5ddd8 <col:14> 'char [22]' lvalue "Thread=%d did row=%d\n"
|   |   |   |   | |-ImplicitCastExpr 0x559af0e5df78 <col:40> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x559af0e5de18 <col:40> 'int' lvalue Var 0x559af0e53e38 'tid' 'int'
|   |   |   |   | `-ImplicitCastExpr 0x559af0e5df90 <col:45> 'int' <LValueToRValue>
|   |   |   |   |   `-DeclRefExpr 0x559af0e5dec8 <col:45> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |   |   `-ForStmt 0x559af0e5ea10 <line:46:7, line:48:36>
|   |   |   |     |-BinaryOperator 0x559af0e5e078 <line:46:12, col:16> 'int' '='
|   |   |   |     | |-DeclRefExpr 0x559af0e5dfa8 <col:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   |   |     | `-IntegerLiteral 0x559af0e5e058 <col:16> 'int' 0
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-BinaryOperator 0x559af0e5e100 <col:19, col:23> 'int' '<'
|   |   |   |     | |-ImplicitCastExpr 0x559af0e5e0e8 <col:19> 'int' <LValueToRValue>
|   |   |   |     | | `-DeclRefExpr 0x559af0e5e0a0 <col:19> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   |   |     | `-IntegerLiteral 0x559af0e5e0c8 <col:23> 'int' 5
|   |   |   |     |-UnaryOperator 0x559af0e5e150 <col:26, col:27> 'int' postfix '++'
|   |   |   |     | `-DeclRefExpr 0x559af0e5e128 <col:26> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   |   |     `-ForStmt 0x559af0e5e9d8 <line:47:9, line:48:36>
|   |   |   |       |-BinaryOperator 0x559af0e5e2c8 <line:47:14, col:18> 'int' '='
|   |   |   |       | |-DeclRefExpr 0x559af0e5e170 <col:14> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   |   |       | `-IntegerLiteral 0x559af0e5e2a8 <col:18> 'int' 0
|   |   |   |       |-<<<NULL>>>
|   |   |   |       |-BinaryOperator 0x559af0e5e350 <col:21, col:25> 'int' '<'
|   |   |   |       | |-ImplicitCastExpr 0x559af0e5e338 <col:21> 'int' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x559af0e5e2f0 <col:21> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   |   |       | `-IntegerLiteral 0x559af0e5e318 <col:25> 'int' 10
|   |   |   |       |-UnaryOperator 0x559af0e5e3a0 <col:29, col:30> 'int' postfix '++'
|   |   |   |       | `-DeclRefExpr 0x559af0e5e378 <col:29> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   |   |       `-CompoundAssignOperator 0x559af0e5e9a0 <line:48:9, col:36> 'double' '+=' ComputeLHSTy='double' ComputeResultTy='double'
|   |   |   |         |-ArraySubscriptExpr 0x559af0e5e570 <col:9, col:15> 'double' lvalue
|   |   |   |         | |-ImplicitCastExpr 0x559af0e5e540 <col:9, col:12> 'double *' <ArrayToPointerDecay>
|   |   |   |         | | `-ArraySubscriptExpr 0x559af0e5e4f0 <col:9, col:12> 'double [5]' lvalue
|   |   |   |         | |   |-ImplicitCastExpr 0x559af0e5e4c0 <col:9> 'double (*)[5]' <ArrayToPointerDecay>
|   |   |   |         | |   | `-DeclRefExpr 0x559af0e5e3c0 <col:9> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   |   |         | |   `-ImplicitCastExpr 0x559af0e5e4d8 <col:11> 'int' <LValueToRValue>
|   |   |   |         | |     `-DeclRefExpr 0x559af0e5e498 <col:11> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |   |         | `-ImplicitCastExpr 0x559af0e5e558 <col:14> 'int' <LValueToRValue>
|   |   |   |         |   `-DeclRefExpr 0x559af0e5e518 <col:14> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   |   |         `-BinaryOperator 0x559af0e5e978 <col:20, col:36> 'double' '*'
|   |   |   |           |-ImplicitCastExpr 0x559af0e5e948 <col:20, col:26> 'double' <LValueToRValue>
|   |   |   |           | `-ArraySubscriptExpr 0x559af0e5e748 <col:20, col:26> 'double' lvalue
|   |   |   |           |   |-ImplicitCastExpr 0x559af0e5e718 <col:20, col:23> 'double *' <ArrayToPointerDecay>
|   |   |   |           |   | `-ArraySubscriptExpr 0x559af0e5e6c8 <col:20, col:23> 'double [10]' lvalue
|   |   |   |           |   |   |-ImplicitCastExpr 0x559af0e5e698 <col:20> 'double (*)[10]' <ArrayToPointerDecay>
|   |   |   |           |   |   | `-DeclRefExpr 0x559af0e5e598 <col:20> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   |   |   |           |   |   `-ImplicitCastExpr 0x559af0e5e6b0 <col:22> 'int' <LValueToRValue>
|   |   |   |           |   |     `-DeclRefExpr 0x559af0e5e670 <col:22> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |   |           |   `-ImplicitCastExpr 0x559af0e5e730 <col:25> 'int' <LValueToRValue>
|   |   |   |           |     `-DeclRefExpr 0x559af0e5e6f0 <col:25> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   |   |           `-ImplicitCastExpr 0x559af0e5e960 <col:30, col:36> 'double' <LValueToRValue>
|   |   |   |             `-ArraySubscriptExpr 0x559af0e5e920 <col:30, col:36> 'double' lvalue
|   |   |   |               |-ImplicitCastExpr 0x559af0e5e8f0 <col:30, col:33> 'double *' <ArrayToPointerDecay>
|   |   |   |               | `-ArraySubscriptExpr 0x559af0e5e8a0 <col:30, col:33> 'double [5]' lvalue
|   |   |   |               |   |-ImplicitCastExpr 0x559af0e5e870 <col:30> 'double (*)[5]' <ArrayToPointerDecay>
|   |   |   |               |   | `-DeclRefExpr 0x559af0e5e770 <col:30> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   |   |   |               |   `-ImplicitCastExpr 0x559af0e5e888 <col:32> 'int' <LValueToRValue>
|   |   |   |               |     `-DeclRefExpr 0x559af0e5e848 <col:32> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |   |   |               `-ImplicitCastExpr 0x559af0e5e908 <col:35> 'int' <LValueToRValue>
|   |   |   |                 `-DeclRefExpr 0x559af0e5e8c8 <col:35> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   |   `-ImplicitParamDecl 0x559af0e5db48 <line:42:13> col:13 implicit __context 'struct (anonymous at mmOMP_-_main.c:42:13) *'
|   |   |-DeclRefExpr 0x559af0e54a80 <line:15:5> 'int' lvalue Var 0x559af0e53e38 'tid' 'int'
|   |   |-DeclRefExpr 0x559af0e56068 <line:18:7> 'int' lvalue Var 0x559af0e53ec8 'nthreads' 'int'
|   |   |-DeclRefExpr 0x559af0e56b10 <line:23:39> 'int' lvalue Var 0x559af0e54108 'chunk' 'int'
|   |   |-DeclRefExpr 0x559af0e56df0 <line:24:10> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |-DeclRefExpr 0x559af0e588b8 <line:25:12> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   |-DeclRefExpr 0x559af0e58b58 <line:26:7> 'double [8][10]' lvalue Var 0x559af0e54270 'a' 'double [8][10]'
|   |   |-DeclRefExpr 0x559af0e5ab58 <line:32:7> 'double [10][5]' lvalue Var 0x559af0e543e0 'b' 'double [10][5]'
|   |   |-DeclRefExpr 0x559af0e5c958 <line:38:7> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   `-DeclRefExpr 0x559af0e5e1f8 <line:47:14> 'int' lvalue Var 0x559af0e54078 'k' 'int'
|   |-CallExpr 0x559af0e5f930 <line:54:3, col:68> 'int'
|   | |-ImplicitCastExpr 0x559af0e5f918 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559af0e5f858 <col:3> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559af0e5f978 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559af0e5f960 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559af0e5f8b8 <col:10> 'char [56]' lvalue "******************************************************\n"
|   |-CallExpr 0x559af0e5fa48 <line:55:3, col:28> 'int'
|   | |-ImplicitCastExpr 0x559af0e5fa30 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559af0e5f990 <col:3> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559af0e5fab0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559af0e5fa78 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559af0e5f9f8 <col:10> 'char [16]' lvalue "Result Matrix:\n"
|   |-ForStmt 0x559af0e60100 <line:56:3, line:62:3>
|   | |-BinaryOperator 0x559af0e5fb10 <line:56:8, col:12> 'int' '='
|   | | |-DeclRefExpr 0x559af0e5fac8 <col:8> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   | | `-IntegerLiteral 0x559af0e5faf0 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559af0e5fb98 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559af0e5fb80 <col:15> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559af0e5fb38 <col:15> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   | | `-IntegerLiteral 0x559af0e5fb60 <col:19> 'int' 8
|   | |-UnaryOperator 0x559af0e5fbe8 <col:22, col:23> 'int' postfix '++'
|   | | `-DeclRefExpr 0x559af0e5fbc0 <col:22> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   | `-CompoundStmt 0x559af0e600e0 <line:57:3, line:62:3>
|   |   |-ForStmt 0x559af0e5ff98 <line:58:5, line:59:33>
|   |   | |-BinaryOperator 0x559af0e5fc50 <line:58:10, col:14> 'int' '='
|   |   | | |-DeclRefExpr 0x559af0e5fc08 <col:10> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | `-IntegerLiteral 0x559af0e5fc30 <col:14> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x559af0e5fcd8 <col:17, col:21> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x559af0e5fcc0 <col:17> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x559af0e5fc78 <col:17> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | | `-IntegerLiteral 0x559af0e5fca0 <col:21> 'int' 5
|   |   | |-UnaryOperator 0x559af0e5fd28 <col:24, col:25> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x559af0e5fd00 <col:24> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   | `-CallExpr 0x559af0e5ff18 <line:59:7, col:33> 'int'
|   |   |   |-ImplicitCastExpr 0x559af0e5ff00 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x559af0e5fd48 <col:7> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   |   |   |-ImplicitCastExpr 0x559af0e5ff68 <col:14> 'const char *' <BitCast>
|   |   |   | `-ImplicitCastExpr 0x559af0e5ff50 <col:14> 'char *' <ArrayToPointerDecay>
|   |   |   |   `-StringLiteral 0x559af0e5fda8 <col:14> 'char [9]' lvalue "%6.2f   "
|   |   |   `-ImplicitCastExpr 0x559af0e5ff80 <col:26, col:32> 'double' <LValueToRValue>
|   |   |     `-ArraySubscriptExpr 0x559af0e5fed8 <col:26, col:32> 'double' lvalue
|   |   |       |-ImplicitCastExpr 0x559af0e5fea8 <col:26, col:29> 'double *' <ArrayToPointerDecay>
|   |   |       | `-ArraySubscriptExpr 0x559af0e5fe58 <col:26, col:29> 'double [5]' lvalue
|   |   |       |   |-ImplicitCastExpr 0x559af0e5fe28 <col:26> 'double (*)[5]' <ArrayToPointerDecay>
|   |   |       |   | `-DeclRefExpr 0x559af0e5fdd8 <col:26> 'double [8][5]' lvalue Var 0x559af0e54510 'c' 'double [8][5]'
|   |   |       |   `-ImplicitCastExpr 0x559af0e5fe40 <col:28> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x559af0e5fe00 <col:28> 'int' lvalue Var 0x559af0e53f58 'i' 'int'
|   |   |       `-ImplicitCastExpr 0x559af0e5fec0 <col:31> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x559af0e5fe80 <col:31> 'int' lvalue Var 0x559af0e53fe8 'j' 'int'
|   |   `-CallExpr 0x559af0e60080 <line:61:5, col:16> 'int'
|   |     |-ImplicitCastExpr 0x559af0e60068 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559af0e5ffd0 <col:5> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   |     `-ImplicitCastExpr 0x559af0e600c8 <col:12> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x559af0e600b0 <col:12> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x559af0e60038 <col:12> 'char [2]' lvalue "\n"
|   |-CallExpr 0x559af0e601d8 <line:64:3, col:68> 'int'
|   | |-ImplicitCastExpr 0x559af0e601c0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559af0e60138 <col:3> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559af0e60220 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559af0e60208 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559af0e60160 <col:10> 'char [56]' lvalue "******************************************************\n"
|   |-CallExpr 0x559af0e602e0 <line:65:3, col:19> 'int'
|   | |-ImplicitCastExpr 0x559af0e602c8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559af0e60238 <col:3> 'int (const char *, ...)' Function 0x559af0e565f0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559af0e60328 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559af0e60310 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559af0e60298 <col:10> 'char [7]' lvalue "Done.\n"
|   `-ReturnStmt 0x559af0e60360 <line:66:3, col:10>
|     `-IntegerLiteral 0x559af0e60340 <col:10> 'int' 0
`-FunctionDecl 0x559af0e565f0 <line:19:7> col:7 implicit used printf 'int (const char *, ...)' extern
  |-ParmVarDecl 0x559af0e56690 <<invalid sloc>> <invalid sloc> 'const char *'
  `-FormatAttr 0x559af0e566f8 <col:7> Implicit printf 1 2
