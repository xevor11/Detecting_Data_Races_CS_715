TranslationUnitDecl 0x55e493580e18 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x55e4935813b0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x55e4935810b0 '__int128'
|-TypedefDecl 0x55e493581420 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x55e4935810d0 'unsigned __int128'
|-TypedefDecl 0x55e4935816f8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x55e493581500 'struct __NSConstantString_tag'
|   `-Record 0x55e493581478 '__NSConstantString_tag'
|-TypedefDecl 0x55e493581790 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x55e493581750 'char *'
|   `-BuiltinType 0x55e493580eb0 'char'
|-TypedefDecl 0x55e493581a58 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x55e493581a00 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x55e493581870 'struct __va_list_tag'
|     `-Record 0x55e4935817e8 '__va_list_tag'
`-FunctionDecl 0x55e4935daa30 <for-loop_-_main.c:1:1, line:19:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x55e4935de408 <line:2:1, line:19:1>
    |-DeclStmt 0x55e4935dab88 <line:3:3, col:8>
    | `-VarDecl 0x55e4935dab28 <col:3, col:7> col:7 used i 'int'
    |-DeclStmt 0x55e4935dac18 <line:4:3, col:12>
    | `-VarDecl 0x55e4935dabb8 <col:3, col:7> col:7 used chunk 'int'
    |-DeclStmt 0x55e4935dad10 <line:5:3, col:16>
    | `-VarDecl 0x55e4935dacb0 <col:3, col:15> col:9 used a 'float [1000]'
    |-DeclStmt 0x55e4935dadd0 <line:6:3, col:16>
    | `-VarDecl 0x55e4935dad70 <col:3, col:15> col:9 used b 'float [1000]'
    |-DeclStmt 0x55e4935dae90 <line:7:3, col:16>
    | `-VarDecl 0x55e4935dae30 <col:3, col:15> col:9 used c 'float [1000]'
    |-ForStmt 0x55e4935db290 <line:8:3, line:9:27>
    | |-BinaryOperator 0x55e4935daef0 <line:8:8, col:12> 'int' '='
    | | |-DeclRefExpr 0x55e4935daea8 <col:8> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | `-IntegerLiteral 0x55e4935daed0 <col:12> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x55e4935daf78 <col:15, col:19> 'int' '<'
    | | |-ImplicitCastExpr 0x55e4935daf60 <col:15> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55e4935daf18 <col:15> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | `-IntegerLiteral 0x55e4935daf40 <col:19> 'int' 1000
    | |-UnaryOperator 0x55e4935dafc8 <col:25, col:26> 'int' postfix '++'
    | | `-DeclRefExpr 0x55e4935dafa0 <col:25> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | `-BinaryOperator 0x55e4935db268 <line:9:5, col:27> 'float' '='
    |   |-ArraySubscriptExpr 0x55e4935db098 <col:5, col:8> 'float' lvalue
    |   | |-ImplicitCastExpr 0x55e4935db068 <col:5> 'float *' <ArrayToPointerDecay>
    |   | | `-DeclRefExpr 0x55e4935dafe8 <col:5> 'float [1000]' lvalue Var 0x55e4935dacb0 'a' 'float [1000]'
    |   | `-ImplicitCastExpr 0x55e4935db080 <col:7> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x55e4935db010 <col:7> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    |   `-ParenExpr 0x55e4935db248 <col:12, col:27> 'float'
    |     `-BinaryOperator 0x55e4935db220 <col:13, col:24> 'float' '='
    |       |-ArraySubscriptExpr 0x55e4935db140 <col:13, col:16> 'float' lvalue
    |       | |-ImplicitCastExpr 0x55e4935db110 <col:13> 'float *' <ArrayToPointerDecay>
    |       | | `-DeclRefExpr 0x55e4935db0c0 <col:13> 'float [1000]' lvalue Var 0x55e4935dad70 'b' 'float [1000]'
    |       | `-ImplicitCastExpr 0x55e4935db128 <col:15> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x55e4935db0e8 <col:15> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    |       `-ImplicitCastExpr 0x55e4935db208 <col:20, col:24> 'float' <FloatingCast>
    |         `-BinaryOperator 0x55e4935db1e0 <col:20, col:24> 'double' '*'
    |           |-ImplicitCastExpr 0x55e4935db1c8 <col:20> 'double' <IntegralToFloating>
    |           | `-ImplicitCastExpr 0x55e4935db1b0 <col:20> 'int' <LValueToRValue>
    |           |   `-DeclRefExpr 0x55e4935db168 <col:20> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    |           `-FloatingLiteral 0x55e4935db190 <col:24> 'double' 1.000000e+00
    |-BinaryOperator 0x55e4935db310 <line:11:3, col:11> 'int' '='
    | |-DeclRefExpr 0x55e4935db2c8 <col:3> 'int' lvalue Var 0x55e4935dabb8 'chunk' 'int'
    | `-IntegerLiteral 0x55e4935db2f0 <col:11> 'int' 100
    |-OMPParallelForDirective 0x55e4935de2e0 <line:12:11, col:81>
    | |-OMPSharedClause 0x55e4935db3d8 <col:28, col:48>
    | | |-DeclRefExpr 0x55e4935db338 <col:35> 'float [1000]' lvalue Var 0x55e4935dacb0 'a' 'float [1000]'
    | | |-DeclRefExpr 0x55e4935db360 <col:37> 'float [1000]' lvalue Var 0x55e4935dad70 'b' 'float [1000]'
    | | |-DeclRefExpr 0x55e4935db388 <col:39> 'float [1000]' lvalue Var 0x55e4935dae30 'c' 'float [1000]'
    | | `-DeclRefExpr 0x55e4935db3b0 <col:41> 'int' lvalue Var 0x55e4935dabb8 'chunk' 'int'
    | |-OMPPrivateClause 0x55e4935db4d8 <col:48, col:59>
    | | `-DeclRefExpr 0x55e4935db410 <col:56> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | |-OMPScheduleClause 0x55e4935db5f8 <col:59, col:80>
    | | `-ImplicitCastExpr 0x55e4935db5c8 <col:75> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55e4935db5a0 <col:75> 'int' lvalue OMPCapturedExpr 0x55e4935db540 '.capture_expr.' 'int'
    | |-CapturedStmt 0x55e4935dd018 <line:13:3, line:16:3>
    | | |-CapturedDecl 0x55e4935db758 <<invalid sloc>> <invalid sloc>
    | | | |-ForStmt 0x55e4935dcf58 <line:13:3, line:16:3>
    | | | | |-BinaryOperator 0x55e4935db980 <line:13:8, col:12> 'int' '='
    | | | | | |-DeclRefExpr 0x55e4935db938 <col:8> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | | | | `-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | | | | |-<<<NULL>>>
    | | | | |-BinaryOperator 0x55e4935dba08 <col:15, col:19> 'int' '<'
    | | | | | |-ImplicitCastExpr 0x55e4935db9f0 <col:15> 'int' <LValueToRValue>
    | | | | | | `-DeclRefExpr 0x55e4935db9a8 <col:15> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | | | | `-IntegerLiteral 0x55e4935db9d0 <col:19> 'int' 1000
    | | | | |-UnaryOperator 0x55e4935dca98 <col:25, col:26> 'int' postfix '++'
    | | | | | `-DeclRefExpr 0x55e4935dca70 <col:25> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | | | `-CompoundStmt 0x55e4935dcf40 <line:14:3, line:16:3>
    | | | |   `-BinaryOperator 0x55e4935dcf18 <line:15:5, col:22> 'float' '='
    | | | |     |-ArraySubscriptExpr 0x55e4935dcc08 <col:5, col:8> 'float' lvalue
    | | | |     | |-ImplicitCastExpr 0x55e4935dcbd8 <col:5> 'float *' <ArrayToPointerDecay>
    | | | |     | | `-DeclRefExpr 0x55e4935dcae8 <col:5> 'float [1000]' lvalue Var 0x55e4935dae30 'c' 'float [1000]'
    | | | |     | `-ImplicitCastExpr 0x55e4935dcbf0 <col:7> 'int' <LValueToRValue>
    | | | |     |   `-DeclRefExpr 0x55e4935dcbb0 <col:7> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | | |     `-BinaryOperator 0x55e4935dcef0 <col:12, col:22> 'float' '+'
    | | | |       |-ImplicitCastExpr 0x55e4935dcec0 <col:12, col:15> 'float' <LValueToRValue>
    | | | |       | `-ArraySubscriptExpr 0x55e4935dcd50 <col:12, col:15> 'float' lvalue
    | | | |       |   |-ImplicitCastExpr 0x55e4935dcd20 <col:12> 'float *' <ArrayToPointerDecay>
    | | | |       |   | `-DeclRefExpr 0x55e4935dcc30 <col:12> 'float [1000]' lvalue Var 0x55e4935dacb0 'a' 'float [1000]'
    | | | |       |   `-ImplicitCastExpr 0x55e4935dcd38 <col:14> 'int' <LValueToRValue>
    | | | |       |     `-DeclRefExpr 0x55e4935dccf8 <col:14> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | | |       `-ImplicitCastExpr 0x55e4935dced8 <col:19, col:22> 'float' <LValueToRValue>
    | | | |         `-ArraySubscriptExpr 0x55e4935dce98 <col:19, col:22> 'float' lvalue
    | | | |           |-ImplicitCastExpr 0x55e4935dce68 <col:19> 'float *' <ArrayToPointerDecay>
    | | | |           | `-DeclRefExpr 0x55e4935dcd78 <col:19> 'float [1000]' lvalue Var 0x55e4935dad70 'b' 'float [1000]'
    | | | |           `-ImplicitCastExpr 0x55e4935dce80 <col:21> 'int' <LValueToRValue>
    | | | |             `-DeclRefExpr 0x55e4935dce40 <col:21> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | | |-ImplicitParamDecl 0x55e4935db7c0 <line:12:11> col:11 implicit .global_tid. 'int *const restrict'
    | | | |-ImplicitParamDecl 0x55e4935db820 <col:11> col:11 implicit .bound_tid. 'int *const restrict'
    | | | `-ImplicitParamDecl 0x55e4935db8a8 <col:11> col:11 implicit __context 'struct (anonymous at for-loop_-_main.c:12:11) *'
    | | |-DeclRefExpr 0x55e4935dcb88 <line:15:5> 'float [1000]' lvalue Var 0x55e4935dae30 'c' 'float [1000]'
    | | |-DeclRefExpr 0x55e4935dccd0 <col:12> 'float [1000]' lvalue Var 0x55e4935dacb0 'a' 'float [1000]'
    | | |-DeclRefExpr 0x55e4935dce18 <col:19> 'float [1000]' lvalue Var 0x55e4935dad70 'b' 'float [1000]'
    | | `-DeclRefExpr 0x55e4935dcff0 <<invalid sloc>> 'int' lvalue OMPCapturedExpr 0x55e4935db540 '.capture_expr.' 'int'
    | |-DeclRefExpr 0x55e4935dd708 <line:13:8> 'int' lvalue Var 0x55e4935dd6a8 '.omp.iv' 'int'
    | |-BinaryOperator 0x55e4935dd2d8 <col:3, <invalid sloc>> 'int' '-'
    | | |-BinaryOperator 0x55e4935dd1b0 <col:3, col:25> 'int' '/'
    | | | |-ParenExpr 0x55e4935dd190 <col:3> 'int'
    | | | | `-BinaryOperator 0x55e4935dd168 <col:19, col:25> 'int' '+'
    | | | |   |-BinaryOperator 0x55e4935dd140 <col:19, <invalid sloc>> 'int' '-'
    | | | |   | |-BinaryOperator 0x55e4935dd0f8 <col:19, col:12> 'int' '-'
    | | | |   | | |-IntegerLiteral 0x55e4935db9d0 <col:19> 'int' 1000
    | | | |   | | `-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | | | |   | `-IntegerLiteral 0x55e4935dd120 <<invalid sloc>> 'int' 1
    | | | |   `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | | | `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | | `-IntegerLiteral 0x55e4935dd2b8 <<invalid sloc>> 'int' 1
    | |-<<<NULL>>>
    | |-ImplicitCastExpr 0x55e4935dd0e0 <col:12, col:19> '_Bool' <IntegralToBoolean>
    | | `-BinaryOperator 0x55e4935dd0b8 <col:12, col:19> 'int' '<'
    | |   |-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | |   `-IntegerLiteral 0x55e4935db9d0 <col:19> 'int' 1000
    | |-BinaryOperator 0x55e4935dd7a0 <col:8> 'int' '<='
    | | |-ImplicitCastExpr 0x55e4935dd770 <col:8> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x55e4935dd708 <col:8> 'int' lvalue Var 0x55e4935dd6a8 '.omp.iv' 'int'
    | | `-ImplicitCastExpr 0x55e4935dd788 <col:8> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55e4935dd438 <col:8> 'int' lvalue Var 0x55e4935dd3d8 '.omp.ub' 'int'
    | |-BinaryOperator 0x55e4935dd748 <col:8> 'int' '='
    | | |-DeclRefExpr 0x55e4935dd708 <col:8> 'int' lvalue Var 0x55e4935dd6a8 '.omp.iv' 'int'
    | | `-ImplicitCastExpr 0x55e4935dd730 <col:8> 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x55e4935dd378 <col:8> 'int' lvalue Var 0x55e4935dd318 '.omp.lb' 'int'
    | |-BinaryOperator 0x55e4935dd828 <col:8, <invalid sloc>> 'int' '='
    | | |-DeclRefExpr 0x55e4935dd708 <col:8> 'int' lvalue Var 0x55e4935dd6a8 '.omp.iv' 'int'
    | | `-BinaryOperator 0x55e4935dd800 <col:8, <invalid sloc>> 'int' '+'
    | |   |-ImplicitCastExpr 0x55e4935dd7e8 <col:8> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x55e4935dd708 <col:8> 'int' lvalue Var 0x55e4935dd6a8 '.omp.iv' 'int'
    | |   `-IntegerLiteral 0x55e4935dd7c8 <<invalid sloc>> 'int' 1
    | |-<<<NULL>>>
    | |-DeclRefExpr 0x55e4935dd4d8 <col:8> 'int' lvalue Var 0x55e4935dd478 '.omp.is_last' 'int'
    | |-DeclRefExpr 0x55e4935dd378 <col:8> 'int' lvalue Var 0x55e4935dd318 '.omp.lb' 'int'
    | |-DeclRefExpr 0x55e4935dd438 <col:8> 'int' lvalue Var 0x55e4935dd3d8 '.omp.ub' 'int'
    | |-DeclRefExpr 0x55e4935dd598 <col:8> 'int' lvalue Var 0x55e4935dd538 '.omp.stride' 'int'
    | |-BinaryOperator 0x55e4935dd668 <col:8> 'int' '='
    | | |-DeclRefExpr 0x55e4935dd438 <col:8> 'int' lvalue Var 0x55e4935dd3d8 '.omp.ub' 'int'
    | | `-ConditionalOperator 0x55e4935dd638 <col:8> 'int'
    | |   |-BinaryOperator 0x55e4935dd5f8 <col:8, <invalid sloc>> 'int' '>'
    | |   | |-ImplicitCastExpr 0x55e4935dd5e0 <col:8> 'int' <LValueToRValue>
    | |   | | `-DeclRefExpr 0x55e4935dd438 <col:8> 'int' lvalue Var 0x55e4935dd3d8 '.omp.ub' 'int'
    | |   | `-BinaryOperator 0x55e4935dd2d8 <col:3, <invalid sloc>> 'int' '-'
    | |   |   |-BinaryOperator 0x55e4935dd1b0 <col:3, col:25> 'int' '/'
    | |   |   | |-ParenExpr 0x55e4935dd190 <col:3> 'int'
    | |   |   | | `-BinaryOperator 0x55e4935dd168 <col:19, col:25> 'int' '+'
    | |   |   | |   |-BinaryOperator 0x55e4935dd140 <col:19, <invalid sloc>> 'int' '-'
    | |   |   | |   | |-BinaryOperator 0x55e4935dd0f8 <col:19, col:12> 'int' '-'
    | |   |   | |   | | |-IntegerLiteral 0x55e4935db9d0 <col:19> 'int' 1000
    | |   |   | |   | | `-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | |   |   | |   | `-IntegerLiteral 0x55e4935dd120 <<invalid sloc>> 'int' 1
    | |   |   | |   `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | |   |   | `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | |   |   `-IntegerLiteral 0x55e4935dd2b8 <<invalid sloc>> 'int' 1
    | |   |-BinaryOperator 0x55e4935dd2d8 <col:3, <invalid sloc>> 'int' '-'
    | |   | |-BinaryOperator 0x55e4935dd1b0 <col:3, col:25> 'int' '/'
    | |   | | |-ParenExpr 0x55e4935dd190 <col:3> 'int'
    | |   | | | `-BinaryOperator 0x55e4935dd168 <col:19, col:25> 'int' '+'
    | |   | | |   |-BinaryOperator 0x55e4935dd140 <col:19, <invalid sloc>> 'int' '-'
    | |   | | |   | |-BinaryOperator 0x55e4935dd0f8 <col:19, col:12> 'int' '-'
    | |   | | |   | | |-IntegerLiteral 0x55e4935db9d0 <col:19> 'int' 1000
    | |   | | |   | | `-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | |   | | |   | `-IntegerLiteral 0x55e4935dd120 <<invalid sloc>> 'int' 1
    | |   | | |   `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | |   | | `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | |   | `-IntegerLiteral 0x55e4935dd2b8 <<invalid sloc>> 'int' 1
    | |   `-ImplicitCastExpr 0x55e4935dd620 <col:8> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x55e4935dd438 <col:8> 'int' lvalue Var 0x55e4935dd3d8 '.omp.ub' 'int'
    | |-BinaryOperator 0x55e4935dd8a8 <col:8> 'int' '='
    | | |-DeclRefExpr 0x55e4935dd378 <col:8> 'int' lvalue Var 0x55e4935dd318 '.omp.lb' 'int'
    | | `-BinaryOperator 0x55e4935dd880 <col:8> 'int' '+'
    | |   |-ImplicitCastExpr 0x55e4935dd850 <col:8> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x55e4935dd378 <col:8> 'int' lvalue Var 0x55e4935dd318 '.omp.lb' 'int'
    | |   `-ImplicitCastExpr 0x55e4935dd868 <col:8> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x55e4935dd598 <col:8> 'int' lvalue Var 0x55e4935dd538 '.omp.stride' 'int'
    | |-BinaryOperator 0x55e4935dd928 <col:8> 'int' '='
    | | |-DeclRefExpr 0x55e4935dd438 <col:8> 'int' lvalue Var 0x55e4935dd3d8 '.omp.ub' 'int'
    | | `-BinaryOperator 0x55e4935dd900 <col:8> 'int' '+'
    | |   |-ImplicitCastExpr 0x55e4935dd8d0 <col:8> 'int' <LValueToRValue>
    | |   | `-DeclRefExpr 0x55e4935dd438 <col:8> 'int' lvalue Var 0x55e4935dd3d8 '.omp.ub' 'int'
    | |   `-ImplicitCastExpr 0x55e4935dd8e8 <col:8> 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x55e4935dd598 <col:8> 'int' lvalue Var 0x55e4935dd538 '.omp.stride' 'int'
    | |-BinaryOperator 0x55e4935dd1b0 <col:3, col:25> 'int' '/'
    | | |-ParenExpr 0x55e4935dd190 <col:3> 'int'
    | | | `-BinaryOperator 0x55e4935dd168 <col:19, col:25> 'int' '+'
    | | |   |-BinaryOperator 0x55e4935dd140 <col:19, <invalid sloc>> 'int' '-'
    | | |   | |-BinaryOperator 0x55e4935dd0f8 <col:19, col:12> 'int' '-'
    | | |   | | |-IntegerLiteral 0x55e4935db9d0 <col:19> 'int' 1000
    | | |   | | `-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | | |   | `-IntegerLiteral 0x55e4935dd120 <<invalid sloc>> 'int' 1
    | | |   `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | | `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | |-DeclRefExpr 0x55e4935dd1d8 <col:3> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | |-DeclRefExpr 0x55e4935dd278 <col:3> 'int' lvalue Var 0x55e4935dd218 'i' 'int'
    | |-BinaryOperator 0x55e4935dd978 <col:3, col:12> 'int' '='
    | | |-DeclRefExpr 0x55e4935dd950 <col:3> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | `-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | |-BinaryOperator 0x55e4935dda28 <col:3, col:25> 'int' '='
    | | |-DeclRefExpr 0x55e4935dd950 <col:3> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    | | `-BinaryOperator 0x55e4935dda00 <col:12, col:25> 'int' '+'
    | |   |-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    | |   `-BinaryOperator 0x55e4935dd9d8 <col:25> 'int' '*'
    | |     |-ImplicitCastExpr 0x55e4935dd9c0 <col:25> 'int' <LValueToRValue>
    | |     | `-ParenExpr 0x55e4935dd9a0 <col:25> 'int' lvalue
    | |     |   `-DeclRefExpr 0x55e4935dd708 <col:8> 'int' lvalue Var 0x55e4935dd6a8 '.omp.iv' 'int'
    | |     `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    | `-BinaryOperator 0x55e4935de2a0 <col:3, col:25> 'int' '='
    |   |-DeclRefExpr 0x55e4935dd950 <col:3> 'int' lvalue Var 0x55e4935dab28 'i' 'int'
    |   `-BinaryOperator 0x55e4935de278 <col:12, col:25> 'int' '+'
    |     |-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    |     `-BinaryOperator 0x55e4935de250 <col:25> 'int' '*'
    |       |-ParenExpr 0x55e4935dda50 <col:25> 'int'
    |       | `-BinaryOperator 0x55e4935dd1b0 <col:3, col:25> 'int' '/'
    |       |   |-ParenExpr 0x55e4935dd190 <col:3> 'int'
    |       |   | `-BinaryOperator 0x55e4935dd168 <col:19, col:25> 'int' '+'
    |       |   |   |-BinaryOperator 0x55e4935dd140 <col:19, <invalid sloc>> 'int' '-'
    |       |   |   | |-BinaryOperator 0x55e4935dd0f8 <col:19, col:12> 'int' '-'
    |       |   |   | | |-IntegerLiteral 0x55e4935db9d0 <col:19> 'int' 1000
    |       |   |   | | `-IntegerLiteral 0x55e4935db960 <col:12> 'int' 0
    |       |   |   | `-IntegerLiteral 0x55e4935dd120 <<invalid sloc>> 'int' 1
    |       |   |   `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    |       |   `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    |       `-IntegerLiteral 0x55e4935dd098 <col:25> 'int' 1
    `-ReturnStmt 0x55e4935de3f0 <line:18:3, col:10>
      `-IntegerLiteral 0x55e4935de3d0 <col:10> 'int' 0
