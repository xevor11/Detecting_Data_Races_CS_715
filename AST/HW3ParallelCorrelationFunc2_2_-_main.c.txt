TranslationUnitDecl 0x559be5585e38 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x559be55863d0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x559be55860d0 '__int128'
|-TypedefDecl 0x559be5586440 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x559be55860f0 'unsigned __int128'
|-TypedefDecl 0x559be5586718 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x559be5586520 'struct __NSConstantString_tag'
|   `-Record 0x559be5586498 '__NSConstantString_tag'
|-TypedefDecl 0x559be55867b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x559be5586770 'char *'
|   `-BuiltinType 0x559be5585ed0 'char'
|-TypedefDecl 0x559be5586a78 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x559be5586a20 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x559be5586890 'struct __va_list_tag'
|     `-Record 0x559be5586808 '__va_list_tag'
|-FunctionDecl 0x559be55e34f0 <HW3ParallelCorrelationFunc2_2_-_main.c:1:1, line:541:1> line:1:5 main 'int ()'
| `-CompoundStmt 0x559be5620e10 <line:2:1, line:541:1>
|   |-CallExpr 0x559be55e3c10 <line:3:3, col:37> 'int'
|   | |-ImplicitCastExpr 0x559be55e3bf8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55e3b20 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55e3c58 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55e3c40 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55e3b88 <col:10> 'char [25]' lvalue "Line 95 - FIRST of MAIN\n"
|   |-DeclStmt 0x559be55e3ce8 <line:4:3, col:13>
|   | `-VarDecl 0x559be55e3c88 <col:3, col:12> col:12 used i 'long'
|   |-DeclStmt 0x559be55e3d78 <line:5:3, col:13>
|   | `-VarDecl 0x559be55e3d18 <col:3, col:12> col:12 used j 'long'
|   |-DeclStmt 0x559be55e3e08 <line:6:3, col:12>
|   | `-VarDecl 0x559be55e3da8 <col:3, col:7> col:7 used chunk 'int'
|   |-DeclStmt 0x559be55e3f68 <line:7:3, col:56>
|   | `-VarDecl 0x559be55e3e38 <col:3, col:52> col:10 dec_to_rad 'double' cinit
|   |   `-BinaryOperator 0x559be55e3f40 <col:23, col:52> 'double' '/'
|   |     |-ParenExpr 0x559be55e3f00 <col:23, col:48> 'double'
|   |     | `-BinaryOperator 0x559be55e3ed8 <col:24, col:29> 'double' '*'
|   |     |   |-FloatingLiteral 0x559be55e3e98 <col:24> 'double' 2.000000e+00
|   |     |   `-FloatingLiteral 0x559be55e3eb8 <col:29> 'double' 3.141596e+00
|   |     `-FloatingLiteral 0x559be55e3f20 <col:52> 'double' 3.600000e+02
|   |-DeclStmt 0x559be55e40c8 <line:8:3, col:56>
|   | `-VarDecl 0x559be55e3f98 <col:3, col:52> col:10 used deg_to_rad 'double' cinit
|   |   `-BinaryOperator 0x559be55e40a0 <col:23, col:52> 'double' '/'
|   |     |-ParenExpr 0x559be55e4060 <col:23, col:48> 'double'
|   |     | `-BinaryOperator 0x559be55e4038 <col:24, col:29> 'double' '*'
|   |     |   |-FloatingLiteral 0x559be55e3ff8 <col:24> 'double' 2.000000e+00
|   |     |   `-FloatingLiteral 0x559be55e4018 <col:29> 'double' 3.141596e+00
|   |     `-FloatingLiteral 0x559be55e4080 <col:52> 'double' 3.600000e+02
|   |-DeclStmt 0x559be55e4198 <line:9:3, col:25>
|   | `-VarDecl 0x559be55e40f8 <col:3, col:22> col:10 used logr_min 'double' cinit
|   |   `-UnaryOperator 0x559be55e4178 <col:21, col:22> 'double' prefix '-'
|   |     `-FloatingLiteral 0x559be55e4158 <col:22> 'double' 1.000000e+00
|   |-DeclStmt 0x559be55e4248 <line:10:3, col:27>
|   | `-VarDecl 0x559be55e41c8 <col:3, col:21> col:10 used logr_max 'double' cinit
|   |   `-FloatingLiteral 0x559be55e4228 <col:21> 'double' 1.301100e+00
|   |-DeclStmt 0x559be55e48d0 <line:11:3, col:57>
|   | `-VarDecl 0x559be55e4278 <col:3, col:56> col:10 used logrSQ_min 'double' cinit
|   |   `-CallExpr 0x559be55e48a0 <col:23, col:56> 'double'
|   |     |-ImplicitCastExpr 0x559be55e4888 <col:23> 'double (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be55e4478 <col:23> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |     `-CallExpr 0x559be55e4828 <col:29, col:55> 'double'
|   |       |-ImplicitCastExpr 0x559be55e4810 <col:29> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x559be55e46c8 <col:29> 'double (double, double)' Function 0x559be55e4500 'pow' 'double (double, double)'
|   |       |-CallExpr 0x559be55e47a0 <col:33, col:50> 'double'
|   |       | |-ImplicitCastExpr 0x559be55e4788 <col:33> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x559be55e46f0 <col:33> 'double (double, double)' Function 0x559be55e4500 'pow' 'double (double, double)'
|   |       | |-FloatingLiteral 0x559be55e4718 <col:37> 'double' 1.000000e+01
|   |       | `-ImplicitCastExpr 0x559be55e47d8 <col:42> 'double' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x559be55e4738 <col:42> 'double' lvalue Var 0x559be55e40f8 'logr_min' 'double'
|   |       `-FloatingLiteral 0x559be55e47f0 <col:53> 'double' 2.000000e+00
|   |-DeclStmt 0x559be55e4b40 <line:12:3, col:57>
|   | `-VarDecl 0x559be55e4900 <col:3, col:56> col:10 used logrSQ_max 'double' cinit
|   |   `-CallExpr 0x559be55e4b10 <col:23, col:56> 'double'
|   |     |-ImplicitCastExpr 0x559be55e4af8 <col:23> 'double (*)(double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be55e4960 <col:23> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |     `-CallExpr 0x559be55e4ac0 <col:29, col:55> 'double'
|   |       |-ImplicitCastExpr 0x559be55e4aa8 <col:29> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x559be55e4988 <col:29> 'double (double, double)' Function 0x559be55e4500 'pow' 'double (double, double)'
|   |       |-CallExpr 0x559be55e4a38 <col:33, col:50> 'double'
|   |       | |-ImplicitCastExpr 0x559be55e4a20 <col:33> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x559be55e49b0 <col:33> 'double (double, double)' Function 0x559be55e4500 'pow' 'double (double, double)'
|   |       | |-FloatingLiteral 0x559be55e49d8 <col:37> 'double' 1.000000e+01
|   |       | `-ImplicitCastExpr 0x559be55e4a70 <col:42> 'double' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x559be55e49f8 <col:42> 'double' lvalue Var 0x559be55e41c8 'logr_max' 'double'
|   |       `-FloatingLiteral 0x559be55e4a88 <col:53> 'double' 2.000000e+00
|   |-DeclStmt 0x559be55e4c08 <line:13:3, col:27>
|   | `-VarDecl 0x559be55e4b70 <col:3, col:26> col:12 errorcounts 'long' cinit
|   |   `-ImplicitCastExpr 0x559be55e4bf0 <col:26> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x559be55e4bd0 <col:26> 'int' 0
|   |-CallExpr 0x559be55e4cd0 <line:14:3, col:21> 'int'
|   | |-ImplicitCastExpr 0x559be55e4cb8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55e4c20 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55e4d18 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55e4d00 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55e4c88 <col:10> 'char [9]' lvalue "line104\n"
|   |-DeclStmt 0x559be55e4ee8 <line:15:3, col:37>
|   | `-VarDecl 0x559be55e4db0 <col:3, col:36> col:12 used distance_counts 'long [15]' cinit
|   |   `-InitListExpr 0x559be55e4e78 <col:34, col:36> 'long [15]'
|   |     |-array filler
|   |     | `-ImplicitValueInitExpr 0x559be55e4ed8 <<invalid sloc>> 'long'
|   |     `-ImplicitCastExpr 0x559be55e4eb8 <col:35> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x559be55e4e10 <col:35> 'int' 0
|   |-DeclStmt 0x559be55e5080 <line:16:3, col:39>
|   | `-VarDecl 0x559be55e4f48 <col:3, col:38> col:12 used distance20_counts 'long [15]' cinit
|   |   `-InitListExpr 0x559be55e5010 <col:36, col:38> 'long [15]'
|   |     |-array filler
|   |     | `-ImplicitValueInitExpr 0x559be55e5070 <<invalid sloc>> 'long'
|   |     `-ImplicitCastExpr 0x559be55e5050 <col:37> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x559be55e4fa8 <col:37> 'int' 0
|   |-DeclStmt 0x559be55e5218 <line:17:3, col:40>
|   | `-VarDecl 0x559be55e50e0 <col:3, col:39> col:12 used distance20z_counts 'long [15]' cinit
|   |   `-InitListExpr 0x559be55e51a8 <col:37, col:39> 'long [15]'
|   |     |-array filler
|   |     | `-ImplicitValueInitExpr 0x559be55e5208 <<invalid sloc>> 'long'
|   |     `-ImplicitCastExpr 0x559be55e51e8 <col:38> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x559be55e5140 <col:38> 'int' 0
|   |-DeclStmt 0x559be55e53b0 <line:18:3, col:41>
|   | `-VarDecl 0x559be55e5278 <col:3, col:40> col:12 used randdistance_counts 'long [15]' cinit
|   |   `-InitListExpr 0x559be55e5340 <col:38, col:40> 'long [15]'
|   |     |-array filler
|   |     | `-ImplicitValueInitExpr 0x559be55e53a0 <<invalid sloc>> 'long'
|   |     `-ImplicitCastExpr 0x559be55e5380 <col:39> 'long' <IntegralCast>
|   |       `-IntegerLiteral 0x559be55e52d8 <col:39> 'int' 0
|   |-DeclStmt 0x559be55e59b0 <line:19:3, col:29>
|   | `-VarDecl 0x559be55e5450 <col:3, col:28> col:10 used Xi_func 'double [15]' cinit
|   |   `-InitListExpr 0x559be55e5958 <col:24, col:28> 'double [15]'
|   |     |-array filler
|   |     | `-ImplicitValueInitExpr 0x559be55e59a0 <<invalid sloc>> 'double'
|   |     `-FloatingLiteral 0x559be55e54b0 <col:25> 'double' 0.000000e+00
|   |-DeclStmt 0x559be55e5b30 <line:20:3, col:31>
|   | `-VarDecl 0x559be55e5a10 <col:3, col:30> col:10 used Xi20_func 'double [15]' cinit
|   |   `-InitListExpr 0x559be55e5ad8 <col:26, col:30> 'double [15]'
|   |     |-array filler
|   |     | `-ImplicitValueInitExpr 0x559be55e5b20 <<invalid sloc>> 'double'
|   |     `-FloatingLiteral 0x559be55e5a70 <col:27> 'double' 0.000000e+00
|   |-DeclStmt 0x559be55e5cb0 <line:21:3, col:32>
|   | `-VarDecl 0x559be55e5b90 <col:3, col:31> col:10 used Xi20z_func 'double [15]' cinit
|   |   `-InitListExpr 0x559be55e5c58 <col:27, col:31> 'double [15]'
|   |     |-array filler
|   |     | `-ImplicitValueInitExpr 0x559be55e5ca0 <<invalid sloc>> 'double'
|   |     `-FloatingLiteral 0x559be55e5bf0 <col:28> 'double' 0.000000e+00
|   |-CallExpr 0x559be55e5d78 <line:22:3, col:22> 'int'
|   | |-ImplicitCastExpr 0x559be55e5d60 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55e5cc8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55e5dc0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55e5da8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55e5d28 <col:10> 'char [10]' lvalue "Line 118\n"
|   |-DeclStmt 0x559be55e5e50 <line:23:3, col:17>
|   | `-VarDecl 0x559be55e5df0 <col:3, col:7> col:7 dist_index 'int'
|   |-DeclStmt 0x559be55e5ee0 <line:24:3, col:19>
|   | `-VarDecl 0x559be55e5e80 <col:3, col:7> col:7 used distSQ_index 'int'
|   |-DeclStmt 0x559be55e5fa8 <line:25:3, col:33>
|   | `-VarDecl 0x559be55e5f10 <col:3, col:28> col:12 used FILELENGTH20r 'long' cinit
|   |   `-ImplicitCastExpr 0x559be55e5f90 <col:28> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x559be55e5f70 <col:28> 'int' 28162
|   |-DeclStmt 0x559be55e6070 <line:26:3, col:33>
|   | `-VarDecl 0x559be55e5fd8 <col:3, col:28> col:12 used FILELENGTH20z 'long' cinit
|   |   `-ImplicitCastExpr 0x559be55e6058 <col:28> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x559be55e6038 <col:28> 'int' 28383
|   |-DeclStmt 0x559be55e6138 <line:27:3, col:32>
|   | `-VarDecl 0x559be55e60a0 <col:3, col:28> col:12 used FILELENGTH21r 'long' cinit
|   |   `-ImplicitCastExpr 0x559be55e6120 <col:28> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x559be55e6100 <col:28> 'int' 5495
|   |-DeclStmt 0x559be55e6200 <line:28:3, col:34>
|   | `-VarDecl 0x559be55e6168 <col:3, col:29> col:12 used FILELENGTHrand 'long' cinit
|   |   `-ImplicitCastExpr 0x559be55e61e8 <col:29> 'long' <IntegralCast>
|   |     `-IntegerLiteral 0x559be55e61c8 <col:29> 'int' 42654
|   |-DeclStmt 0x559be55e63b8 <line:29:3, col:60>
|   | `-VarDecl 0x559be55e6298 <col:3, col:38> col:21 used r21_datafile 'const char [21]' static cinit
|   |   `-StringLiteral 0x559be55e6338 <col:38> 'const char [21]' lvalue "SDSS_Mr21_rspace.dat"
|   |-IfStmt 0x559be55e8a30 <line:31:3, line:35:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be55e8a10 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be55e89f0 <line:32:3, line:35:3>
|   | | |-CallExpr 0x559be55e6730 <line:33:5, col:53> 'int'
|   | | | |-ImplicitCastExpr 0x559be55e6718 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be55e6668 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be55e6778 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be55e6760 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be55e66c8 <col:12> 'char [39]' lvalue "input_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be55e89c0 <line:34:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be55e89a8 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be55e68d0 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be55e8960 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-CallExpr 0x559be55e8b30 <line:37:3, col:48> 'int'
|   | |-ImplicitCastExpr 0x559be55e8b18 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55e8a68 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55e8b78 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55e8b60 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55e8ac8 <col:10> 'char [36]' lvalue "Opened file - Begining assignment.\n"
|   |-DeclStmt 0x559be55e8c48 <line:38:3, col:34>
|   | `-VarDecl 0x559be55e8ba8 <col:3, col:21> col:12 used N_data 'long' cinit
|   |   `-ImplicitCastExpr 0x559be55e8c30 <col:21> 'long' <LValueToRValue>
|   |     `-DeclRefExpr 0x559be55e8c08 <col:21> 'long' lvalue Var 0x559be55e60a0 'FILELENGTH21r' 'long'
|   |-DeclStmt 0x559be55e8d60 <line:39:3, col:25>
|   | `-VarDecl 0x559be55e8d00 <col:3, col:24> col:10 used RA_LIST 'double [N_data]'
|   |-DeclStmt 0x559be55e8e80 <line:40:3, col:26>
|   | `-VarDecl 0x559be55e8e20 <col:3, col:25> col:10 used DEC_LIST 'double [N_data]'
|   |-DeclStmt 0x559be55e8fa0 <line:41:3, col:24>
|   | `-VarDecl 0x559be55e8f40 <col:3, col:23> col:10 used Z_LIST 'double [N_data]'
|   |-ForStmt 0x559be55ea0a8 <line:42:3, line:52:3>
|   | |-BinaryOperator 0x559be55e9018 <line:42:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be55e8fb8 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be55e9000 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be55e8fe0 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be55e90c0 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be55e9090 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be55e9040 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be55e90a8 <col:19> 'long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559be55e9068 <col:19> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   | |-UnaryOperator 0x559be55e9110 <col:27, col:28> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be55e90e8 <col:27> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be55ea090 <line:43:3, line:52:3>
|   |   `-IfStmt 0x559be55ea058 <line:47:5, line:50:5>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x559be55e9868 <line:47:9, col:25> 'int' '>='
|   |     | |-ImplicitCastExpr 0x559be55e9850 <col:9> 'long' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x559be55e9768 <col:9> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     | `-ParenExpr 0x559be55e9830 <col:14, col:25> 'long'
|   |     |   `-BinaryOperator 0x559be55e9808 <col:15, col:24> 'long' '-'
|   |     |     |-ImplicitCastExpr 0x559be55e97d8 <col:15> 'long' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x559be55e9790 <col:15> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |     |     `-ImplicitCastExpr 0x559be55e97f0 <col:24> 'long' <IntegralCast>
|   |     |       `-IntegerLiteral 0x559be55e97b8 <col:24> 'int' 2
|   |     |-CompoundStmt 0x559be55ea040 <line:48:5, line:50:5>
|   |     | `-CallExpr 0x559be55e9fc0 <line:49:7, col:70> 'int'
|   |     |   |-ImplicitCastExpr 0x559be55e9fa8 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x559be55e9890 <col:7> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |   |-ImplicitCastExpr 0x559be55ea010 <col:14> 'const char *' <BitCast>
|   |     |   | `-ImplicitCastExpr 0x559be55e9ff8 <col:14> 'char *' <ArrayToPointerDecay>
|   |     |   |   `-StringLiteral 0x559be55e98f8 <col:14> 'char [42]' lvalue "Close or exceeded N_data limit. RA: %lf \n"
|   |     |   `-ImplicitCastExpr 0x559be55ea028 <col:60, col:69> 'double' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x559be55e9f80 <col:60, col:69> 'double' lvalue
|   |     |       |-ImplicitCastExpr 0x559be55e9f50 <col:60> 'double *' <ArrayToPointerDecay>
|   |     |       | `-DeclRefExpr 0x559be55e9f00 <col:60> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   |     |       `-ImplicitCastExpr 0x559be55e9f68 <col:68> 'long' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x559be55e9f28 <col:68> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     `-<<<NULL>>>
|   |-CallExpr 0x559be55ea2e8 <line:55:3, col:27> 'int'
|   | |-ImplicitCastExpr 0x559be55ea2d0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55ea238 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55ea330 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55ea318 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55ea298 <col:10> 'char [15]' lvalue "Closing File.\n"
|   |-CallExpr 0x559be55ea408 <line:56:3, col:39> 'int'
|   | |-ImplicitCastExpr 0x559be55ea3f0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55ea348 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55ea450 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55ea438 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55ea3a8 <col:10> 'char [27]' lvalue "Beginning Nested Loops...\n"
|   |-DeclStmt 0x559be55ea4e0 <line:57:3, col:11>
|   | `-VarDecl 0x559be55ea480 <col:3, col:10> col:10 D 'double'
|   |-DeclStmt 0x559be55ea570 <line:58:3, col:14>
|   | `-VarDecl 0x559be55ea510 <col:3, col:10> col:10 logD 'double'
|   |-DeclStmt 0x559be55ea600 <line:59:3, col:13>
|   | `-VarDecl 0x559be55ea5a0 <col:3, col:10> col:10 used DSQ 'double'
|   |-DeclStmt 0x559be55ea690 <line:60:3, col:16>
|   | `-VarDecl 0x559be55ea630 <col:3, col:10> col:10 used logDSQ 'double'
|   |-DeclStmt 0x559be55ea758 <line:61:3, col:15>
|   | `-VarDecl 0x559be55ea6c0 <col:3, col:14> col:10 used r 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55ea740 <col:14> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55ea720 <col:14> 'int' 0
|   |-DeclStmt 0x559be55ea820 <line:62:3, col:21>
|   | `-VarDecl 0x559be55ea788 <col:3, col:20> col:10 used DEC_rad 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55ea808 <col:20> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55ea7e8 <col:20> 'int' 0
|   |-DeclStmt 0x559be55ea8e8 <line:63:3, col:20>
|   | `-VarDecl 0x559be55ea850 <col:3, col:19> col:10 used RA_rad 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55ea8d0 <col:19> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55ea8b0 <col:19> 'int' 0
|   |-DeclStmt 0x559be55ea9b0 <line:64:3, col:16>
|   | `-VarDecl 0x559be55ea918 <col:3, col:15> col:10 used x1 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55ea998 <col:15> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55ea978 <col:15> 'int' 0
|   |-DeclStmt 0x559be55eaa78 <line:65:3, col:16>
|   | `-VarDecl 0x559be55ea9e0 <col:3, col:15> col:10 used y1 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55eaa60 <col:15> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55eaa40 <col:15> 'int' 0
|   |-DeclStmt 0x559be55eab40 <line:66:3, col:16>
|   | `-VarDecl 0x559be55eaaa8 <col:3, col:15> col:10 used z1 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55eab28 <col:15> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55eab08 <col:15> 'int' 0
|   |-DeclStmt 0x559be55eac08 <line:67:3, col:16>
|   | `-VarDecl 0x559be55eab70 <col:3, col:15> col:10 used rj 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55eabf0 <col:15> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55eabd0 <col:15> 'int' 0
|   |-DeclStmt 0x559be55eacd0 <line:68:3, col:22>
|   | `-VarDecl 0x559be55eac38 <col:3, col:21> col:10 used DEC_radj 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55eacb8 <col:21> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55eac98 <col:21> 'int' 0
|   |-DeclStmt 0x559be55ead98 <line:69:3, col:21>
|   | `-VarDecl 0x559be55ead00 <col:3, col:20> col:10 used RA_radj 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55ead80 <col:20> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55ead60 <col:20> 'int' 0
|   |-DeclStmt 0x559be55eae60 <line:70:3, col:16>
|   | `-VarDecl 0x559be55eadc8 <col:3, col:15> col:10 used x2 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55eae48 <col:15> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55eae28 <col:15> 'int' 0
|   |-DeclStmt 0x559be55ec848 <line:71:3, col:16>
|   | `-VarDecl 0x559be55eae90 <col:3, col:15> col:10 used y2 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55ec830 <col:15> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55ec810 <col:15> 'int' 0
|   |-DeclStmt 0x559be55ec910 <line:72:3, col:16>
|   | `-VarDecl 0x559be55ec878 <col:3, col:15> col:10 used z2 'double' cinit
|   |   `-ImplicitCastExpr 0x559be55ec8f8 <col:15> 'double' <IntegralToFloating>
|   |     `-IntegerLiteral 0x559be55ec8d8 <col:15> 'int' 0
|   |-BinaryOperator 0x559be55ec970 <line:73:3, col:11> 'int' '='
|   | |-DeclRefExpr 0x559be55ec928 <col:3> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   | `-IntegerLiteral 0x559be55ec950 <col:11> 'int' 50
|   |-OMPParallelDirective 0x559be55f9dd0 <line:74:11, col:195>
|   | |-OMPSharedClause 0x559be55eca88 <col:24, col:86>
|   | | |-DeclRefExpr 0x559be55ec998 <col:32> 'double [N_data]' lvalue Var 0x559be55e8f40 'Z_LIST' 'double [N_data]'
|   | | |-DeclRefExpr 0x559be55ec9c0 <col:40> 'double [N_data]' lvalue Var 0x559be55e8e20 'DEC_LIST' 'double [N_data]'
|   | | |-DeclRefExpr 0x559be55ec9e8 <col:50> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   | | |-DeclRefExpr 0x559be55eca10 <col:59> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   | | |-DeclRefExpr 0x559be55eca38 <col:67> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   | | `-DeclRefExpr 0x559be55eca60 <col:79> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   | |-OMPPrivateClause 0x559be55eeba8 <col:86, col:195>
|   | | |-DeclRefExpr 0x559be55ecad0 <col:95> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   | | |-DeclRefExpr 0x559be55ecaf8 <col:100> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   | | |-DeclRefExpr 0x559be55ecb20 <col:108> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   | | |-DeclRefExpr 0x559be55ecb48 <col:111> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   | | |-DeclRefExpr 0x559be55ecb70 <col:115> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   | | |-DeclRefExpr 0x559be55ecb98 <col:124> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   | | |-DeclRefExpr 0x559be55ecbc0 <col:134> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   | | |-DeclRefExpr 0x559be55ecbe8 <col:142> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   | | |-DeclRefExpr 0x559be55ecc10 <col:151> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   | | |-DeclRefExpr 0x559be55ecc38 <col:155> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   | | |-DeclRefExpr 0x559be55ecc60 <col:159> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   | | |-DeclRefExpr 0x559be55ecc88 <col:163> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   | | |-DeclRefExpr 0x559be55eccb0 <col:167> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   | | |-DeclRefExpr 0x559be55eccd8 <col:171> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   | | |-DeclRefExpr 0x559be55ecd00 <col:175> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   | | |-DeclRefExpr 0x559be55ecd28 <col:189> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-DeclRefExpr 0x559be55ecd50 <col:192> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   | `-CapturedStmt 0x559be55f9ca8 <line:75:3, line:123:3>
|   |   |-CapturedDecl 0x559be55eede8 <<invalid sloc>> <invalid sloc>
|   |   | |-CompoundStmt 0x559be55f9c70 <line:75:3, line:123:3>
|   |   | | |-CallExpr 0x559be55ef0d0 <line:76:5, col:27> 'int'
|   |   | | | |-ImplicitCastExpr 0x559be55ef0b8 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559be55ef070 <col:5> 'int ()' Function 0x559be55eefc0 'omp_set_num_threads' 'int ()'
|   |   | | | `-IntegerLiteral 0x559be55ef098 <col:25> 'int' 32
|   |   | | |-DeclStmt 0x559be55ef1a8 <line:77:5, col:34>
|   |   | | | `-VarDecl 0x559be55ef148 <col:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | | |-CallExpr 0x559be55ef620 <line:78:5, col:67> 'void *'
|   |   | | | |-ImplicitCastExpr 0x559be55ef608 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559be55ef3e0 <col:5> 'void *(void *, int, unsigned long)' Function 0x559be55ef208 'memset' 'void *(void *, int, unsigned long)'
|   |   | | | |-ImplicitCastExpr 0x559be55ef678 <col:12> 'void *' <BitCast>
|   |   | | | | `-ImplicitCastExpr 0x559be55ef660 <col:12> 'long *' <ArrayToPointerDecay>
|   |   | | | |   `-DeclRefExpr 0x559be55ef408 <col:12> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   | | | |-IntegerLiteral 0x559be55ef430 <col:30> 'int' 0
|   |   | | | `-BinaryOperator 0x559be55ef5a0 <col:33, col:66> 'unsigned long' '*'
|   |   | | |   |-ImplicitCastExpr 0x559be55ef588 <col:33> 'unsigned long' <IntegralCast>
|   |   | | |   | `-IntegerLiteral 0x559be55ef450 <col:33> 'int' 15
|   |   | | |   `-ParenExpr 0x559be55ef568 <col:38, col:66> 'unsigned long'
|   |   | | |     `-UnaryExprOrTypeTraitExpr 0x559be55ef548 <col:39, col:65> 'unsigned long' sizeof
|   |   | | |       `-ParenExpr 0x559be55ef528 <col:45, col:65> 'long' lvalue
|   |   | | |         `-ArraySubscriptExpr 0x559be55ef500 <col:46, col:64> 'long' lvalue
|   |   | | |           |-ImplicitCastExpr 0x559be55ef4e8 <col:46> 'long *' <ArrayToPointerDecay>
|   |   | | |           | `-DeclRefExpr 0x559be55ef470 <col:46> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   | | |           `-IntegerLiteral 0x559be55ef498 <col:63> 'int' 0
|   |   | | |-OMPForDirective 0x559be55f9338 <line:79:13, col:20>
|   |   | | | |-CapturedStmt 0x559be55f7ad0 <line:80:5, line:113:5>
|   |   | | | | |-CapturedDecl 0x559be55ef788 <<invalid sloc>> <invalid sloc>
|   |   | | | | | |-ForStmt 0x559be55f5a08 <line:80:5, line:113:5>
|   |   | | | | | | |-BinaryOperator 0x559be55ef980 <line:80:10, col:14> 'long' '='
|   |   | | | | | | | |-DeclRefExpr 0x559be55ef898 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ImplicitCastExpr 0x559be55ef968 <col:14> 'long' <IntegralCast>
|   |   | | | | | | |   `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | | | | | |-<<<NULL>>>
|   |   | | | | | | |-BinaryOperator 0x559be55effd8 <col:17, col:32> 'int' '<'
|   |   | | | | | | | |-ImplicitCastExpr 0x559be55effc0 <col:17> 'long' <LValueToRValue>
|   |   | | | | | | | | `-DeclRefExpr 0x559be55ef9a8 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ParenExpr 0x559be55effa0 <col:21, col:32> 'long'
|   |   | | | | | | |   `-BinaryOperator 0x559be55efb58 <col:22, col:31> 'long' '-'
|   |   | | | | | | |     |-ImplicitCastExpr 0x559be55efb28 <col:22> 'long' <LValueToRValue>
|   |   | | | | | | |     | `-DeclRefExpr 0x559be55ef9d0 <col:22> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   | | | | | | |     `-ImplicitCastExpr 0x559be55efb40 <col:31> 'long' <IntegralCast>
|   |   | | | | | | |       `-IntegerLiteral 0x559be55efb08 <col:31> 'int' 1
|   |   | | | | | | |-UnaryOperator 0x559be55f0028 <col:35, col:37> 'long' prefix '++'
|   |   | | | | | | | `-DeclRefExpr 0x559be55f0000 <col:37> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | `-CompoundStmt 0x559be55f59c0 <line:81:5, line:113:5>
|   |   | | | | | |   |-BinaryOperator 0x559be55f0430 <line:82:7, col:27> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55f0078 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55f0408 <col:11, col:27> 'double' '*'
|   |   | | | | | |   |   |-FloatingLiteral 0x559be55f0128 <col:11> 'double' 2.998000e+03
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be55f03f0 <col:19, col:27> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-ArraySubscriptExpr 0x559be55f03c8 <col:19, col:27> 'double' lvalue
|   |   | | | | | |   |       |-ImplicitCastExpr 0x559be55f0398 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |       | `-DeclRefExpr 0x559be55f0208 <col:19> 'double [N_data]' lvalue Var 0x559be55e8f40 'Z_LIST' 'double [N_data]'
|   |   | | | | | |   |       `-ImplicitCastExpr 0x559be55f03b0 <col:26> 'long' <LValueToRValue>
|   |   | | | | | |   |         `-DeclRefExpr 0x559be55f0370 <col:26> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |-BinaryOperator 0x559be55f0940 <line:83:7, col:31> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55f0458 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55f0918 <col:17, col:31> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be55f08e8 <col:17, col:27> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be55f0788 <col:17, col:27> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be55f0758 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be55f05c8 <col:17> 'double [N_data]' lvalue Var 0x559be55e8e20 'DEC_LIST' 'double [N_data]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be55f0770 <col:26> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be55f0730 <col:26> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be55f0900 <col:31> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be55f07b0 <col:31> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be55f0d40 <line:84:7, col:29> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55f0968 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55f0d18 <col:16, col:29> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be55f0ce8 <col:16, col:25> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be55f0c98 <col:16, col:25> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be55f0c68 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be55f0ad8 <col:16> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be55f0c80 <col:24> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be55f0c40 <col:24> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be55f0d00 <col:29> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be55f0cc0 <col:29> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be55f1f48 <line:85:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55f0d68 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55f1f20 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be55f1e50 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be55f1e28 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be55f1e10 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be55f0e18 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be55f1dc8 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be55f1db0 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be55f1d60 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be55f1df8 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be55f1d88 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be55f1ed8 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be55f1ec0 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be55f1e70 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be55f1f08 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be55f1e98 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be55f2390 <line:86:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55f1f70 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55f2368 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be55f2138 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be55f2110 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be55f20f8 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be55f2020 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be55f20b0 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be55f2098 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be55f2048 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be55f20e0 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be55f2070 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be55f2320 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be55f2308 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be55f22b8 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be55f2350 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be55f22e0 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be55f2580 <line:87:7, col:27> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55f23b8 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55f2558 <col:12, col:27> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be55f2540 <col:12> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-DeclRefExpr 0x559be55f2468 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be55f24f8 <col:16, col:27> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be55f24e0 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be55f2490 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be55f2528 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be55f24b8 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   `-ForStmt 0x559be55f5988 <line:88:7, line:111:7>
|   |   | | | | | |     |-BinaryOperator 0x559be55f2690 <line:88:12, col:16> 'long' '='
|   |   | | | | | |     | |-DeclRefExpr 0x559be55f25a8 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ImplicitCastExpr 0x559be55f2678 <col:16> 'long' <IntegralCast>
|   |   | | | | | |     |   `-IntegerLiteral 0x559be55f2658 <col:16> 'int' 0
|   |   | | | | | |     |-<<<NULL>>>
|   |   | | | | | |     |-BinaryOperator 0x559be55f27b8 <col:19, col:34> 'int' '<'
|   |   | | | | | |     | |-ImplicitCastExpr 0x559be55f27a0 <col:19> 'long' <LValueToRValue>
|   |   | | | | | |     | | `-DeclRefExpr 0x559be55f26b8 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ParenExpr 0x559be55f2780 <col:23, col:34> 'long'
|   |   | | | | | |     |   `-BinaryOperator 0x559be55f2758 <col:24, col:33> 'long' '-'
|   |   | | | | | |     |     |-ImplicitCastExpr 0x559be55f2728 <col:24> 'long' <LValueToRValue>
|   |   | | | | | |     |     | `-DeclRefExpr 0x559be55f26e0 <col:24> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   | | | | | |     |     `-ImplicitCastExpr 0x559be55f2740 <col:33> 'long' <IntegralCast>
|   |   | | | | | |     |       `-IntegerLiteral 0x559be55f2708 <col:33> 'int' 1
|   |   | | | | | |     |-UnaryOperator 0x559be55f2808 <col:37, col:39> 'long' prefix '++'
|   |   | | | | | |     | `-DeclRefExpr 0x559be55f27e0 <col:39> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     `-CompoundStmt 0x559be55f5970 <line:89:7, line:111:7>
|   |   | | | | | |       `-IfStmt 0x559be55f5938 <line:90:9, line:109:9>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-BinaryOperator 0x559be55f28a8 <line:90:13, col:18> 'int' '!='
|   |   | | | | | |         | |-ImplicitCastExpr 0x559be55f2878 <col:13> 'long' <LValueToRValue>
|   |   | | | | | |         | | `-DeclRefExpr 0x559be55f2828 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | `-ImplicitCastExpr 0x559be55f2890 <col:18> 'long' <LValueToRValue>
|   |   | | | | | |         |   `-DeclRefExpr 0x559be55f2850 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |         |-CompoundStmt 0x559be55f58d8 <line:91:9, line:109:9>
|   |   | | | | | |         | |-BinaryOperator 0x559be55f2a88 <line:92:11, col:32> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f28d0 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be55f2a60 <col:16, col:32> 'double' '*'
|   |   | | | | | |         | |   |-FloatingLiteral 0x559be55f2980 <col:16> 'double' 2.998000e+03
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be55f2a48 <col:24, col:32> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-ArraySubscriptExpr 0x559be55f2a20 <col:24, col:32> 'double' lvalue
|   |   | | | | | |         | |       |-ImplicitCastExpr 0x559be55f29f0 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |       | `-DeclRefExpr 0x559be55f29a0 <col:24> 'double [N_data]' lvalue Var 0x559be55e8f40 'Z_LIST' 'double [N_data]'
|   |   | | | | | |         | |       `-ImplicitCastExpr 0x559be55f2a08 <col:31> 'long' <LValueToRValue>
|   |   | | | | | |         | |         `-DeclRefExpr 0x559be55f29c8 <col:31> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f2c88 <line:93:11, col:36> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f2ab0 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be55f2c60 <col:22, col:36> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be55f2c30 <col:22, col:32> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be55f2be0 <col:22, col:32> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be55f2bb0 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be55f2b60 <col:22> 'double [N_data]' lvalue Var 0x559be55e8e20 'DEC_LIST' 'double [N_data]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be55f2bc8 <col:31> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be55f2b88 <col:31> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be55f2c48 <col:36> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be55f2c08 <col:36> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f3598 <line:94:11, col:34> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f2cb0 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be55f3570 <col:21, col:34> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be55f3540 <col:21, col:30> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be55f34f0 <col:21, col:30> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be55f34c0 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be55f3470 <col:21> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be55f34d8 <col:29> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be55f3498 <col:29> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be55f3558 <col:34> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be55f3518 <col:34> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f3880 <line:95:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f35c0 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be55f3858 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be55f3788 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be55f3760 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be55f3748 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be55f3670 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be55f3700 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be55f36e8 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be55f3698 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be55f3730 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be55f36c0 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be55f3810 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be55f37f8 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be55f37a8 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be55f3840 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be55f37d0 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f3b68 <line:96:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f38a8 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be55f3b40 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be55f3a70 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be55f3a48 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be55f3a30 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be55f3958 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be55f39e8 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be55f39d0 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be55f3980 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be55f3a18 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be55f39a8 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be55f3af8 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be55f3ae0 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be55f3a90 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be55f3b28 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be55f3ab8 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f3d58 <line:97:11, col:33> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f3b90 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be55f3d30 <col:16, col:33> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be55f3d18 <col:16> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be55f3c40 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be55f3cd0 <col:21, col:33> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be55f3cb8 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be55f3c68 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be55f3d00 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be55f3c90 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f4428 <line:98:11, col:93> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f3d80 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be55f4400 <col:17, col:93> 'double' '+'
|   |   | | | | | |         | |   |-ParenExpr 0x559be55f4208 <col:17, col:67> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be55f41e0 <col:18, col:66> 'double' '+'
|   |   | | | | | |         | |   |   |-ParenExpr 0x559be55f3fe8 <col:18, col:40> 'double'
|   |   | | | | | |         | |   |   | `-BinaryOperator 0x559be55f3fc0 <col:19, col:39> 'double' '*'
|   |   | | | | | |         | |   |   |   |-ParenExpr 0x559be55f3ed8 <col:19, col:27> 'double'
|   |   | | | | | |         | |   |   |   | `-BinaryOperator 0x559be55f3eb0 <col:20, col:25> 'double' '-'
|   |   | | | | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be55f3e80 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |   | `-DeclRefExpr 0x559be55f3e30 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be55f3e98 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |     `-DeclRefExpr 0x559be55f3e58 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   |   `-ParenExpr 0x559be55f3fa0 <col:31, col:39> 'double'
|   |   | | | | | |         | |   |   |     `-BinaryOperator 0x559be55f3f78 <col:32, col:37> 'double' '-'
|   |   | | | | | |         | |   |   |       |-ImplicitCastExpr 0x559be55f3f48 <col:32> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |       | `-DeclRefExpr 0x559be55f3ef8 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |       `-ImplicitCastExpr 0x559be55f3f60 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |         `-DeclRefExpr 0x559be55f3f20 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   `-ParenExpr 0x559be55f41c0 <col:44, col:66> 'double'
|   |   | | | | | |         | |   |     `-BinaryOperator 0x559be55f4198 <col:45, col:65> 'double' '*'
|   |   | | | | | |         | |   |       |-ParenExpr 0x559be55f40b0 <col:45, col:53> 'double'
|   |   | | | | | |         | |   |       | `-BinaryOperator 0x559be55f4088 <col:46, col:51> 'double' '-'
|   |   | | | | | |         | |   |       |   |-ImplicitCastExpr 0x559be55f4058 <col:46> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |   | `-DeclRefExpr 0x559be55f4008 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |       |   `-ImplicitCastExpr 0x559be55f4070 <col:51> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |     `-DeclRefExpr 0x559be55f4030 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   |       `-ParenExpr 0x559be55f4178 <col:57, col:65> 'double'
|   |   | | | | | |         | |   |         `-BinaryOperator 0x559be55f4150 <col:58, col:63> 'double' '-'
|   |   | | | | | |         | |   |           |-ImplicitCastExpr 0x559be55f4120 <col:58> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |           | `-DeclRefExpr 0x559be55f40d0 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |           `-ImplicitCastExpr 0x559be55f4138 <col:63> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |             `-DeclRefExpr 0x559be55f40f8 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   `-ParenExpr 0x559be55f43e0 <col:71, col:93> 'double'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be55f43b8 <col:72, col:92> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be55f42d0 <col:72, col:80> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be55f42a8 <col:73, col:78> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be55f4278 <col:73> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be55f4228 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be55f4290 <col:78> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be55f4250 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be55f4398 <col:84, col:92> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be55f4370 <col:85, col:90> 'double' '-'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be55f4340 <col:85> 'double' <LValueToRValue>
|   |   | | | | | |         | |           | `-DeclRefExpr 0x559be55f42f0 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |           `-ImplicitCastExpr 0x559be55f4358 <col:90> 'double' <LValueToRValue>
|   |   | | | | | |         | |             `-DeclRefExpr 0x559be55f4318 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f4c00 <line:99:11, col:29> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f4aa0 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | | `-CallExpr 0x559be55f4bb8 <col:20, col:29> 'double'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be55f4ba0 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be55f4b50 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be55f4be8 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be55f4b78 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be55f5370 <line:100:11, col:94> 'int' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be55f4c58 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         | | `-CStyleCastExpr 0x559be55f5348 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | | | | |         | |   `-CallExpr 0x559be55f5300 <col:32, col:94> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be55f52e8 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be55f4e68 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be55f52c0 <col:38, col:93> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be55f5048 <col:38, col:58> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be55f5020 <col:39, col:48> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be55f4ff0 <col:39> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be55f4e90 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be55f5008 <col:48> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be55f4eb8 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be55f52a0 <col:62, col:93> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be55f5278 <col:63, col:92> 'double' '/'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be55f5260 <col:63> 'double' <IntegralToFloating>
|   |   | | | | | |         | |           | `-IntegerLiteral 0x559be55f5068 <col:63> 'int' 15
|   |   | | | | | |         | |           `-ParenExpr 0x559be55f5240 <col:68, col:92> 'double'
|   |   | | | | | |         | |             `-BinaryOperator 0x559be55f5218 <col:69, col:82> 'double' '-'
|   |   | | | | | |         | |               |-ImplicitCastExpr 0x559be55f51e8 <col:69> 'double' <LValueToRValue>
|   |   | | | | | |         | |               | `-DeclRefExpr 0x559be55f5088 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | | |         | |               `-ImplicitCastExpr 0x559be55f5200 <col:82> 'double' <LValueToRValue>
|   |   | | | | | |         | |                 `-DeclRefExpr 0x559be55f51c0 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | `-IfStmt 0x559be55f58a0 <line:101:11, line:107:11>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-BinaryOperator 0x559be55f54e8 <line:101:15, col:56> 'int' '&&'
|   |   | | | | | |         |   | |-ParenExpr 0x559be55f5420 <col:15, col:33> 'int'
|   |   | | | | | |         |   | | `-BinaryOperator 0x559be55f53f8 <col:16, col:32> 'int' '>='
|   |   | | | | | |         |   | |   |-ImplicitCastExpr 0x559be55f53e0 <col:16> 'int' <LValueToRValue>
|   |   | | | | | |         |   | |   | `-DeclRefExpr 0x559be55f5398 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | |   `-IntegerLiteral 0x559be55f53c0 <col:32> 'int' 0
|   |   | | | | | |         |   | `-ParenExpr 0x559be55f54c8 <col:38, col:56> 'int'
|   |   | | | | | |         |   |   `-BinaryOperator 0x559be55f54a0 <col:39, col:54> 'int' '<'
|   |   | | | | | |         |   |     |-ImplicitCastExpr 0x559be55f5488 <col:39> 'int' <LValueToRValue>
|   |   | | | | | |         |   |     | `-DeclRefExpr 0x559be55f5440 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be55f5468 <col:54> 'int' 15
|   |   | | | | | |         |   |-CompoundStmt 0x559be55f5880 <line:102:11, line:107:11>
|   |   | | | | | |         |   | |-IfStmt 0x559be55f5668 <line:103:13, line:104:32>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-BinaryOperator 0x559be55f5570 <line:103:17, col:33> 'int' '>='
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be55f5558 <col:17> 'int' <LValueToRValue>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be55f5510 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | | | `-IntegerLiteral 0x559be55f5538 <col:33> 'int' 15
|   |   | | | | | |         |   | | |-CallExpr 0x559be55f5608 <line:104:15, col:32> 'int'
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be55f55f0 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be55f5598 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | | | | |         |   | | | `-ImplicitCastExpr 0x559be55f5650 <col:22> 'const char *' <BitCast>
|   |   | | | | | |         |   | | |   `-ImplicitCastExpr 0x559be55f5638 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | | | | |         |   | | |     `-StringLiteral 0x559be55f55c0 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | | | | |         |   | | `-<<<NULL>>>
|   |   | | | | | |         |   | `-CompoundAssignOperator 0x559be55f5848 <line:106:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | | | | |         |   |   |-ArraySubscriptExpr 0x559be55f57e8 <col:13, col:42> 'long' lvalue
|   |   | | | | | |         |   |   | |-ImplicitCastExpr 0x559be55f57b8 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | | | | |         |   |   | | `-DeclRefExpr 0x559be55f56c8 <col:13> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   | | | | | |         |   |   | `-ImplicitCastExpr 0x559be55f57d0 <col:30> 'int' <LValueToRValue>
|   |   | | | | | |         |   |   |   `-DeclRefExpr 0x559be55f5790 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |   `-ImplicitCastExpr 0x559be55f5830 <col:47> 'long' <IntegralCast>
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be55f5810 <col:47> 'int' 1
|   |   | | | | | |         |   `-<<<NULL>>>
|   |   | | | | | |         `-<<<NULL>>>
|   |   | | | | | `-ImplicitParamDecl 0x559be55ef808 <line:79:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:79:13) *'
|   |   | | | | |-DeclRefExpr 0x559be55ef920 <line:80:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | |-DeclRefExpr 0x559be55efae0 <col:22> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   | | | | |-DeclRefExpr 0x559be55f0100 <line:82:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be55f0348 <col:19> 'double [N_data]' lvalue Var 0x559be55e8f40 'Z_LIST' 'double [N_data]'
|   |   | | | | |-DeclRefExpr 0x559be55f04e0 <line:83:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be55f0708 <col:17> 'double [N_data]' lvalue Var 0x559be55e8e20 'DEC_LIST' 'double [N_data]'
|   |   | | | | |-DeclRefExpr 0x559be55f08c0 <col:31> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f09f0 <line:84:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be55f0c18 <col:16> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   |   | | | | |-DeclRefExpr 0x559be55f0df0 <line:85:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f1ff8 <line:86:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f2440 <line:87:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f2630 <line:88:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | |-DeclRefExpr 0x559be55f2958 <line:92:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f2b38 <line:93:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f2d38 <line:94:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f3648 <line:95:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f3930 <line:96:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f3c18 <line:97:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f3e08 <line:98:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f4b28 <line:99:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f4ce0 <line:100:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | |-DeclRefExpr 0x559be55f4fc8 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55f5198 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | `-DeclRefExpr 0x559be55f5768 <line:106:13> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   | | | |-DeclRefExpr 0x559be55f8660 <line:80:10> 'long' lvalue Var 0x559be55f8600 '.omp.iv' 'long'
|   |   | | | |-ImplicitCastExpr 0x559be55f81b0 <col:5> 'long' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559be55f8188 <col:5> 'long' lvalue OMPCapturedExpr 0x559be55f8128 '.capture_expr.' 'long'
|   |   | | | |-<<<NULL>>>
|   |   | | | |-ImplicitCastExpr 0x559be55f7e90 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | | | | `-BinaryOperator 0x559be55f7e68 <col:14, col:21> 'int' '<'
|   |   | | | |   |-ImplicitCastExpr 0x559be55f7db0 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | | |   `-ImplicitCastExpr 0x559be55f7e50 <col:21> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be55f7e28 <col:21> 'long' lvalue OMPCapturedExpr 0x559be55f7dc8 '.capture_expr.' 'long'
|   |   | | | |-BinaryOperator 0x559be55f86f8 <col:10> 'int' '<='
|   |   | | | | |-ImplicitCastExpr 0x559be55f86c8 <col:10> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be55f8660 <col:10> 'long' lvalue Var 0x559be55f8600 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be55f86e0 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be55f8378 <col:10> 'long' lvalue Var 0x559be55f8318 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be55f86a0 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55f8660 <col:10> 'long' lvalue Var 0x559be55f8600 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be55f8688 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be55f82a0 <col:10> 'long' lvalue Var 0x559be55f8240 '.omp.lb' 'long'
|   |   | | | |-BinaryOperator 0x559be55f8798 <col:10, <invalid sloc>> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55f8660 <col:10> 'long' lvalue Var 0x559be55f8600 '.omp.iv' 'long'
|   |   | | | | `-BinaryOperator 0x559be55f8770 <col:10, <invalid sloc>> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be55f8740 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be55f8660 <col:10> 'long' lvalue Var 0x559be55f8600 '.omp.iv' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be55f8758 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     `-IntegerLiteral 0x559be55f8720 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclStmt 0x559be55f9308 <<invalid sloc>>
|   |   | | | | |-OMPCapturedExprDecl 0x559be55f7dc8 <col:21, col:32> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | | | `-ParenExpr 0x559be55effa0 <col:21, col:32> 'long'
|   |   | | | | |   `-BinaryOperator 0x559be55efb58 <col:22, col:31> 'long' '-'
|   |   | | | | |     |-ImplicitCastExpr 0x559be55efb28 <col:22> 'long' <LValueToRValue>
|   |   | | | | |     | `-DeclRefExpr 0x559be55ef9d0 <col:22> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   | | | | |     `-ImplicitCastExpr 0x559be55efb40 <col:31> 'long' <IntegralCast>
|   |   | | | | |       `-IntegerLiteral 0x559be55efb08 <col:31> 'int' 1
|   |   | | | | `-OMPCapturedExprDecl 0x559be55f8128 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | |   `-BinaryOperator 0x559be55f8100 <col:5, <invalid sloc>> 'long' '-'
|   |   | | | |     |-BinaryOperator 0x559be55f7fd8 <col:5, col:35> 'long' '/'
|   |   | | | |     | |-ParenExpr 0x559be55f7fa0 <col:5> 'long'
|   |   | | | |     | | `-BinaryOperator 0x559be55f7f78 <col:21, col:35> 'long' '+'
|   |   | | | |     | |   |-BinaryOperator 0x559be55f7f38 <col:21, <invalid sloc>> 'long' '-'
|   |   | | | |     | |   | |-BinaryOperator 0x559be55f7ed8 <col:21, col:14> 'long' '-'
|   |   | | | |     | |   | | |-ImplicitCastExpr 0x559be55f7ea8 <col:21> 'long' <LValueToRValue>
|   |   | | | |     | |   | | | `-DeclRefExpr 0x559be55f7e28 <col:21> 'long' lvalue OMPCapturedExpr 0x559be55f7dc8 '.capture_expr.' 'long'
|   |   | | | |     | |   | | `-ImplicitCastExpr 0x559be55f7ec0 <col:14> 'long' <IntegralCast>
|   |   | | | |     | |   | |   `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | | |     | |   | `-ImplicitCastExpr 0x559be55f7f20 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     | |   |   `-IntegerLiteral 0x559be55f7f00 <<invalid sloc>> 'int' 1
|   |   | | | |     | |   `-ImplicitCastExpr 0x559be55f7f60 <col:35> 'long' <IntegralCast>
|   |   | | | |     | |     `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | | | |     | `-ImplicitCastExpr 0x559be55f7fc0 <col:35> 'long' <IntegralCast>
|   |   | | | |     |   `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | | | |     `-ImplicitCastExpr 0x559be55f80e8 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be55f80c8 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be55f8418 <col:10> 'int' lvalue Var 0x559be55f83b8 '.omp.is_last' 'int'
|   |   | | | |-DeclRefExpr 0x559be55f82a0 <col:10> 'long' lvalue Var 0x559be55f8240 '.omp.lb' 'long'
|   |   | | | |-DeclRefExpr 0x559be55f8378 <col:10> 'long' lvalue Var 0x559be55f8318 '.omp.ub' 'long'
|   |   | | | |-DeclRefExpr 0x559be55f84d8 <col:10> 'long' lvalue Var 0x559be55f8478 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be55f85c0 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55f8378 <col:10> 'long' lvalue Var 0x559be55f8318 '.omp.ub' 'long'
|   |   | | | | `-ConditionalOperator 0x559be55f8590 <col:10> 'long'
|   |   | | | |   |-BinaryOperator 0x559be55f8550 <col:10, col:5> 'int' '>'
|   |   | | | |   | |-ImplicitCastExpr 0x559be55f8538 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | | `-DeclRefExpr 0x559be55f8378 <col:10> 'long' lvalue Var 0x559be55f8318 '.omp.ub' 'long'
|   |   | | | |   | `-ImplicitCastExpr 0x559be55f81b0 <col:5> 'long' <LValueToRValue>
|   |   | | | |   |   `-DeclRefExpr 0x559be55f8188 <col:5> 'long' lvalue OMPCapturedExpr 0x559be55f8128 '.capture_expr.' 'long'
|   |   | | | |   |-ImplicitCastExpr 0x559be55f81b0 <col:5> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be55f8188 <col:5> 'long' lvalue OMPCapturedExpr 0x559be55f8128 '.capture_expr.' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be55f8578 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be55f8378 <col:10> 'long' lvalue Var 0x559be55f8318 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be55f8818 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55f82a0 <col:10> 'long' lvalue Var 0x559be55f8240 '.omp.lb' 'long'
|   |   | | | | `-BinaryOperator 0x559be55f87f0 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be55f87c0 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be55f82a0 <col:10> 'long' lvalue Var 0x559be55f8240 '.omp.lb' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be55f87d8 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be55f84d8 <col:10> 'long' lvalue Var 0x559be55f8478 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be55f8898 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55f8378 <col:10> 'long' lvalue Var 0x559be55f8318 '.omp.ub' 'long'
|   |   | | | | `-BinaryOperator 0x559be55f8870 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be55f8840 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be55f8378 <col:10> 'long' lvalue Var 0x559be55f8318 '.omp.ub' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be55f8858 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be55f84d8 <col:10> 'long' lvalue Var 0x559be55f8478 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be55f8200 <col:5, <invalid sloc>> 'long' '+'
|   |   | | | | |-ImplicitCastExpr 0x559be55f81b0 <col:5> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be55f8188 <col:5> 'long' lvalue OMPCapturedExpr 0x559be55f8128 '.capture_expr.' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be55f81e8 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be55f81c8 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be55f8000 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | |-DeclRefExpr 0x559be55f80a0 <col:5> 'long' lvalue Var 0x559be55f8040 'i' 'long'
|   |   | | | |-BinaryOperator 0x559be55f8900 <col:5, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55f88c0 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be55f88e8 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | | |-BinaryOperator 0x559be55f89e0 <col:5, col:35> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55f88c0 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-BinaryOperator 0x559be55f89b8 <col:14, col:35> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be55f89a0 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | | |   `-BinaryOperator 0x559be55f8978 <col:35> 'long' '*'
|   |   | | | |     |-ImplicitCastExpr 0x559be55f8948 <col:35> 'long' <LValueToRValue>
|   |   | | | |     | `-ParenExpr 0x559be55f8928 <col:35> 'long' lvalue
|   |   | | | |     |   `-DeclRefExpr 0x559be55f8660 <col:10> 'long' lvalue Var 0x559be55f8600 '.omp.iv' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be55f8960 <col:35> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | | | `-BinaryOperator 0x559be55f8aa8 <col:5, col:35> 'long' '='
|   |   | | |   |-DeclRefExpr 0x559be55f88c0 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   `-BinaryOperator 0x559be55f8a80 <col:14, col:35> 'long' '+'
|   |   | | |     |-ImplicitCastExpr 0x559be55f8a68 <col:14> 'long' <IntegralCast>
|   |   | | |     | `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | |     `-BinaryOperator 0x559be55f8a40 <col:35> 'long' '*'
|   |   | | |       |-ParenExpr 0x559be55f8a08 <col:35> 'long'
|   |   | | |       | `-BinaryOperator 0x559be55f7fd8 <col:5, col:35> 'long' '/'
|   |   | | |       |   |-ParenExpr 0x559be55f7fa0 <col:5> 'long'
|   |   | | |       |   | `-BinaryOperator 0x559be55f7f78 <col:21, col:35> 'long' '+'
|   |   | | |       |   |   |-BinaryOperator 0x559be55f7f38 <col:21, <invalid sloc>> 'long' '-'
|   |   | | |       |   |   | |-BinaryOperator 0x559be55f7ed8 <col:21, col:14> 'long' '-'
|   |   | | |       |   |   | | |-ImplicitCastExpr 0x559be55f7ea8 <col:21> 'long' <LValueToRValue>
|   |   | | |       |   |   | | | `-DeclRefExpr 0x559be55f7e28 <col:21> 'long' lvalue OMPCapturedExpr 0x559be55f7dc8 '.capture_expr.' 'long'
|   |   | | |       |   |   | | `-ImplicitCastExpr 0x559be55f7ec0 <col:14> 'long' <IntegralCast>
|   |   | | |       |   |   | |   `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | |       |   |   | `-ImplicitCastExpr 0x559be55f7f20 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | |       |   |   |   `-IntegerLiteral 0x559be55f7f00 <<invalid sloc>> 'int' 1
|   |   | | |       |   |   `-ImplicitCastExpr 0x559be55f7f60 <col:35> 'long' <IntegralCast>
|   |   | | |       |   |     `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | | |       |   `-ImplicitCastExpr 0x559be55f7fc0 <col:35> 'long' <IntegralCast>
|   |   | | |       |     `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | | |       `-ImplicitCastExpr 0x559be55f8a28 <col:35> 'long' <IntegralCast>
|   |   | | |         `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | | `-OMPCriticalDirective 0x559be55f9c30 <line:115:13, col:25>
|   |   | |   `-CapturedStmt 0x559be55f9bc8 <line:116:5, line:122:5>
|   |   | |     |-CapturedDecl 0x559be55f9508 <<invalid sloc>> <invalid sloc>
|   |   | |     | |-CompoundStmt 0x559be55f9bb0 <line:116:5, line:122:5>
|   |   | |     | | `-ForStmt 0x559be55f9b78 <line:117:7, line:120:7>
|   |   | |     | |   |-BinaryOperator 0x559be55f96d0 <line:117:12, col:16> 'long' '='
|   |   | |     | |   | |-DeclRefExpr 0x559be55f95e8 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be55f96b8 <col:16> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be55f9698 <col:16> 'int' 0
|   |   | |     | |   |-<<<NULL>>>
|   |   | |     | |   |-BinaryOperator 0x559be55f9770 <col:19, col:23> 'int' '<'
|   |   | |     | |   | |-ImplicitCastExpr 0x559be55f9740 <col:19> 'long' <LValueToRValue>
|   |   | |     | |   | | `-DeclRefExpr 0x559be55f96f8 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be55f9758 <col:23> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be55f9720 <col:23> 'int' 15
|   |   | |     | |   |-UnaryOperator 0x559be55f97c0 <col:27, col:29> 'long' prefix '++'
|   |   | |     | |   | `-DeclRefExpr 0x559be55f9798 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   `-CompoundStmt 0x559be55f9b60 <line:118:7, line:120:7>
|   |   | |     | |     `-CompoundAssignOperator 0x559be55f9b28 <line:119:9, col:49> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | |     | |       |-ArraySubscriptExpr 0x559be55f99a0 <col:9, col:26> 'long' lvalue
|   |   | |     | |       | |-ImplicitCastExpr 0x559be55f9970 <col:9> 'long *' <ArrayToPointerDecay>
|   |   | |     | |       | | `-DeclRefExpr 0x559be55f97e0 <col:9> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |   | |     | |       | `-ImplicitCastExpr 0x559be55f9988 <col:25> 'long' <LValueToRValue>
|   |   | |     | |       |   `-DeclRefExpr 0x559be55f9948 <col:25> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |       `-ImplicitCastExpr 0x559be55f9b10 <col:31, col:49> 'long' <LValueToRValue>
|   |   | |     | |         `-ArraySubscriptExpr 0x559be55f9ae8 <col:31, col:49> 'long' lvalue
|   |   | |     | |           |-ImplicitCastExpr 0x559be55f9ab8 <col:31> 'long *' <ArrayToPointerDecay>
|   |   | |     | |           | `-DeclRefExpr 0x559be55f99c8 <col:31> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   | |     | |           `-ImplicitCastExpr 0x559be55f9ad0 <col:48> 'long' <LValueToRValue>
|   |   | |     | |             `-DeclRefExpr 0x559be55f9a90 <col:48> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | `-ImplicitParamDecl 0x559be55f9588 <line:115:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:115:13) *'
|   |   | |     |-DeclRefExpr 0x559be55f9670 <line:117:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     |-DeclRefExpr 0x559be55f9920 <line:119:9> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |   | |     `-DeclRefExpr 0x559be55f9a68 <col:31> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   | |-ImplicitParamDecl 0x559be55eee50 <line:74:11> col:11 implicit .global_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be55eeeb0 <col:11> col:11 implicit .bound_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be55eef38 <col:11> col:11 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:74:11) *'
|   |   | |-FunctionDecl 0x559be55eefc0 parent 0x559be5585e38 <<invalid sloc>> line:76:5 implicit used omp_set_num_threads 'int ()'
|   |   | |-VarDecl 0x559be55ef148 <line:77:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | |-RecordDecl 0x559be55ef690 <line:79:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be55ef740 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be55ef8d8 <line:80:10> col:10 implicit 'long &'
|   |   | | |-FieldDecl 0x559be55efa98 <col:22> col:22 implicit 'long &'
|   |   | | |-FieldDecl 0x559be55f00b8 <line:82:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f0148 <line:41:17> col:17 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be55f0300 <line:82:19> col:19 implicit 'double (&)[N_data]'
|   |   | | |-FieldDecl 0x559be55f0498 <line:83:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f0508 <line:40:19> col:19 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be55f06c0 <line:83:17> col:17 implicit 'double (&)[N_data]'
|   |   | | |-FieldDecl 0x559be55f0878 <col:31> col:31 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f09a8 <line:84:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f0a18 <line:39:18> col:18 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be55f0bd0 <line:84:16> col:16 implicit 'double (&)[N_data]'
|   |   | | |-FieldDecl 0x559be55f0da8 <line:85:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f1fb0 <line:86:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f23f8 <line:87:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f25e8 <line:88:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be55f2910 <line:92:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f2af0 <line:93:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f2cf0 <line:94:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f3600 <line:95:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f38e8 <line:96:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f3bd0 <line:97:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f3dc0 <line:98:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f4ae0 <line:99:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f4c98 <line:100:11> col:11 implicit 'int &'
|   |   | | |-FieldDecl 0x559be55f4f80 <col:48> col:48 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55f5150 <col:69> col:69 implicit 'double &'
|   |   | | `-FieldDecl 0x559be55f5720 <line:106:13> col:13 implicit 'long (&)[15]'
|   |   | |-CapturedDecl 0x559be55ef788 <<invalid sloc>> <invalid sloc>
|   |   | | |-ForStmt 0x559be55f5a08 <line:80:5, line:113:5>
|   |   | | | |-BinaryOperator 0x559be55ef980 <line:80:10, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55ef898 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be55ef968 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559be55effd8 <col:17, col:32> 'int' '<'
|   |   | | | | |-ImplicitCastExpr 0x559be55effc0 <col:17> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be55ef9a8 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ParenExpr 0x559be55effa0 <col:21, col:32> 'long'
|   |   | | | |   `-BinaryOperator 0x559be55efb58 <col:22, col:31> 'long' '-'
|   |   | | | |     |-ImplicitCastExpr 0x559be55efb28 <col:22> 'long' <LValueToRValue>
|   |   | | | |     | `-DeclRefExpr 0x559be55ef9d0 <col:22> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be55efb40 <col:31> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be55efb08 <col:31> 'int' 1
|   |   | | | |-UnaryOperator 0x559be55f0028 <col:35, col:37> 'long' prefix '++'
|   |   | | | | `-DeclRefExpr 0x559be55f0000 <col:37> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | `-CompoundStmt 0x559be55f59c0 <line:81:5, line:113:5>
|   |   | | |   |-BinaryOperator 0x559be55f0430 <line:82:7, col:27> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55f0078 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55f0408 <col:11, col:27> 'double' '*'
|   |   | | |   |   |-FloatingLiteral 0x559be55f0128 <col:11> 'double' 2.998000e+03
|   |   | | |   |   `-ImplicitCastExpr 0x559be55f03f0 <col:19, col:27> 'double' <LValueToRValue>
|   |   | | |   |     `-ArraySubscriptExpr 0x559be55f03c8 <col:19, col:27> 'double' lvalue
|   |   | | |   |       |-ImplicitCastExpr 0x559be55f0398 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | |   |       | `-DeclRefExpr 0x559be55f0208 <col:19> 'double [N_data]' lvalue Var 0x559be55e8f40 'Z_LIST' 'double [N_data]'
|   |   | | |   |       `-ImplicitCastExpr 0x559be55f03b0 <col:26> 'long' <LValueToRValue>
|   |   | | |   |         `-DeclRefExpr 0x559be55f0370 <col:26> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |-BinaryOperator 0x559be55f0940 <line:83:7, col:31> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55f0458 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55f0918 <col:17, col:31> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be55f08e8 <col:17, col:27> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be55f0788 <col:17, col:27> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be55f0758 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be55f05c8 <col:17> 'double [N_data]' lvalue Var 0x559be55e8e20 'DEC_LIST' 'double [N_data]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be55f0770 <col:26> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be55f0730 <col:26> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be55f0900 <col:31> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be55f07b0 <col:31> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be55f0d40 <line:84:7, col:29> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55f0968 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55f0d18 <col:16, col:29> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be55f0ce8 <col:16, col:25> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be55f0c98 <col:16, col:25> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be55f0c68 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be55f0ad8 <col:16> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be55f0c80 <col:24> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be55f0c40 <col:24> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be55f0d00 <col:29> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be55f0cc0 <col:29> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be55f1f48 <line:85:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55f0d68 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55f1f20 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be55f1e50 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be55f1e28 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be55f1e10 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be55f0e18 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be55f1dc8 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be55f1db0 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be55f1d60 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be55f1df8 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be55f1d88 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be55f1ed8 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be55f1ec0 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be55f1e70 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be55f1f08 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be55f1e98 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be55f2390 <line:86:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55f1f70 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55f2368 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be55f2138 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be55f2110 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be55f20f8 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be55f2020 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be55f20b0 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be55f2098 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be55f2048 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be55f20e0 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be55f2070 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be55f2320 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be55f2308 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be55f22b8 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be55f2350 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be55f22e0 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be55f2580 <line:87:7, col:27> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55f23b8 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55f2558 <col:12, col:27> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be55f2540 <col:12> 'double' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x559be55f2468 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   `-CallExpr 0x559be55f24f8 <col:16, col:27> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be55f24e0 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be55f2490 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be55f2528 <col:20> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be55f24b8 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   `-ForStmt 0x559be55f5988 <line:88:7, line:111:7>
|   |   | | |     |-BinaryOperator 0x559be55f2690 <line:88:12, col:16> 'long' '='
|   |   | | |     | |-DeclRefExpr 0x559be55f25a8 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ImplicitCastExpr 0x559be55f2678 <col:16> 'long' <IntegralCast>
|   |   | | |     |   `-IntegerLiteral 0x559be55f2658 <col:16> 'int' 0
|   |   | | |     |-<<<NULL>>>
|   |   | | |     |-BinaryOperator 0x559be55f27b8 <col:19, col:34> 'int' '<'
|   |   | | |     | |-ImplicitCastExpr 0x559be55f27a0 <col:19> 'long' <LValueToRValue>
|   |   | | |     | | `-DeclRefExpr 0x559be55f26b8 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ParenExpr 0x559be55f2780 <col:23, col:34> 'long'
|   |   | | |     |   `-BinaryOperator 0x559be55f2758 <col:24, col:33> 'long' '-'
|   |   | | |     |     |-ImplicitCastExpr 0x559be55f2728 <col:24> 'long' <LValueToRValue>
|   |   | | |     |     | `-DeclRefExpr 0x559be55f26e0 <col:24> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   | | |     |     `-ImplicitCastExpr 0x559be55f2740 <col:33> 'long' <IntegralCast>
|   |   | | |     |       `-IntegerLiteral 0x559be55f2708 <col:33> 'int' 1
|   |   | | |     |-UnaryOperator 0x559be55f2808 <col:37, col:39> 'long' prefix '++'
|   |   | | |     | `-DeclRefExpr 0x559be55f27e0 <col:39> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     `-CompoundStmt 0x559be55f5970 <line:89:7, line:111:7>
|   |   | | |       `-IfStmt 0x559be55f5938 <line:90:9, line:109:9>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-BinaryOperator 0x559be55f28a8 <line:90:13, col:18> 'int' '!='
|   |   | | |         | |-ImplicitCastExpr 0x559be55f2878 <col:13> 'long' <LValueToRValue>
|   |   | | |         | | `-DeclRefExpr 0x559be55f2828 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | `-ImplicitCastExpr 0x559be55f2890 <col:18> 'long' <LValueToRValue>
|   |   | | |         |   `-DeclRefExpr 0x559be55f2850 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |         |-CompoundStmt 0x559be55f58d8 <line:91:9, line:109:9>
|   |   | | |         | |-BinaryOperator 0x559be55f2a88 <line:92:11, col:32> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f28d0 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be55f2a60 <col:16, col:32> 'double' '*'
|   |   | | |         | |   |-FloatingLiteral 0x559be55f2980 <col:16> 'double' 2.998000e+03
|   |   | | |         | |   `-ImplicitCastExpr 0x559be55f2a48 <col:24, col:32> 'double' <LValueToRValue>
|   |   | | |         | |     `-ArraySubscriptExpr 0x559be55f2a20 <col:24, col:32> 'double' lvalue
|   |   | | |         | |       |-ImplicitCastExpr 0x559be55f29f0 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |       | `-DeclRefExpr 0x559be55f29a0 <col:24> 'double [N_data]' lvalue Var 0x559be55e8f40 'Z_LIST' 'double [N_data]'
|   |   | | |         | |       `-ImplicitCastExpr 0x559be55f2a08 <col:31> 'long' <LValueToRValue>
|   |   | | |         | |         `-DeclRefExpr 0x559be55f29c8 <col:31> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |-BinaryOperator 0x559be55f2c88 <line:93:11, col:36> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f2ab0 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be55f2c60 <col:22, col:36> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be55f2c30 <col:22, col:32> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be55f2be0 <col:22, col:32> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be55f2bb0 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be55f2b60 <col:22> 'double [N_data]' lvalue Var 0x559be55e8e20 'DEC_LIST' 'double [N_data]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be55f2bc8 <col:31> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be55f2b88 <col:31> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be55f2c48 <col:36> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be55f2c08 <col:36> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be55f3598 <line:94:11, col:34> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f2cb0 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be55f3570 <col:21, col:34> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be55f3540 <col:21, col:30> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be55f34f0 <col:21, col:30> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be55f34c0 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be55f3470 <col:21> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be55f34d8 <col:29> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be55f3498 <col:29> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be55f3558 <col:34> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be55f3518 <col:34> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be55f3880 <line:95:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f35c0 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be55f3858 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be55f3788 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be55f3760 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be55f3748 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be55f3670 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be55f3700 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be55f36e8 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be55f3698 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be55f3730 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be55f36c0 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be55f3810 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be55f37f8 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be55f37a8 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be55f3840 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be55f37d0 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be55f3b68 <line:96:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f38a8 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be55f3b40 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be55f3a70 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be55f3a48 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be55f3a30 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be55f3958 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be55f39e8 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be55f39d0 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be55f3980 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be55f3a18 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be55f39a8 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be55f3af8 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be55f3ae0 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be55f3a90 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be55f3b28 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be55f3ab8 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be55f3d58 <line:97:11, col:33> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f3b90 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be55f3d30 <col:16, col:33> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be55f3d18 <col:16> 'double' <LValueToRValue>
|   |   | | |         | |   | `-DeclRefExpr 0x559be55f3c40 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be55f3cd0 <col:21, col:33> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be55f3cb8 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be55f3c68 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be55f3d00 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be55f3c90 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be55f4428 <line:98:11, col:93> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f3d80 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be55f4400 <col:17, col:93> 'double' '+'
|   |   | | |         | |   |-ParenExpr 0x559be55f4208 <col:17, col:67> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be55f41e0 <col:18, col:66> 'double' '+'
|   |   | | |         | |   |   |-ParenExpr 0x559be55f3fe8 <col:18, col:40> 'double'
|   |   | | |         | |   |   | `-BinaryOperator 0x559be55f3fc0 <col:19, col:39> 'double' '*'
|   |   | | |         | |   |   |   |-ParenExpr 0x559be55f3ed8 <col:19, col:27> 'double'
|   |   | | |         | |   |   |   | `-BinaryOperator 0x559be55f3eb0 <col:20, col:25> 'double' '-'
|   |   | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be55f3e80 <col:20> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |   | `-DeclRefExpr 0x559be55f3e30 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be55f3e98 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |     `-DeclRefExpr 0x559be55f3e58 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   |   `-ParenExpr 0x559be55f3fa0 <col:31, col:39> 'double'
|   |   | | |         | |   |   |     `-BinaryOperator 0x559be55f3f78 <col:32, col:37> 'double' '-'
|   |   | | |         | |   |   |       |-ImplicitCastExpr 0x559be55f3f48 <col:32> 'double' <LValueToRValue>
|   |   | | |         | |   |   |       | `-DeclRefExpr 0x559be55f3ef8 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |       `-ImplicitCastExpr 0x559be55f3f60 <col:37> 'double' <LValueToRValue>
|   |   | | |         | |   |   |         `-DeclRefExpr 0x559be55f3f20 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   `-ParenExpr 0x559be55f41c0 <col:44, col:66> 'double'
|   |   | | |         | |   |     `-BinaryOperator 0x559be55f4198 <col:45, col:65> 'double' '*'
|   |   | | |         | |   |       |-ParenExpr 0x559be55f40b0 <col:45, col:53> 'double'
|   |   | | |         | |   |       | `-BinaryOperator 0x559be55f4088 <col:46, col:51> 'double' '-'
|   |   | | |         | |   |       |   |-ImplicitCastExpr 0x559be55f4058 <col:46> 'double' <LValueToRValue>
|   |   | | |         | |   |       |   | `-DeclRefExpr 0x559be55f4008 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |       |   `-ImplicitCastExpr 0x559be55f4070 <col:51> 'double' <LValueToRValue>
|   |   | | |         | |   |       |     `-DeclRefExpr 0x559be55f4030 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   |       `-ParenExpr 0x559be55f4178 <col:57, col:65> 'double'
|   |   | | |         | |   |         `-BinaryOperator 0x559be55f4150 <col:58, col:63> 'double' '-'
|   |   | | |         | |   |           |-ImplicitCastExpr 0x559be55f4120 <col:58> 'double' <LValueToRValue>
|   |   | | |         | |   |           | `-DeclRefExpr 0x559be55f40d0 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |           `-ImplicitCastExpr 0x559be55f4138 <col:63> 'double' <LValueToRValue>
|   |   | | |         | |   |             `-DeclRefExpr 0x559be55f40f8 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   `-ParenExpr 0x559be55f43e0 <col:71, col:93> 'double'
|   |   | | |         | |     `-BinaryOperator 0x559be55f43b8 <col:72, col:92> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be55f42d0 <col:72, col:80> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be55f42a8 <col:73, col:78> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be55f4278 <col:73> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be55f4228 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be55f4290 <col:78> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be55f4250 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be55f4398 <col:84, col:92> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be55f4370 <col:85, col:90> 'double' '-'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be55f4340 <col:85> 'double' <LValueToRValue>
|   |   | | |         | |           | `-DeclRefExpr 0x559be55f42f0 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |           `-ImplicitCastExpr 0x559be55f4358 <col:90> 'double' <LValueToRValue>
|   |   | | |         | |             `-DeclRefExpr 0x559be55f4318 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |-BinaryOperator 0x559be55f4c00 <line:99:11, col:29> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f4aa0 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | | `-CallExpr 0x559be55f4bb8 <col:20, col:29> 'double'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be55f4ba0 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   | `-DeclRefExpr 0x559be55f4b50 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be55f4be8 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be55f4b78 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | |-BinaryOperator 0x559be55f5370 <line:100:11, col:94> 'int' '='
|   |   | | |         | | |-DeclRefExpr 0x559be55f4c58 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         | | `-CStyleCastExpr 0x559be55f5348 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | |         | |   `-CallExpr 0x559be55f5300 <col:32, col:94> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be55f52e8 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be55f4e68 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | |         | |     `-BinaryOperator 0x559be55f52c0 <col:38, col:93> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be55f5048 <col:38, col:58> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be55f5020 <col:39, col:48> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be55f4ff0 <col:39> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be55f4e90 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be55f5008 <col:48> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be55f4eb8 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be55f52a0 <col:62, col:93> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be55f5278 <col:63, col:92> 'double' '/'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be55f5260 <col:63> 'double' <IntegralToFloating>
|   |   | | |         | |           | `-IntegerLiteral 0x559be55f5068 <col:63> 'int' 15
|   |   | | |         | |           `-ParenExpr 0x559be55f5240 <col:68, col:92> 'double'
|   |   | | |         | |             `-BinaryOperator 0x559be55f5218 <col:69, col:82> 'double' '-'
|   |   | | |         | |               |-ImplicitCastExpr 0x559be55f51e8 <col:69> 'double' <LValueToRValue>
|   |   | | |         | |               | `-DeclRefExpr 0x559be55f5088 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | |         | |               `-ImplicitCastExpr 0x559be55f5200 <col:82> 'double' <LValueToRValue>
|   |   | | |         | |                 `-DeclRefExpr 0x559be55f51c0 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | `-IfStmt 0x559be55f58a0 <line:101:11, line:107:11>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-BinaryOperator 0x559be55f54e8 <line:101:15, col:56> 'int' '&&'
|   |   | | |         |   | |-ParenExpr 0x559be55f5420 <col:15, col:33> 'int'
|   |   | | |         |   | | `-BinaryOperator 0x559be55f53f8 <col:16, col:32> 'int' '>='
|   |   | | |         |   | |   |-ImplicitCastExpr 0x559be55f53e0 <col:16> 'int' <LValueToRValue>
|   |   | | |         |   | |   | `-DeclRefExpr 0x559be55f5398 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | |   `-IntegerLiteral 0x559be55f53c0 <col:32> 'int' 0
|   |   | | |         |   | `-ParenExpr 0x559be55f54c8 <col:38, col:56> 'int'
|   |   | | |         |   |   `-BinaryOperator 0x559be55f54a0 <col:39, col:54> 'int' '<'
|   |   | | |         |   |     |-ImplicitCastExpr 0x559be55f5488 <col:39> 'int' <LValueToRValue>
|   |   | | |         |   |     | `-DeclRefExpr 0x559be55f5440 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |     `-IntegerLiteral 0x559be55f5468 <col:54> 'int' 15
|   |   | | |         |   |-CompoundStmt 0x559be55f5880 <line:102:11, line:107:11>
|   |   | | |         |   | |-IfStmt 0x559be55f5668 <line:103:13, line:104:32>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-BinaryOperator 0x559be55f5570 <line:103:17, col:33> 'int' '>='
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be55f5558 <col:17> 'int' <LValueToRValue>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be55f5510 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | | | `-IntegerLiteral 0x559be55f5538 <col:33> 'int' 15
|   |   | | |         |   | | |-CallExpr 0x559be55f5608 <line:104:15, col:32> 'int'
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be55f55f0 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be55f5598 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | |         |   | | | `-ImplicitCastExpr 0x559be55f5650 <col:22> 'const char *' <BitCast>
|   |   | | |         |   | | |   `-ImplicitCastExpr 0x559be55f5638 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | |         |   | | |     `-StringLiteral 0x559be55f55c0 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | |         |   | | `-<<<NULL>>>
|   |   | | |         |   | `-CompoundAssignOperator 0x559be55f5848 <line:106:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | |         |   |   |-ArraySubscriptExpr 0x559be55f57e8 <col:13, col:42> 'long' lvalue
|   |   | | |         |   |   | |-ImplicitCastExpr 0x559be55f57b8 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | |         |   |   | | `-DeclRefExpr 0x559be55f56c8 <col:13> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   | | |         |   |   | `-ImplicitCastExpr 0x559be55f57d0 <col:30> 'int' <LValueToRValue>
|   |   | | |         |   |   |   `-DeclRefExpr 0x559be55f5790 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |   `-ImplicitCastExpr 0x559be55f5830 <col:47> 'long' <IntegralCast>
|   |   | | |         |   |     `-IntegerLiteral 0x559be55f5810 <col:47> 'int' 1
|   |   | | |         |   `-<<<NULL>>>
|   |   | | |         `-<<<NULL>>>
|   |   | | `-ImplicitParamDecl 0x559be55ef808 <line:79:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:79:13) *'
|   |   | |-OMPCapturedExprDecl 0x559be55f7dc8 <line:80:21, col:32> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-ParenExpr 0x559be55effa0 <col:21, col:32> 'long'
|   |   | |   `-BinaryOperator 0x559be55efb58 <col:22, col:31> 'long' '-'
|   |   | |     |-ImplicitCastExpr 0x559be55efb28 <col:22> 'long' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x559be55ef9d0 <col:22> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   | |     `-ImplicitCastExpr 0x559be55efb40 <col:31> 'long' <IntegralCast>
|   |   | |       `-IntegerLiteral 0x559be55efb08 <col:31> 'int' 1
|   |   | |-OMPCapturedExprDecl 0x559be55f8128 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-BinaryOperator 0x559be55f8100 <col:5, <invalid sloc>> 'long' '-'
|   |   | |   |-BinaryOperator 0x559be55f7fd8 <col:5, col:35> 'long' '/'
|   |   | |   | |-ParenExpr 0x559be55f7fa0 <col:5> 'long'
|   |   | |   | | `-BinaryOperator 0x559be55f7f78 <col:21, col:35> 'long' '+'
|   |   | |   | |   |-BinaryOperator 0x559be55f7f38 <col:21, <invalid sloc>> 'long' '-'
|   |   | |   | |   | |-BinaryOperator 0x559be55f7ed8 <col:21, col:14> 'long' '-'
|   |   | |   | |   | | |-ImplicitCastExpr 0x559be55f7ea8 <col:21> 'long' <LValueToRValue>
|   |   | |   | |   | | | `-DeclRefExpr 0x559be55f7e28 <col:21> 'long' lvalue OMPCapturedExpr 0x559be55f7dc8 '.capture_expr.' 'long'
|   |   | |   | |   | | `-ImplicitCastExpr 0x559be55f7ec0 <col:14> 'long' <IntegralCast>
|   |   | |   | |   | |   `-IntegerLiteral 0x559be55ef948 <col:14> 'int' 0
|   |   | |   | |   | `-ImplicitCastExpr 0x559be55f7f20 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |   | |   |   `-IntegerLiteral 0x559be55f7f00 <<invalid sloc>> 'int' 1
|   |   | |   | |   `-ImplicitCastExpr 0x559be55f7f60 <col:35> 'long' <IntegralCast>
|   |   | |   | |     `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | |   | `-ImplicitCastExpr 0x559be55f7fc0 <col:35> 'long' <IntegralCast>
|   |   | |   |   `-IntegerLiteral 0x559be55f7d90 <col:35> 'int' 1
|   |   | |   `-ImplicitCastExpr 0x559be55f80e8 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x559be55f80c8 <<invalid sloc>> 'int' 1
|   |   | |-RecordDecl 0x559be55f9410 <line:115:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be55f94c0 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be55f9628 <line:117:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be55f98d8 <line:119:9> col:9 implicit 'long (&)[15]'
|   |   | | `-FieldDecl 0x559be55f9a20 <col:31> col:31 implicit 'long (&)[15]'
|   |   | `-CapturedDecl 0x559be55f9508 <<invalid sloc>> <invalid sloc>
|   |   |   |-CompoundStmt 0x559be55f9bb0 <line:116:5, line:122:5>
|   |   |   | `-ForStmt 0x559be55f9b78 <line:117:7, line:120:7>
|   |   |   |   |-BinaryOperator 0x559be55f96d0 <line:117:12, col:16> 'long' '='
|   |   |   |   | |-DeclRefExpr 0x559be55f95e8 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be55f96b8 <col:16> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be55f9698 <col:16> 'int' 0
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x559be55f9770 <col:19, col:23> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x559be55f9740 <col:19> 'long' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x559be55f96f8 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be55f9758 <col:23> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be55f9720 <col:23> 'int' 15
|   |   |   |   |-UnaryOperator 0x559be55f97c0 <col:27, col:29> 'long' prefix '++'
|   |   |   |   | `-DeclRefExpr 0x559be55f9798 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   `-CompoundStmt 0x559be55f9b60 <line:118:7, line:120:7>
|   |   |   |     `-CompoundAssignOperator 0x559be55f9b28 <line:119:9, col:49> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |   |       |-ArraySubscriptExpr 0x559be55f99a0 <col:9, col:26> 'long' lvalue
|   |   |   |       | |-ImplicitCastExpr 0x559be55f9970 <col:9> 'long *' <ArrayToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x559be55f97e0 <col:9> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |   |   |       | `-ImplicitCastExpr 0x559be55f9988 <col:25> 'long' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x559be55f9948 <col:25> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |       `-ImplicitCastExpr 0x559be55f9b10 <col:31, col:49> 'long' <LValueToRValue>
|   |   |   |         `-ArraySubscriptExpr 0x559be55f9ae8 <col:31, col:49> 'long' lvalue
|   |   |   |           |-ImplicitCastExpr 0x559be55f9ab8 <col:31> 'long *' <ArrayToPointerDecay>
|   |   |   |           | `-DeclRefExpr 0x559be55f99c8 <col:31> 'long [15]' lvalue Var 0x559be55ef148 'sum_local_counts' 'long [15]'
|   |   |   |           `-ImplicitCastExpr 0x559be55f9ad0 <col:48> 'long' <LValueToRValue>
|   |   |   |             `-DeclRefExpr 0x559be55f9a90 <col:48> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   `-ImplicitParamDecl 0x559be55f9588 <line:115:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:115:13) *'
|   |   |-DeclRefExpr 0x559be55efa58 <line:80:22> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be55f02a8 <line:82:19> 'double [N_data]' lvalue Var 0x559be55e8f40 'Z_LIST' 'double [N_data]'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be55f0668 <line:83:17> 'double [N_data]' lvalue Var 0x559be55e8e20 'DEC_LIST' 'double [N_data]'
|   |   |-DeclRefExpr 0x559be55f0838 <col:31> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be55f0b78 <line:84:16> 'double [N_data]' lvalue Var 0x559be55e8d00 'RA_LIST' 'double [N_data]'
|   |   |-DeclRefExpr 0x559be55f4f40 <line:100:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   |-DeclRefExpr 0x559be55f5110 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   `-DeclRefExpr 0x559be55f9880 <line:119:9> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |-CallExpr 0x559be55f9eb0 <line:124:3, col:15> 'int'
|   | |-ImplicitCastExpr 0x559be55f9e98 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55f9e08 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55f9ef8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55f9ee0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55f9e68 <col:10> 'char [3]' lvalue "\n*"
|   |-CallExpr 0x559be55f9fc0 <line:125:3, col:18> 'int'
|   | |-ImplicitCastExpr 0x559be55f9fa8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55f9f10 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa008 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55f9ff0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55f9f78 <col:10> 'char [6]' lvalue "\n   *"
|   |-CallExpr 0x559be55fa0d0 <line:126:3, col:20> 'int'
|   | |-ImplicitCastExpr 0x559be55fa0b8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa020 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa118 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa100 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa088 <col:10> 'char [8]' lvalue "\n     *"
|   |-CallExpr 0x559be55fa1a8 <line:127:3, col:22> 'int'
|   | |-ImplicitCastExpr 0x559be55fa190 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa130 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa1f0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa1d8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa158 <col:10> 'char [10]' lvalue "\n       *"
|   |-CallExpr 0x559be55fa278 <line:128:3, col:21> 'int'
|   | |-ImplicitCastExpr 0x559be55fa260 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa208 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa2c0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa2a8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa230 <col:10> 'char [9]' lvalue "\n      *"
|   |-CallExpr 0x559be55fa370 <line:129:3, col:20> 'int'
|   | |-ImplicitCastExpr 0x559be55fa358 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa300 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa3b8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa3a0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa328 <col:10> 'char [8]' lvalue "\n     *"
|   |-CallExpr 0x559be55fa480 <line:130:3, col:19> 'int'
|   | |-ImplicitCastExpr 0x559be55fa468 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa3d0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa4c8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa4b0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa438 <col:10> 'char [7]' lvalue "\n    *"
|   |-CallExpr 0x559be55fa558 <line:131:3, col:27> 'int'
|   | |-ImplicitCastExpr 0x559be55fa540 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa4e0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa5a0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa588 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa508 <col:10> 'char [15]' lvalue "\n   *        *"
|   |-CallExpr 0x559be55fa628 <line:132:3, col:18> 'int'
|   | |-ImplicitCastExpr 0x559be55fa610 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa5b8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa670 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa658 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa5e0 <col:10> 'char [6]' lvalue "\n   *"
|   |-CallExpr 0x559be55fa6f8 <line:133:3, col:20> 'int'
|   | |-ImplicitCastExpr 0x559be55fa6e0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa688 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa740 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa728 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa6b0 <col:10> 'char [8]' lvalue "\n     *"
|   |-CallExpr 0x559be55fa7c8 <line:134:3, col:21> 'int'
|   | |-ImplicitCastExpr 0x559be55fa7b0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa758 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa810 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa7f8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa780 <col:10> 'char [9]' lvalue "\n      *"
|   |-CallExpr 0x559be55fa8d8 <line:135:3, col:23> 'int'
|   | |-ImplicitCastExpr 0x559be55fa8c0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa828 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fa920 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fa908 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa888 <col:10> 'char [11]' lvalue "\n       **"
|   |-CallExpr 0x559be55fa9e8 <line:136:3, col:25> 'int'
|   | |-ImplicitCastExpr 0x559be55fa9d0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fa938 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55faa30 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55faa18 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fa998 <col:10> 'char [13]' lvalue "\n        * *"
|   |-CallExpr 0x559be55faac0 <line:137:3, col:27> 'int'
|   | |-ImplicitCastExpr 0x559be55faaa8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55faa48 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fab08 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55faaf0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55faa70 <col:10> 'char [15]' lvalue "\n        * * *"
|   |-CallExpr 0x559be55fabd8 <line:138:3, col:30> 'int'
|   | |-ImplicitCastExpr 0x559be55fabc0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fab20 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fac20 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fac08 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fab88 <col:10> 'char [17]' lvalue "\n       * * * *\n"
|   |-CallExpr 0x559be55facf8 <line:139:3, col:42> 'int'
|   | |-ImplicitCastExpr 0x559be55face0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fac38 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fad40 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fad28 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fac98 <col:10> 'char [30]' lvalue "****************************\n"
|   |-CallExpr 0x559be55fade0 <line:140:3, col:42> 'int'
|   | |-ImplicitCastExpr 0x559be55fadc8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fad58 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fae28 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fae10 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fad80 <col:10> 'char [30]' lvalue "FINISHED PRAGMA OMP CRITICAL\n"
|   |-CallExpr 0x559be55faec8 <line:141:3, col:42> 'int'
|   | |-ImplicitCastExpr 0x559be55faeb0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fae40 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55faf10 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55faef8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fae68 <col:10> 'char [30]' lvalue "****************************\n"
|   |-CallExpr 0x559be55fafe8 <line:142:3, col:41> 'int'
|   | |-ImplicitCastExpr 0x559be55fafd0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55faf28 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fb030 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fb018 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55faf88 <col:10> 'char [29]' lvalue "FINISHED Mr21 NESTED LOOP. \n"
|   |-CallExpr 0x559be55fb120 <line:143:3, col:64> 'int'
|   | |-ImplicitCastExpr 0x559be55fb108 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fb048 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fb168 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fb150 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fb0a8 <col:10> 'char [53]' lvalue "Dividing Counts by two to correct double counting..."
|   |-ForStmt 0x559be55fb7b8 <line:144:3, line:148:3>
|   | |-BinaryOperator 0x559be55fb1e0 <line:144:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be55fb180 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be55fb1c8 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be55fb1a8 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be55fb280 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be55fb250 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be55fb208 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be55fb268 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be55fb230 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be55fb2d0 <col:23, col:25> 'long' prefix '++'
|   | | `-DeclRefExpr 0x559be55fb2a8 <col:25> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be55fb798 <line:145:3, line:148:3>
|   |   |-BinaryOperator 0x559be55fb5a0 <line:146:5, col:67> 'long' '='
|   |   | |-ArraySubscriptExpr 0x559be55fb390 <col:5, col:22> 'long' lvalue
|   |   | | |-ImplicitCastExpr 0x559be55fb360 <col:5> 'long *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x559be55fb310 <col:5> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |   | | `-ImplicitCastExpr 0x559be55fb378 <col:21> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559be55fb338 <col:21> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | `-ImplicitCastExpr 0x559be55fb588 <col:26, col:67> 'long' <IntegralCast>
|   |   |   `-CStyleCastExpr 0x559be55fb560 <col:26, col:67> 'long long' <FloatingToIntegral>
|   |   |     `-CallExpr 0x559be55fb518 <col:38, col:67> 'double'
|   |   |       |-ImplicitCastExpr 0x559be55fb500 <col:38> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x559be55fb3b8 <col:38> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   |       `-BinaryOperator 0x559be55fb4d8 <col:44, col:65> 'double' '/'
|   |   |         |-ImplicitCastExpr 0x559be55fb4c0 <col:44, col:61> 'double' <IntegralToFloating>
|   |   |         | `-ImplicitCastExpr 0x559be55fb4a8 <col:44, col:61> 'long' <LValueToRValue>
|   |   |         |   `-ArraySubscriptExpr 0x559be55fb460 <col:44, col:61> 'long' lvalue
|   |   |         |     |-ImplicitCastExpr 0x559be55fb430 <col:44> 'long *' <ArrayToPointerDecay>
|   |   |         |     | `-DeclRefExpr 0x559be55fb3e0 <col:44> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |   |         |     `-ImplicitCastExpr 0x559be55fb448 <col:60> 'long' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x559be55fb408 <col:60> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |         `-FloatingLiteral 0x559be55fb488 <col:65> 'double' 2.000000e+00
|   |   `-CallExpr 0x559be55fb718 <line:147:5, col:38> 'int'
|   |     |-ImplicitCastExpr 0x559be55fb700 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be55fb5c8 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |-ImplicitCastExpr 0x559be55fb768 <col:12> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x559be55fb750 <col:12> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x559be55fb628 <col:12> 'char [5]' lvalue "%ld "
|   |     `-ImplicitCastExpr 0x559be55fb780 <col:20, col:37> 'long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x559be55fb6d8 <col:20, col:37> 'long' lvalue
|   |         |-ImplicitCastExpr 0x559be55fb6a8 <col:20> 'long *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x559be55fb658 <col:20> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |         `-ImplicitCastExpr 0x559be55fb6c0 <col:36> 'long' <LValueToRValue>
|   |           `-DeclRefExpr 0x559be55fb680 <col:36> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |-CallExpr 0x559be55fb860 <line:150:3, col:20> 'int'
|   | |-ImplicitCastExpr 0x559be55fb848 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fb7f0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fb8a8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fb890 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fb818 <col:10> 'char [9]' lvalue "Counts: "
|   |-CallExpr 0x559be55fb930 <line:151:3, col:14> 'int'
|   | |-ImplicitCastExpr 0x559be55fb918 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fb8c0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fb978 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fb960 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fb8e8 <col:10> 'char [2]' lvalue "\n"
|   |-DeclStmt 0x559be55fba50 <line:152:3, col:60>
|   | `-VarDecl 0x559be55fb9b0 <col:3, col:38> col:21 used r20_datafile 'const char [21]' static cinit
|   |   `-StringLiteral 0x559be55fba10 <col:38> 'const char [21]' lvalue "SDSS_Mr20_rspace.dat"
|   |-IfStmt 0x559be55fbd68 <line:154:3, line:158:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be55fbd48 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be55fbd28 <line:155:3, line:158:3>
|   | | |-CallExpr 0x559be55fbc38 <line:156:5, col:53> 'int'
|   | | | |-ImplicitCastExpr 0x559be55fbc20 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be55fbba8 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be55fbc80 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be55fbc68 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be55fbbd0 <col:12> 'char [39]' lvalue "input_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be55fbcf8 <line:157:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be55fbce0 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be55fbc98 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be55fbcc0 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-CallExpr 0x559be55fbe30 <line:160:3, col:48> 'int'
|   | |-ImplicitCastExpr 0x559be55fbe18 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fbda0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fbe78 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fbe60 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fbdc8 <col:10> 'char [36]' lvalue "Opened file - Begining assignment.\n"
|   |-DeclStmt 0x559be55fbf48 <line:161:3, col:36>
|   | `-VarDecl 0x559be55fbea8 <col:3, col:23> col:12 used N20_data 'long' cinit
|   |   `-ImplicitCastExpr 0x559be55fbf30 <col:23> 'long' <LValueToRValue>
|   |     `-DeclRefExpr 0x559be55fbf08 <col:23> 'long' lvalue Var 0x559be55e5f10 'FILELENGTH20r' 'long'
|   |-DeclStmt 0x559be55fc060 <line:162:3, col:29>
|   | `-VarDecl 0x559be55fc000 <col:3, col:28> col:10 used RA20_LIST 'double [N20_data]'
|   |-DeclStmt 0x559be55fc180 <line:163:3, col:30>
|   | `-VarDecl 0x559be55fc120 <col:3, col:29> col:10 used DEC20_LIST 'double [N20_data]'
|   |-DeclStmt 0x559be55fc2a0 <line:164:3, col:28>
|   | `-VarDecl 0x559be55fc240 <col:3, col:27> col:10 used Z20_LIST 'double [N20_data]'
|   |-ForStmt 0x559be55fcc78 <line:165:3, line:175:3>
|   | |-BinaryOperator 0x559be55fc338 <line:165:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be55fc2b8 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be55fc320 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be55fc2e0 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be55fc3e0 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be55fc3b0 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be55fc360 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be55fc3c8 <col:19> 'long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559be55fc388 <col:19> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   | |-UnaryOperator 0x559be55fc430 <col:29, col:30> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be55fc408 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be55fcc60 <line:166:3, line:175:3>
|   |   `-IfStmt 0x559be55fcc28 <line:170:5, line:173:5>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x559be55fc9e8 <line:170:9, col:27> 'int' '>='
|   |     | |-ImplicitCastExpr 0x559be55fc9d0 <col:9> 'long' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x559be55fc8e8 <col:9> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     | `-ParenExpr 0x559be55fc9b0 <col:14, col:27> 'long'
|   |     |   `-BinaryOperator 0x559be55fc988 <col:15, col:26> 'long' '-'
|   |     |     |-ImplicitCastExpr 0x559be55fc958 <col:15> 'long' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x559be55fc910 <col:15> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |     |     `-ImplicitCastExpr 0x559be55fc970 <col:26> 'long' <IntegralCast>
|   |     |       `-IntegerLiteral 0x559be55fc938 <col:26> 'int' 2
|   |     |-CompoundStmt 0x559be55fcc10 <line:171:5, line:173:5>
|   |     | `-CallExpr 0x559be55fcb90 <line:172:7, col:74> 'int'
|   |     |   |-ImplicitCastExpr 0x559be55fcb78 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x559be55fca10 <col:7> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |   |-ImplicitCastExpr 0x559be55fcbe0 <col:14> 'const char *' <BitCast>
|   |     |   | `-ImplicitCastExpr 0x559be55fcbc8 <col:14> 'char *' <ArrayToPointerDecay>
|   |     |   |   `-StringLiteral 0x559be55fca78 <col:14> 'char [44]' lvalue "Close or exceeded N20_data limit. RA: %lf \n"
|   |     |   `-ImplicitCastExpr 0x559be55fcbf8 <col:62, col:73> 'double' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x559be55fcb50 <col:62, col:73> 'double' lvalue
|   |     |       |-ImplicitCastExpr 0x559be55fcb20 <col:62> 'double *' <ArrayToPointerDecay>
|   |     |       | `-DeclRefExpr 0x559be55fcad0 <col:62> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   |     |       `-ImplicitCastExpr 0x559be55fcb38 <col:72> 'long' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x559be55fcaf8 <col:72> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     `-<<<NULL>>>
|   |-CallExpr 0x559be55fcda8 <line:178:3, col:27> 'int'
|   | |-ImplicitCastExpr 0x559be55fcd90 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fcd30 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fcdf0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fcdd8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fcd58 <col:10> 'char [15]' lvalue "Closing File.\n"
|   |-CallExpr 0x559be55fce90 <line:179:3, col:39> 'int'
|   | |-ImplicitCastExpr 0x559be55fce78 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be55fce08 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be55fced8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be55fcec0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be55fce30 <col:10> 'char [27]' lvalue "Beginning Nested Loops...\n"
|   |-OMPParallelDirective 0x559be5605c80 <line:180:11, col:203>
|   | |-OMPSharedClause 0x559be55fcfe0 <col:24, col:94>
|   | | |-DeclRefExpr 0x559be55fcef0 <col:32> 'double [N20_data]' lvalue Var 0x559be55fc240 'Z20_LIST' 'double [N20_data]'
|   | | |-DeclRefExpr 0x559be55fcf18 <col:42> 'double [N20_data]' lvalue Var 0x559be55fc120 'DEC20_LIST' 'double [N20_data]'
|   | | |-DeclRefExpr 0x559be55fcf40 <col:54> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   | | |-DeclRefExpr 0x559be55fcf68 <col:65> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   | | |-DeclRefExpr 0x559be55fcf90 <col:75> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   | | `-DeclRefExpr 0x559be55fcfb8 <col:87> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   | |-OMPPrivateClause 0x559be55fddb8 <col:94, col:203>
|   | | |-DeclRefExpr 0x559be55fd028 <col:103> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   | | |-DeclRefExpr 0x559be55fd050 <col:108> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   | | |-DeclRefExpr 0x559be55fd078 <col:116> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   | | |-DeclRefExpr 0x559be55fd0a0 <col:119> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   | | |-DeclRefExpr 0x559be55fd0c8 <col:123> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   | | |-DeclRefExpr 0x559be55fd0f0 <col:132> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   | | |-DeclRefExpr 0x559be55fd118 <col:142> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   | | |-DeclRefExpr 0x559be55fd140 <col:150> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   | | |-DeclRefExpr 0x559be55fd168 <col:159> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   | | |-DeclRefExpr 0x559be55fd190 <col:163> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   | | |-DeclRefExpr 0x559be55fd1b8 <col:167> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   | | |-DeclRefExpr 0x559be55fd1e0 <col:171> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   | | |-DeclRefExpr 0x559be55fd208 <col:175> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   | | |-DeclRefExpr 0x559be55fd230 <col:179> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   | | |-DeclRefExpr 0x559be55fd258 <col:183> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   | | |-DeclRefExpr 0x559be55fd280 <col:197> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-DeclRefExpr 0x559be55fd2a8 <col:200> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   | `-CapturedStmt 0x559be5605b58 <line:181:3, line:229:3>
|   |   |-CapturedDecl 0x559be55fdfd8 <<invalid sloc>> <invalid sloc>
|   |   | |-CompoundStmt 0x559be5605b20 <line:181:3, line:229:3>
|   |   | | |-CallExpr 0x559be55fe1e8 <line:182:5, col:27> 'int'
|   |   | | | |-ImplicitCastExpr 0x559be55fe1d0 <col:5> 'int (*)()' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559be55fe188 <col:5> 'int ()' Function 0x559be55eefc0 'omp_set_num_threads' 'int ()'
|   |   | | | `-IntegerLiteral 0x559be55fe1b0 <col:25> 'int' 32
|   |   | | |-DeclStmt 0x559be55fe2c0 <line:183:5, col:34>
|   |   | | | `-VarDecl 0x559be55fe260 <col:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | | |-CallExpr 0x559be55fea58 <line:184:5, col:67> 'void *'
|   |   | | | |-ImplicitCastExpr 0x559be55fea40 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559be55fe2d8 <col:5> 'void *(void *, int, unsigned long)' Function 0x559be55ef208 'memset' 'void *(void *, int, unsigned long)'
|   |   | | | |-ImplicitCastExpr 0x559be55feab0 <col:12> 'void *' <BitCast>
|   |   | | | | `-ImplicitCastExpr 0x559be55fea98 <col:12> 'long *' <ArrayToPointerDecay>
|   |   | | | |   `-DeclRefExpr 0x559be55fe300 <col:12> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   | | | |-IntegerLiteral 0x559be55fe8c0 <col:30> 'int' 0
|   |   | | | `-BinaryOperator 0x559be55fea00 <col:33, col:66> 'unsigned long' '*'
|   |   | | |   |-ImplicitCastExpr 0x559be55fe9e8 <col:33> 'unsigned long' <IntegralCast>
|   |   | | |   | `-IntegerLiteral 0x559be55fe8e0 <col:33> 'int' 15
|   |   | | |   `-ParenExpr 0x559be55fe9c8 <col:38, col:66> 'unsigned long'
|   |   | | |     `-UnaryExprOrTypeTraitExpr 0x559be55fe9a8 <col:39, col:65> 'unsigned long' sizeof
|   |   | | |       `-ParenExpr 0x559be55fe988 <col:45, col:65> 'long' lvalue
|   |   | | |         `-ArraySubscriptExpr 0x559be55fe960 <col:46, col:64> 'long' lvalue
|   |   | | |           |-ImplicitCastExpr 0x559be55fe948 <col:46> 'long *' <ArrayToPointerDecay>
|   |   | | |           | `-DeclRefExpr 0x559be55fe900 <col:46> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   | | |           `-IntegerLiteral 0x559be55fe928 <col:63> 'int' 0
|   |   | | |-OMPForDirective 0x559be56051e8 <line:185:13, col:20>
|   |   | | | |-CapturedStmt 0x559be56036f0 <line:186:5, line:219:5>
|   |   | | | | |-CapturedDecl 0x559be55febb8 <<invalid sloc>> <invalid sloc>
|   |   | | | | | |-ForStmt 0x559be56036b8 <line:186:5, line:219:5>
|   |   | | | | | | |-BinaryOperator 0x559be55fed80 <line:186:10, col:14> 'long' '='
|   |   | | | | | | | |-DeclRefExpr 0x559be55fec98 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ImplicitCastExpr 0x559be55fed68 <col:14> 'long' <IntegralCast>
|   |   | | | | | | |   `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | | | | | |-<<<NULL>>>
|   |   | | | | | | |-BinaryOperator 0x559be55fefb8 <col:17, col:34> 'int' '<'
|   |   | | | | | | | |-ImplicitCastExpr 0x559be55fefa0 <col:17> 'long' <LValueToRValue>
|   |   | | | | | | | | `-DeclRefExpr 0x559be55feda8 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ParenExpr 0x559be55fef80 <col:21, col:34> 'long'
|   |   | | | | | | |   `-BinaryOperator 0x559be55fef58 <col:22, col:33> 'long' '-'
|   |   | | | | | | |     |-ImplicitCastExpr 0x559be55fef28 <col:22> 'long' <LValueToRValue>
|   |   | | | | | | |     | `-DeclRefExpr 0x559be55fedd0 <col:22> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   | | | | | | |     `-ImplicitCastExpr 0x559be55fef40 <col:33> 'long' <IntegralCast>
|   |   | | | | | | |       `-IntegerLiteral 0x559be55fef08 <col:33> 'int' 1
|   |   | | | | | | |-UnaryOperator 0x559be55ff008 <col:37, col:39> 'long' prefix '++'
|   |   | | | | | | | `-DeclRefExpr 0x559be55fefe0 <col:39> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | `-CompoundStmt 0x559be5603670 <line:187:5, line:219:5>
|   |   | | | | | |   |-BinaryOperator 0x559be55ff3e0 <line:188:7, col:29> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55ff028 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55ff3b8 <col:11, col:29> 'double' '*'
|   |   | | | | | |   |   |-FloatingLiteral 0x559be55ff0d8 <col:11> 'double' 2.998000e+03
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be55ff3a0 <col:19, col:29> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-ArraySubscriptExpr 0x559be55ff378 <col:19, col:29> 'double' lvalue
|   |   | | | | | |   |       |-ImplicitCastExpr 0x559be55ff348 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |       | `-DeclRefExpr 0x559be55ff1b8 <col:19> 'double [N20_data]' lvalue Var 0x559be55fc240 'Z20_LIST' 'double [N20_data]'
|   |   | | | | | |   |       `-ImplicitCastExpr 0x559be55ff360 <col:28> 'long' <LValueToRValue>
|   |   | | | | | |   |         `-DeclRefExpr 0x559be55ff320 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |-BinaryOperator 0x559be55fff20 <line:189:7, col:33> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55ff408 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be55ffef8 <col:17, col:33> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be55ff898 <col:17, col:29> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be55ff738 <col:17, col:29> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be55ff708 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be55ff578 <col:17> 'double [N20_data]' lvalue Var 0x559be55fc120 'DEC20_LIST' 'double [N20_data]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be55ff720 <col:28> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be55ff6e0 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be55ffee0 <col:33> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be55ff760 <col:33> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be5600320 <line:190:7, col:31> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be55fff48 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be56002f8 <col:16, col:31> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be56002c8 <col:16, col:27> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be5600278 <col:16, col:27> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be5600248 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be56000b8 <col:16> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be5600260 <col:26> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be5600220 <col:26> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be56002e0 <col:31> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be56002a0 <col:31> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be5600608 <line:191:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5600348 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be56005e0 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be5600510 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be56004e8 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be56004d0 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be56003f8 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be5600488 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be5600470 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be5600420 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be56004b8 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be5600448 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be5600598 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be5600580 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be5600530 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be56005c8 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be5600558 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be56008f0 <line:192:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5600630 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be56008c8 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be56007f8 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be56007d0 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be56007b8 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be56006e0 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be5600770 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be5600758 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be5600708 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be56007a0 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be5600730 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be5600880 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be5600868 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be5600818 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be56008b0 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be5600840 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be5600ae0 <line:193:7, col:27> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5600918 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5600ab8 <col:12, col:27> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be5600aa0 <col:12> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-DeclRefExpr 0x559be56009c8 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be5600a58 <col:16, col:27> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be5600a40 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be56009f0 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be5600a88 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be5600a18 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   `-ForStmt 0x559be5603638 <line:194:7, line:217:7>
|   |   | | | | | |     |-BinaryOperator 0x559be5600bf0 <line:194:12, col:16> 'long' '='
|   |   | | | | | |     | |-DeclRefExpr 0x559be5600b08 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ImplicitCastExpr 0x559be5600bd8 <col:16> 'long' <IntegralCast>
|   |   | | | | | |     |   `-IntegerLiteral 0x559be5600bb8 <col:16> 'int' 0
|   |   | | | | | |     |-<<<NULL>>>
|   |   | | | | | |     |-BinaryOperator 0x559be5600d18 <col:19, col:36> 'int' '<'
|   |   | | | | | |     | |-ImplicitCastExpr 0x559be5600d00 <col:19> 'long' <LValueToRValue>
|   |   | | | | | |     | | `-DeclRefExpr 0x559be5600c18 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ParenExpr 0x559be5600ce0 <col:23, col:36> 'long'
|   |   | | | | | |     |   `-BinaryOperator 0x559be5600cb8 <col:24, col:35> 'long' '-'
|   |   | | | | | |     |     |-ImplicitCastExpr 0x559be5600c88 <col:24> 'long' <LValueToRValue>
|   |   | | | | | |     |     | `-DeclRefExpr 0x559be5600c40 <col:24> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   | | | | | |     |     `-ImplicitCastExpr 0x559be5600ca0 <col:35> 'long' <IntegralCast>
|   |   | | | | | |     |       `-IntegerLiteral 0x559be5600c68 <col:35> 'int' 1
|   |   | | | | | |     |-UnaryOperator 0x559be5600d68 <col:39, col:41> 'long' prefix '++'
|   |   | | | | | |     | `-DeclRefExpr 0x559be5600d40 <col:41> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     `-CompoundStmt 0x559be5603620 <line:195:7, line:217:7>
|   |   | | | | | |       `-IfStmt 0x559be56035e8 <line:196:9, line:215:9>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-BinaryOperator 0x559be5600e08 <line:196:13, col:18> 'int' '!='
|   |   | | | | | |         | |-ImplicitCastExpr 0x559be5600dd8 <col:13> 'long' <LValueToRValue>
|   |   | | | | | |         | | `-DeclRefExpr 0x559be5600d88 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | `-ImplicitCastExpr 0x559be5600df0 <col:18> 'long' <LValueToRValue>
|   |   | | | | | |         |   `-DeclRefExpr 0x559be5600db0 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |         |-CompoundStmt 0x559be5603588 <line:197:9, line:215:9>
|   |   | | | | | |         | |-BinaryOperator 0x559be5600ff8 <line:198:11, col:34> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5600e30 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5600fd0 <col:16, col:34> 'double' '*'
|   |   | | | | | |         | |   |-FloatingLiteral 0x559be5600ef0 <col:16> 'double' 2.998000e+03
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be5600fb8 <col:24, col:34> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-ArraySubscriptExpr 0x559be5600f90 <col:24, col:34> 'double' lvalue
|   |   | | | | | |         | |       |-ImplicitCastExpr 0x559be5600f60 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |       | `-DeclRefExpr 0x559be5600f10 <col:24> 'double [N20_data]' lvalue Var 0x559be55fc240 'Z20_LIST' 'double [N20_data]'
|   |   | | | | | |         | |       `-ImplicitCastExpr 0x559be5600f78 <col:33> 'long' <LValueToRValue>
|   |   | | | | | |         | |         `-DeclRefExpr 0x559be5600f38 <col:33> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |-BinaryOperator 0x559be56011f8 <line:199:11, col:38> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5601020 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be56011d0 <col:22, col:38> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be56011a0 <col:22, col:34> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be5601150 <col:22, col:34> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be5601120 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be56010d0 <col:22> 'double [N20_data]' lvalue Var 0x559be55fc120 'DEC20_LIST' 'double [N20_data]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be5601138 <col:33> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be56010f8 <col:33> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be56011b8 <col:38> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be5601178 <col:38> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be56013f8 <line:200:11, col:36> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5601220 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be56013d0 <col:21, col:36> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be56013a0 <col:21, col:32> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be5601350 <col:21, col:32> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be5601320 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be56012d0 <col:21> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be5601338 <col:31> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be56012f8 <col:31> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be56013b8 <col:36> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be5601378 <col:36> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be56016e0 <line:201:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5601420 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be56016b8 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be56015e8 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be56015c0 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be56015a8 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be56014d0 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be5601560 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be5601548 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be56014f8 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be5601590 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be5601520 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be5601670 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be5601658 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be5601608 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be56016a0 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be5601630 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be56019c8 <line:202:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5601708 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be56019a0 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be56018d0 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be56018a8 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be5601890 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be56017b8 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be5601848 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be5601830 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be56017e0 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be5601878 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be5601808 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be5601958 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be5601940 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be56018f0 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be5601988 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be5601918 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5601bb8 <line:203:11, col:33> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be56019f0 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5601b90 <col:16, col:33> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be5601b78 <col:16> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be5601aa0 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be5601b30 <col:21, col:33> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be5601b18 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be5601ac8 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be5601b60 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be5601af0 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be56028c0 <line:204:11, col:93> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5601be0 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5602898 <col:17, col:93> 'double' '+'
|   |   | | | | | |         | |   |-ParenExpr 0x559be56026a0 <col:17, col:67> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be5602678 <col:18, col:66> 'double' '+'
|   |   | | | | | |         | |   |   |-ParenExpr 0x559be5601e48 <col:18, col:40> 'double'
|   |   | | | | | |         | |   |   | `-BinaryOperator 0x559be5601e20 <col:19, col:39> 'double' '*'
|   |   | | | | | |         | |   |   |   |-ParenExpr 0x559be5601d38 <col:19, col:27> 'double'
|   |   | | | | | |         | |   |   |   | `-BinaryOperator 0x559be5601d10 <col:20, col:25> 'double' '-'
|   |   | | | | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be5601ce0 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |   | `-DeclRefExpr 0x559be5601c90 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be5601cf8 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |     `-DeclRefExpr 0x559be5601cb8 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   |   `-ParenExpr 0x559be5601e00 <col:31, col:39> 'double'
|   |   | | | | | |         | |   |   |     `-BinaryOperator 0x559be5601dd8 <col:32, col:37> 'double' '-'
|   |   | | | | | |         | |   |   |       |-ImplicitCastExpr 0x559be5601da8 <col:32> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |       | `-DeclRefExpr 0x559be5601d58 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |       `-ImplicitCastExpr 0x559be5601dc0 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |         `-DeclRefExpr 0x559be5601d80 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   `-ParenExpr 0x559be5602658 <col:44, col:66> 'double'
|   |   | | | | | |         | |   |     `-BinaryOperator 0x559be5602630 <col:45, col:65> 'double' '*'
|   |   | | | | | |         | |   |       |-ParenExpr 0x559be5602548 <col:45, col:53> 'double'
|   |   | | | | | |         | |   |       | `-BinaryOperator 0x559be5602520 <col:46, col:51> 'double' '-'
|   |   | | | | | |         | |   |       |   |-ImplicitCastExpr 0x559be5601eb8 <col:46> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |   | `-DeclRefExpr 0x559be5601e68 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |       |   `-ImplicitCastExpr 0x559be5601ed0 <col:51> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |     `-DeclRefExpr 0x559be5601e90 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   |       `-ParenExpr 0x559be5602610 <col:57, col:65> 'double'
|   |   | | | | | |         | |   |         `-BinaryOperator 0x559be56025e8 <col:58, col:63> 'double' '-'
|   |   | | | | | |         | |   |           |-ImplicitCastExpr 0x559be56025b8 <col:58> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |           | `-DeclRefExpr 0x559be5602568 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |           `-ImplicitCastExpr 0x559be56025d0 <col:63> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |             `-DeclRefExpr 0x559be5602590 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   `-ParenExpr 0x559be5602878 <col:71, col:93> 'double'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be5602850 <col:72, col:92> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be5602768 <col:72, col:80> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be5602740 <col:73, col:78> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be5602710 <col:73> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be56026c0 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be5602728 <col:78> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be56026e8 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be5602830 <col:84, col:92> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be5602808 <col:85, col:90> 'double' '-'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be56027d8 <col:85> 'double' <LValueToRValue>
|   |   | | | | | |         | |           | `-DeclRefExpr 0x559be5602788 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |           `-ImplicitCastExpr 0x559be56027f0 <col:90> 'double' <LValueToRValue>
|   |   | | | | | |         | |             `-DeclRefExpr 0x559be56027b0 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5602a48 <line:205:11, col:29> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be56028e8 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | | `-CallExpr 0x559be5602a00 <col:20, col:29> 'double'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be56029e8 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be5602998 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be5602a30 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be56029c0 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5603028 <line:206:11, col:94> 'int' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5602a70 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         | | `-CStyleCastExpr 0x559be5603000 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | | | | |         | |   `-CallExpr 0x559be5602fb8 <col:32, col:94> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be5602fa0 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be5602b20 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be5602f78 <col:38, col:93> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be5602d00 <col:38, col:58> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be5602cd8 <col:39, col:48> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be5602ca8 <col:39> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be5602b48 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be5602cc0 <col:48> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be5602b70 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be5602f58 <col:62, col:93> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be5602f30 <col:63, col:92> 'double' '/'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be5602f18 <col:63> 'double' <IntegralToFloating>
|   |   | | | | | |         | |           | `-IntegerLiteral 0x559be5602d20 <col:63> 'int' 15
|   |   | | | | | |         | |           `-ParenExpr 0x559be5602ef8 <col:68, col:92> 'double'
|   |   | | | | | |         | |             `-BinaryOperator 0x559be5602ed0 <col:69, col:82> 'double' '-'
|   |   | | | | | |         | |               |-ImplicitCastExpr 0x559be5602ea0 <col:69> 'double' <LValueToRValue>
|   |   | | | | | |         | |               | `-DeclRefExpr 0x559be5602d40 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | | |         | |               `-ImplicitCastExpr 0x559be5602eb8 <col:82> 'double' <LValueToRValue>
|   |   | | | | | |         | |                 `-DeclRefExpr 0x559be5602e78 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | `-IfStmt 0x559be5603550 <line:207:11, line:213:11>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-BinaryOperator 0x559be56031a0 <line:207:15, col:56> 'int' '&&'
|   |   | | | | | |         |   | |-ParenExpr 0x559be56030d8 <col:15, col:33> 'int'
|   |   | | | | | |         |   | | `-BinaryOperator 0x559be56030b0 <col:16, col:32> 'int' '>='
|   |   | | | | | |         |   | |   |-ImplicitCastExpr 0x559be5603098 <col:16> 'int' <LValueToRValue>
|   |   | | | | | |         |   | |   | `-DeclRefExpr 0x559be5603050 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | |   `-IntegerLiteral 0x559be5603078 <col:32> 'int' 0
|   |   | | | | | |         |   | `-ParenExpr 0x559be5603180 <col:38, col:56> 'int'
|   |   | | | | | |         |   |   `-BinaryOperator 0x559be5603158 <col:39, col:54> 'int' '<'
|   |   | | | | | |         |   |     |-ImplicitCastExpr 0x559be5603140 <col:39> 'int' <LValueToRValue>
|   |   | | | | | |         |   |     | `-DeclRefExpr 0x559be56030f8 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be5603120 <col:54> 'int' 15
|   |   | | | | | |         |   |-CompoundStmt 0x559be5603530 <line:208:11, line:213:11>
|   |   | | | | | |         |   | |-IfStmt 0x559be5603320 <line:209:13, line:210:32>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-BinaryOperator 0x559be5603228 <line:209:17, col:33> 'int' '>='
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be5603210 <col:17> 'int' <LValueToRValue>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be56031c8 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | | | `-IntegerLiteral 0x559be56031f0 <col:33> 'int' 15
|   |   | | | | | |         |   | | |-CallExpr 0x559be56032c0 <line:210:15, col:32> 'int'
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be56032a8 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be5603250 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | | | | |         |   | | | `-ImplicitCastExpr 0x559be5603308 <col:22> 'const char *' <BitCast>
|   |   | | | | | |         |   | | |   `-ImplicitCastExpr 0x559be56032f0 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | | | | |         |   | | |     `-StringLiteral 0x559be5603278 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | | | | |         |   | | `-<<<NULL>>>
|   |   | | | | | |         |   | `-CompoundAssignOperator 0x559be56034d8 <line:212:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | | | | |         |   |   |-ArraySubscriptExpr 0x559be5603478 <col:13, col:42> 'long' lvalue
|   |   | | | | | |         |   |   | |-ImplicitCastExpr 0x559be5603448 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | | | | |         |   |   | | `-DeclRefExpr 0x559be5603358 <col:13> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   | | | | | |         |   |   | `-ImplicitCastExpr 0x559be5603460 <col:30> 'int' <LValueToRValue>
|   |   | | | | | |         |   |   |   `-DeclRefExpr 0x559be5603420 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |   `-ImplicitCastExpr 0x559be56034c0 <col:47> 'long' <IntegralCast>
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be56034a0 <col:47> 'int' 1
|   |   | | | | | |         |   `-<<<NULL>>>
|   |   | | | | | |         `-<<<NULL>>>
|   |   | | | | | `-ImplicitParamDecl 0x559be55fec38 <line:185:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:185:13) *'
|   |   | | | | |-DeclRefExpr 0x559be55fed20 <line:186:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | |-DeclRefExpr 0x559be55feee0 <col:22> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   | | | | |-DeclRefExpr 0x559be55ff0b0 <line:188:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be55ff2f8 <col:19> 'double [N20_data]' lvalue Var 0x559be55fc240 'Z20_LIST' 'double [N20_data]'
|   |   | | | | |-DeclRefExpr 0x559be55ff490 <line:189:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be55ff6b8 <col:17> 'double [N20_data]' lvalue Var 0x559be55fc120 'DEC20_LIST' 'double [N20_data]'
|   |   | | | | |-DeclRefExpr 0x559be55ff870 <col:33> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | |-DeclRefExpr 0x559be55fffd0 <line:190:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be56001f8 <col:16> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   |   | | | | |-DeclRefExpr 0x559be56003d0 <line:191:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56006b8 <line:192:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56009a0 <line:193:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5600b90 <line:194:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | |-DeclRefExpr 0x559be5600eb8 <line:198:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56010a8 <line:199:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56012a8 <line:200:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56014a8 <line:201:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5601790 <line:202:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5601a78 <line:203:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5601c68 <line:204:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5602970 <line:205:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5602af8 <line:206:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | |-DeclRefExpr 0x559be5602c80 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5602e50 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | `-DeclRefExpr 0x559be56033f8 <line:212:13> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   | | | |-DeclRefExpr 0x559be5604280 <line:186:10> 'long' lvalue Var 0x559be5604220 '.omp.iv' 'long'
|   |   | | | |-ImplicitCastExpr 0x559be5603dd0 <col:5> 'long' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559be5603da8 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5603d48 '.capture_expr.' 'long'
|   |   | | | |-<<<NULL>>>
|   |   | | | |-ImplicitCastExpr 0x559be5603ab0 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | | | | `-BinaryOperator 0x559be5603a88 <col:14, col:21> 'int' '<'
|   |   | | | |   |-ImplicitCastExpr 0x559be56039d0 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | | |   `-ImplicitCastExpr 0x559be5603a70 <col:21> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be5603a48 <col:21> 'long' lvalue OMPCapturedExpr 0x559be56039e8 '.capture_expr.' 'long'
|   |   | | | |-BinaryOperator 0x559be5604318 <col:10> 'int' '<='
|   |   | | | | |-ImplicitCastExpr 0x559be56042e8 <col:10> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be5604280 <col:10> 'long' lvalue Var 0x559be5604220 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5604300 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be5603f98 <col:10> 'long' lvalue Var 0x559be5603f38 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be56042c0 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5604280 <col:10> 'long' lvalue Var 0x559be5604220 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be56042a8 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be5603ec0 <col:10> 'long' lvalue Var 0x559be5603e60 '.omp.lb' 'long'
|   |   | | | |-BinaryOperator 0x559be56043b8 <col:10, <invalid sloc>> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5604280 <col:10> 'long' lvalue Var 0x559be5604220 '.omp.iv' 'long'
|   |   | | | | `-BinaryOperator 0x559be5604390 <col:10, <invalid sloc>> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be5604360 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be5604280 <col:10> 'long' lvalue Var 0x559be5604220 '.omp.iv' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be5604378 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     `-IntegerLiteral 0x559be5604340 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclStmt 0x559be56051b8 <<invalid sloc>>
|   |   | | | | |-OMPCapturedExprDecl 0x559be56039e8 <col:21, col:34> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | | | `-ParenExpr 0x559be55fef80 <col:21, col:34> 'long'
|   |   | | | | |   `-BinaryOperator 0x559be55fef58 <col:22, col:33> 'long' '-'
|   |   | | | | |     |-ImplicitCastExpr 0x559be55fef28 <col:22> 'long' <LValueToRValue>
|   |   | | | | |     | `-DeclRefExpr 0x559be55fedd0 <col:22> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   | | | | |     `-ImplicitCastExpr 0x559be55fef40 <col:33> 'long' <IntegralCast>
|   |   | | | | |       `-IntegerLiteral 0x559be55fef08 <col:33> 'int' 1
|   |   | | | | `-OMPCapturedExprDecl 0x559be5603d48 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | |   `-BinaryOperator 0x559be5603d20 <col:5, <invalid sloc>> 'long' '-'
|   |   | | | |     |-BinaryOperator 0x559be5603bf8 <col:5, col:37> 'long' '/'
|   |   | | | |     | |-ParenExpr 0x559be5603bc0 <col:5> 'long'
|   |   | | | |     | | `-BinaryOperator 0x559be5603b98 <col:21, col:37> 'long' '+'
|   |   | | | |     | |   |-BinaryOperator 0x559be5603b58 <col:21, <invalid sloc>> 'long' '-'
|   |   | | | |     | |   | |-BinaryOperator 0x559be5603af8 <col:21, col:14> 'long' '-'
|   |   | | | |     | |   | | |-ImplicitCastExpr 0x559be5603ac8 <col:21> 'long' <LValueToRValue>
|   |   | | | |     | |   | | | `-DeclRefExpr 0x559be5603a48 <col:21> 'long' lvalue OMPCapturedExpr 0x559be56039e8 '.capture_expr.' 'long'
|   |   | | | |     | |   | | `-ImplicitCastExpr 0x559be5603ae0 <col:14> 'long' <IntegralCast>
|   |   | | | |     | |   | |   `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | | |     | |   | `-ImplicitCastExpr 0x559be5603b40 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     | |   |   `-IntegerLiteral 0x559be5603b20 <<invalid sloc>> 'int' 1
|   |   | | | |     | |   `-ImplicitCastExpr 0x559be5603b80 <col:37> 'long' <IntegralCast>
|   |   | | | |     | |     `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | | | |     | `-ImplicitCastExpr 0x559be5603be0 <col:37> 'long' <IntegralCast>
|   |   | | | |     |   `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | | | |     `-ImplicitCastExpr 0x559be5603d08 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be5603ce8 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be5604038 <col:10> 'int' lvalue Var 0x559be5603fd8 '.omp.is_last' 'int'
|   |   | | | |-DeclRefExpr 0x559be5603ec0 <col:10> 'long' lvalue Var 0x559be5603e60 '.omp.lb' 'long'
|   |   | | | |-DeclRefExpr 0x559be5603f98 <col:10> 'long' lvalue Var 0x559be5603f38 '.omp.ub' 'long'
|   |   | | | |-DeclRefExpr 0x559be56040f8 <col:10> 'long' lvalue Var 0x559be5604098 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be56041e0 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5603f98 <col:10> 'long' lvalue Var 0x559be5603f38 '.omp.ub' 'long'
|   |   | | | | `-ConditionalOperator 0x559be56041b0 <col:10> 'long'
|   |   | | | |   |-BinaryOperator 0x559be5604170 <col:10, col:5> 'int' '>'
|   |   | | | |   | |-ImplicitCastExpr 0x559be5604158 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | | `-DeclRefExpr 0x559be5603f98 <col:10> 'long' lvalue Var 0x559be5603f38 '.omp.ub' 'long'
|   |   | | | |   | `-ImplicitCastExpr 0x559be5603dd0 <col:5> 'long' <LValueToRValue>
|   |   | | | |   |   `-DeclRefExpr 0x559be5603da8 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5603d48 '.capture_expr.' 'long'
|   |   | | | |   |-ImplicitCastExpr 0x559be5603dd0 <col:5> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be5603da8 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5603d48 '.capture_expr.' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be5604198 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be5603f98 <col:10> 'long' lvalue Var 0x559be5603f38 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be5604438 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5603ec0 <col:10> 'long' lvalue Var 0x559be5603e60 '.omp.lb' 'long'
|   |   | | | | `-BinaryOperator 0x559be5604410 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be56043e0 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be5603ec0 <col:10> 'long' lvalue Var 0x559be5603e60 '.omp.lb' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be56043f8 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be56040f8 <col:10> 'long' lvalue Var 0x559be5604098 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be56044b8 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5603f98 <col:10> 'long' lvalue Var 0x559be5603f38 '.omp.ub' 'long'
|   |   | | | | `-BinaryOperator 0x559be5604490 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be5604460 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be5603f98 <col:10> 'long' lvalue Var 0x559be5603f38 '.omp.ub' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be5604478 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be56040f8 <col:10> 'long' lvalue Var 0x559be5604098 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be5603e20 <col:5, <invalid sloc>> 'long' '+'
|   |   | | | | |-ImplicitCastExpr 0x559be5603dd0 <col:5> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be5603da8 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5603d48 '.capture_expr.' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5603e08 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be5603de8 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be5603c20 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | |-DeclRefExpr 0x559be5603cc0 <col:5> 'long' lvalue Var 0x559be5603c60 'i' 'long'
|   |   | | | |-BinaryOperator 0x559be5604fd0 <col:5, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be56044e0 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5604508 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | | |-BinaryOperator 0x559be56050b0 <col:5, col:37> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be56044e0 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-BinaryOperator 0x559be5605088 <col:14, col:37> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be5605070 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | | |   `-BinaryOperator 0x559be5605048 <col:37> 'long' '*'
|   |   | | | |     |-ImplicitCastExpr 0x559be5605018 <col:37> 'long' <LValueToRValue>
|   |   | | | |     | `-ParenExpr 0x559be5604ff8 <col:37> 'long' lvalue
|   |   | | | |     |   `-DeclRefExpr 0x559be5604280 <col:10> 'long' lvalue Var 0x559be5604220 '.omp.iv' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be5605030 <col:37> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | | | `-BinaryOperator 0x559be5605178 <col:5, col:37> 'long' '='
|   |   | | |   |-DeclRefExpr 0x559be56044e0 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   `-BinaryOperator 0x559be5605150 <col:14, col:37> 'long' '+'
|   |   | | |     |-ImplicitCastExpr 0x559be5605138 <col:14> 'long' <IntegralCast>
|   |   | | |     | `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | |     `-BinaryOperator 0x559be5605110 <col:37> 'long' '*'
|   |   | | |       |-ParenExpr 0x559be56050d8 <col:37> 'long'
|   |   | | |       | `-BinaryOperator 0x559be5603bf8 <col:5, col:37> 'long' '/'
|   |   | | |       |   |-ParenExpr 0x559be5603bc0 <col:5> 'long'
|   |   | | |       |   | `-BinaryOperator 0x559be5603b98 <col:21, col:37> 'long' '+'
|   |   | | |       |   |   |-BinaryOperator 0x559be5603b58 <col:21, <invalid sloc>> 'long' '-'
|   |   | | |       |   |   | |-BinaryOperator 0x559be5603af8 <col:21, col:14> 'long' '-'
|   |   | | |       |   |   | | |-ImplicitCastExpr 0x559be5603ac8 <col:21> 'long' <LValueToRValue>
|   |   | | |       |   |   | | | `-DeclRefExpr 0x559be5603a48 <col:21> 'long' lvalue OMPCapturedExpr 0x559be56039e8 '.capture_expr.' 'long'
|   |   | | |       |   |   | | `-ImplicitCastExpr 0x559be5603ae0 <col:14> 'long' <IntegralCast>
|   |   | | |       |   |   | |   `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | |       |   |   | `-ImplicitCastExpr 0x559be5603b40 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | |       |   |   |   `-IntegerLiteral 0x559be5603b20 <<invalid sloc>> 'int' 1
|   |   | | |       |   |   `-ImplicitCastExpr 0x559be5603b80 <col:37> 'long' <IntegralCast>
|   |   | | |       |   |     `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | | |       |   `-ImplicitCastExpr 0x559be5603be0 <col:37> 'long' <IntegralCast>
|   |   | | |       |     `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | | |       `-ImplicitCastExpr 0x559be56050f8 <col:37> 'long' <IntegralCast>
|   |   | | |         `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | | `-OMPCriticalDirective 0x559be5605ae0 <line:221:13, col:25>
|   |   | |   `-CapturedStmt 0x559be5605a78 <line:222:5, line:228:5>
|   |   | |     |-CapturedDecl 0x559be56053b8 <<invalid sloc>> <invalid sloc>
|   |   | |     | |-CompoundStmt 0x559be5605a60 <line:222:5, line:228:5>
|   |   | |     | | `-ForStmt 0x559be5605a28 <line:223:7, line:226:7>
|   |   | |     | |   |-BinaryOperator 0x559be5605580 <line:223:12, col:16> 'long' '='
|   |   | |     | |   | |-DeclRefExpr 0x559be5605498 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be5605568 <col:16> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be5605548 <col:16> 'int' 0
|   |   | |     | |   |-<<<NULL>>>
|   |   | |     | |   |-BinaryOperator 0x559be5605620 <col:19, col:23> 'int' '<'
|   |   | |     | |   | |-ImplicitCastExpr 0x559be56055f0 <col:19> 'long' <LValueToRValue>
|   |   | |     | |   | | `-DeclRefExpr 0x559be56055a8 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be5605608 <col:23> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be56055d0 <col:23> 'int' 15
|   |   | |     | |   |-UnaryOperator 0x559be5605670 <col:27, col:29> 'long' prefix '++'
|   |   | |     | |   | `-DeclRefExpr 0x559be5605648 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   `-CompoundStmt 0x559be5605a10 <line:224:7, line:226:7>
|   |   | |     | |     `-CompoundAssignOperator 0x559be56059d8 <line:225:9, col:51> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | |     | |       |-ArraySubscriptExpr 0x559be5605850 <col:9, col:28> 'long' lvalue
|   |   | |     | |       | |-ImplicitCastExpr 0x559be5605820 <col:9> 'long *' <ArrayToPointerDecay>
|   |   | |     | |       | | `-DeclRefExpr 0x559be5605690 <col:9> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |   | |     | |       | `-ImplicitCastExpr 0x559be5605838 <col:27> 'long' <LValueToRValue>
|   |   | |     | |       |   `-DeclRefExpr 0x559be56057f8 <col:27> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |       `-ImplicitCastExpr 0x559be56059c0 <col:33, col:51> 'long' <LValueToRValue>
|   |   | |     | |         `-ArraySubscriptExpr 0x559be5605998 <col:33, col:51> 'long' lvalue
|   |   | |     | |           |-ImplicitCastExpr 0x559be5605968 <col:33> 'long *' <ArrayToPointerDecay>
|   |   | |     | |           | `-DeclRefExpr 0x559be5605878 <col:33> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   | |     | |           `-ImplicitCastExpr 0x559be5605980 <col:50> 'long' <LValueToRValue>
|   |   | |     | |             `-DeclRefExpr 0x559be5605940 <col:50> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | `-ImplicitParamDecl 0x559be5605438 <line:221:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:221:13) *'
|   |   | |     |-DeclRefExpr 0x559be5605520 <line:223:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     |-DeclRefExpr 0x559be56057d0 <line:225:9> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |   | |     `-DeclRefExpr 0x559be5605918 <col:33> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   | |-ImplicitParamDecl 0x559be55fe040 <line:180:11> col:11 implicit .global_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be55fe0a0 <col:11> col:11 implicit .bound_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be55fe128 <col:11> col:11 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:180:11) *'
|   |   | |-VarDecl 0x559be55fe260 <line:183:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | |-RecordDecl 0x559be55feac8 <line:185:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be55feb70 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be55fecd8 <line:186:10> col:10 implicit 'long &'
|   |   | | |-FieldDecl 0x559be55fee98 <col:22> col:22 implicit 'long &'
|   |   | | |-FieldDecl 0x559be55ff068 <line:188:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55ff0f8 <line:164:19> col:19 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be55ff2b0 <line:188:19> col:19 implicit 'double (&)[N20_data]'
|   |   | | |-FieldDecl 0x559be55ff448 <line:189:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55ff4b8 <line:163:21> col:21 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be55ff670 <line:189:17> col:17 implicit 'double (&)[N20_data]'
|   |   | | |-FieldDecl 0x559be55ff828 <col:33> col:33 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55fff88 <line:190:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be55ffff8 <line:162:20> col:20 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be56001b0 <line:190:16> col:16 implicit 'double (&)[N20_data]'
|   |   | | |-FieldDecl 0x559be5600388 <line:191:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5600670 <line:192:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5600958 <line:193:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5600b48 <line:194:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be5600e70 <line:198:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5601060 <line:199:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5601260 <line:200:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5601460 <line:201:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5601748 <line:202:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5601a30 <line:203:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5601c20 <line:204:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5602928 <line:205:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5602ab0 <line:206:11> col:11 implicit 'int &'
|   |   | | |-FieldDecl 0x559be5602c38 <col:48> col:48 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5602e08 <col:69> col:69 implicit 'double &'
|   |   | | `-FieldDecl 0x559be56033b0 <line:212:13> col:13 implicit 'long (&)[15]'
|   |   | |-CapturedDecl 0x559be55febb8 <<invalid sloc>> <invalid sloc>
|   |   | | |-ForStmt 0x559be56036b8 <line:186:5, line:219:5>
|   |   | | | |-BinaryOperator 0x559be55fed80 <line:186:10, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be55fec98 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be55fed68 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559be55fefb8 <col:17, col:34> 'int' '<'
|   |   | | | | |-ImplicitCastExpr 0x559be55fefa0 <col:17> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be55feda8 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ParenExpr 0x559be55fef80 <col:21, col:34> 'long'
|   |   | | | |   `-BinaryOperator 0x559be55fef58 <col:22, col:33> 'long' '-'
|   |   | | | |     |-ImplicitCastExpr 0x559be55fef28 <col:22> 'long' <LValueToRValue>
|   |   | | | |     | `-DeclRefExpr 0x559be55fedd0 <col:22> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be55fef40 <col:33> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be55fef08 <col:33> 'int' 1
|   |   | | | |-UnaryOperator 0x559be55ff008 <col:37, col:39> 'long' prefix '++'
|   |   | | | | `-DeclRefExpr 0x559be55fefe0 <col:39> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | `-CompoundStmt 0x559be5603670 <line:187:5, line:219:5>
|   |   | | |   |-BinaryOperator 0x559be55ff3e0 <line:188:7, col:29> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55ff028 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55ff3b8 <col:11, col:29> 'double' '*'
|   |   | | |   |   |-FloatingLiteral 0x559be55ff0d8 <col:11> 'double' 2.998000e+03
|   |   | | |   |   `-ImplicitCastExpr 0x559be55ff3a0 <col:19, col:29> 'double' <LValueToRValue>
|   |   | | |   |     `-ArraySubscriptExpr 0x559be55ff378 <col:19, col:29> 'double' lvalue
|   |   | | |   |       |-ImplicitCastExpr 0x559be55ff348 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | |   |       | `-DeclRefExpr 0x559be55ff1b8 <col:19> 'double [N20_data]' lvalue Var 0x559be55fc240 'Z20_LIST' 'double [N20_data]'
|   |   | | |   |       `-ImplicitCastExpr 0x559be55ff360 <col:28> 'long' <LValueToRValue>
|   |   | | |   |         `-DeclRefExpr 0x559be55ff320 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |-BinaryOperator 0x559be55fff20 <line:189:7, col:33> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55ff408 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be55ffef8 <col:17, col:33> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be55ff898 <col:17, col:29> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be55ff738 <col:17, col:29> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be55ff708 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be55ff578 <col:17> 'double [N20_data]' lvalue Var 0x559be55fc120 'DEC20_LIST' 'double [N20_data]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be55ff720 <col:28> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be55ff6e0 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be55ffee0 <col:33> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be55ff760 <col:33> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be5600320 <line:190:7, col:31> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be55fff48 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be56002f8 <col:16, col:31> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be56002c8 <col:16, col:27> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be5600278 <col:16, col:27> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be5600248 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be56000b8 <col:16> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be5600260 <col:26> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be5600220 <col:26> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be56002e0 <col:31> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be56002a0 <col:31> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be5600608 <line:191:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5600348 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be56005e0 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be5600510 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be56004e8 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be56004d0 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be56003f8 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be5600488 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be5600470 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be5600420 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be56004b8 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be5600448 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be5600598 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be5600580 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be5600530 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be56005c8 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be5600558 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be56008f0 <line:192:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5600630 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be56008c8 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be56007f8 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be56007d0 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be56007b8 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be56006e0 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be5600770 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be5600758 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be5600708 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be56007a0 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be5600730 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be5600880 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be5600868 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be5600818 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be56008b0 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be5600840 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be5600ae0 <line:193:7, col:27> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5600918 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5600ab8 <col:12, col:27> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be5600aa0 <col:12> 'double' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x559be56009c8 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   `-CallExpr 0x559be5600a58 <col:16, col:27> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be5600a40 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be56009f0 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be5600a88 <col:20> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be5600a18 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   `-ForStmt 0x559be5603638 <line:194:7, line:217:7>
|   |   | | |     |-BinaryOperator 0x559be5600bf0 <line:194:12, col:16> 'long' '='
|   |   | | |     | |-DeclRefExpr 0x559be5600b08 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ImplicitCastExpr 0x559be5600bd8 <col:16> 'long' <IntegralCast>
|   |   | | |     |   `-IntegerLiteral 0x559be5600bb8 <col:16> 'int' 0
|   |   | | |     |-<<<NULL>>>
|   |   | | |     |-BinaryOperator 0x559be5600d18 <col:19, col:36> 'int' '<'
|   |   | | |     | |-ImplicitCastExpr 0x559be5600d00 <col:19> 'long' <LValueToRValue>
|   |   | | |     | | `-DeclRefExpr 0x559be5600c18 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ParenExpr 0x559be5600ce0 <col:23, col:36> 'long'
|   |   | | |     |   `-BinaryOperator 0x559be5600cb8 <col:24, col:35> 'long' '-'
|   |   | | |     |     |-ImplicitCastExpr 0x559be5600c88 <col:24> 'long' <LValueToRValue>
|   |   | | |     |     | `-DeclRefExpr 0x559be5600c40 <col:24> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   | | |     |     `-ImplicitCastExpr 0x559be5600ca0 <col:35> 'long' <IntegralCast>
|   |   | | |     |       `-IntegerLiteral 0x559be5600c68 <col:35> 'int' 1
|   |   | | |     |-UnaryOperator 0x559be5600d68 <col:39, col:41> 'long' prefix '++'
|   |   | | |     | `-DeclRefExpr 0x559be5600d40 <col:41> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     `-CompoundStmt 0x559be5603620 <line:195:7, line:217:7>
|   |   | | |       `-IfStmt 0x559be56035e8 <line:196:9, line:215:9>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-BinaryOperator 0x559be5600e08 <line:196:13, col:18> 'int' '!='
|   |   | | |         | |-ImplicitCastExpr 0x559be5600dd8 <col:13> 'long' <LValueToRValue>
|   |   | | |         | | `-DeclRefExpr 0x559be5600d88 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | `-ImplicitCastExpr 0x559be5600df0 <col:18> 'long' <LValueToRValue>
|   |   | | |         |   `-DeclRefExpr 0x559be5600db0 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |         |-CompoundStmt 0x559be5603588 <line:197:9, line:215:9>
|   |   | | |         | |-BinaryOperator 0x559be5600ff8 <line:198:11, col:34> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5600e30 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5600fd0 <col:16, col:34> 'double' '*'
|   |   | | |         | |   |-FloatingLiteral 0x559be5600ef0 <col:16> 'double' 2.998000e+03
|   |   | | |         | |   `-ImplicitCastExpr 0x559be5600fb8 <col:24, col:34> 'double' <LValueToRValue>
|   |   | | |         | |     `-ArraySubscriptExpr 0x559be5600f90 <col:24, col:34> 'double' lvalue
|   |   | | |         | |       |-ImplicitCastExpr 0x559be5600f60 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |       | `-DeclRefExpr 0x559be5600f10 <col:24> 'double [N20_data]' lvalue Var 0x559be55fc240 'Z20_LIST' 'double [N20_data]'
|   |   | | |         | |       `-ImplicitCastExpr 0x559be5600f78 <col:33> 'long' <LValueToRValue>
|   |   | | |         | |         `-DeclRefExpr 0x559be5600f38 <col:33> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |-BinaryOperator 0x559be56011f8 <line:199:11, col:38> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5601020 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be56011d0 <col:22, col:38> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be56011a0 <col:22, col:34> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be5601150 <col:22, col:34> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be5601120 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be56010d0 <col:22> 'double [N20_data]' lvalue Var 0x559be55fc120 'DEC20_LIST' 'double [N20_data]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be5601138 <col:33> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be56010f8 <col:33> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be56011b8 <col:38> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be5601178 <col:38> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be56013f8 <line:200:11, col:36> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5601220 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be56013d0 <col:21, col:36> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be56013a0 <col:21, col:32> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be5601350 <col:21, col:32> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be5601320 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be56012d0 <col:21> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be5601338 <col:31> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be56012f8 <col:31> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be56013b8 <col:36> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be5601378 <col:36> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be56016e0 <line:201:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5601420 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be56016b8 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be56015e8 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be56015c0 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be56015a8 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be56014d0 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be5601560 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be5601548 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be56014f8 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be5601590 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be5601520 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be5601670 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be5601658 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be5601608 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be56016a0 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be5601630 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be56019c8 <line:202:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5601708 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be56019a0 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be56018d0 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be56018a8 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be5601890 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be56017b8 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be5601848 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be5601830 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be56017e0 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be5601878 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be5601808 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be5601958 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be5601940 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be56018f0 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be5601988 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be5601918 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5601bb8 <line:203:11, col:33> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be56019f0 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5601b90 <col:16, col:33> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be5601b78 <col:16> 'double' <LValueToRValue>
|   |   | | |         | |   | `-DeclRefExpr 0x559be5601aa0 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be5601b30 <col:21, col:33> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be5601b18 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be5601ac8 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be5601b60 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be5601af0 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be56028c0 <line:204:11, col:93> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5601be0 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5602898 <col:17, col:93> 'double' '+'
|   |   | | |         | |   |-ParenExpr 0x559be56026a0 <col:17, col:67> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be5602678 <col:18, col:66> 'double' '+'
|   |   | | |         | |   |   |-ParenExpr 0x559be5601e48 <col:18, col:40> 'double'
|   |   | | |         | |   |   | `-BinaryOperator 0x559be5601e20 <col:19, col:39> 'double' '*'
|   |   | | |         | |   |   |   |-ParenExpr 0x559be5601d38 <col:19, col:27> 'double'
|   |   | | |         | |   |   |   | `-BinaryOperator 0x559be5601d10 <col:20, col:25> 'double' '-'
|   |   | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be5601ce0 <col:20> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |   | `-DeclRefExpr 0x559be5601c90 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be5601cf8 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |     `-DeclRefExpr 0x559be5601cb8 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   |   `-ParenExpr 0x559be5601e00 <col:31, col:39> 'double'
|   |   | | |         | |   |   |     `-BinaryOperator 0x559be5601dd8 <col:32, col:37> 'double' '-'
|   |   | | |         | |   |   |       |-ImplicitCastExpr 0x559be5601da8 <col:32> 'double' <LValueToRValue>
|   |   | | |         | |   |   |       | `-DeclRefExpr 0x559be5601d58 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |       `-ImplicitCastExpr 0x559be5601dc0 <col:37> 'double' <LValueToRValue>
|   |   | | |         | |   |   |         `-DeclRefExpr 0x559be5601d80 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   `-ParenExpr 0x559be5602658 <col:44, col:66> 'double'
|   |   | | |         | |   |     `-BinaryOperator 0x559be5602630 <col:45, col:65> 'double' '*'
|   |   | | |         | |   |       |-ParenExpr 0x559be5602548 <col:45, col:53> 'double'
|   |   | | |         | |   |       | `-BinaryOperator 0x559be5602520 <col:46, col:51> 'double' '-'
|   |   | | |         | |   |       |   |-ImplicitCastExpr 0x559be5601eb8 <col:46> 'double' <LValueToRValue>
|   |   | | |         | |   |       |   | `-DeclRefExpr 0x559be5601e68 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |       |   `-ImplicitCastExpr 0x559be5601ed0 <col:51> 'double' <LValueToRValue>
|   |   | | |         | |   |       |     `-DeclRefExpr 0x559be5601e90 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   |       `-ParenExpr 0x559be5602610 <col:57, col:65> 'double'
|   |   | | |         | |   |         `-BinaryOperator 0x559be56025e8 <col:58, col:63> 'double' '-'
|   |   | | |         | |   |           |-ImplicitCastExpr 0x559be56025b8 <col:58> 'double' <LValueToRValue>
|   |   | | |         | |   |           | `-DeclRefExpr 0x559be5602568 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |           `-ImplicitCastExpr 0x559be56025d0 <col:63> 'double' <LValueToRValue>
|   |   | | |         | |   |             `-DeclRefExpr 0x559be5602590 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   `-ParenExpr 0x559be5602878 <col:71, col:93> 'double'
|   |   | | |         | |     `-BinaryOperator 0x559be5602850 <col:72, col:92> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be5602768 <col:72, col:80> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be5602740 <col:73, col:78> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be5602710 <col:73> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be56026c0 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be5602728 <col:78> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be56026e8 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be5602830 <col:84, col:92> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be5602808 <col:85, col:90> 'double' '-'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be56027d8 <col:85> 'double' <LValueToRValue>
|   |   | | |         | |           | `-DeclRefExpr 0x559be5602788 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |           `-ImplicitCastExpr 0x559be56027f0 <col:90> 'double' <LValueToRValue>
|   |   | | |         | |             `-DeclRefExpr 0x559be56027b0 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5602a48 <line:205:11, col:29> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be56028e8 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | | `-CallExpr 0x559be5602a00 <col:20, col:29> 'double'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be56029e8 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   | `-DeclRefExpr 0x559be5602998 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be5602a30 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be56029c0 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5603028 <line:206:11, col:94> 'int' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5602a70 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         | | `-CStyleCastExpr 0x559be5603000 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | |         | |   `-CallExpr 0x559be5602fb8 <col:32, col:94> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be5602fa0 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be5602b20 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | |         | |     `-BinaryOperator 0x559be5602f78 <col:38, col:93> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be5602d00 <col:38, col:58> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be5602cd8 <col:39, col:48> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be5602ca8 <col:39> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be5602b48 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be5602cc0 <col:48> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be5602b70 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be5602f58 <col:62, col:93> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be5602f30 <col:63, col:92> 'double' '/'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be5602f18 <col:63> 'double' <IntegralToFloating>
|   |   | | |         | |           | `-IntegerLiteral 0x559be5602d20 <col:63> 'int' 15
|   |   | | |         | |           `-ParenExpr 0x559be5602ef8 <col:68, col:92> 'double'
|   |   | | |         | |             `-BinaryOperator 0x559be5602ed0 <col:69, col:82> 'double' '-'
|   |   | | |         | |               |-ImplicitCastExpr 0x559be5602ea0 <col:69> 'double' <LValueToRValue>
|   |   | | |         | |               | `-DeclRefExpr 0x559be5602d40 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | |         | |               `-ImplicitCastExpr 0x559be5602eb8 <col:82> 'double' <LValueToRValue>
|   |   | | |         | |                 `-DeclRefExpr 0x559be5602e78 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | `-IfStmt 0x559be5603550 <line:207:11, line:213:11>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-BinaryOperator 0x559be56031a0 <line:207:15, col:56> 'int' '&&'
|   |   | | |         |   | |-ParenExpr 0x559be56030d8 <col:15, col:33> 'int'
|   |   | | |         |   | | `-BinaryOperator 0x559be56030b0 <col:16, col:32> 'int' '>='
|   |   | | |         |   | |   |-ImplicitCastExpr 0x559be5603098 <col:16> 'int' <LValueToRValue>
|   |   | | |         |   | |   | `-DeclRefExpr 0x559be5603050 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | |   `-IntegerLiteral 0x559be5603078 <col:32> 'int' 0
|   |   | | |         |   | `-ParenExpr 0x559be5603180 <col:38, col:56> 'int'
|   |   | | |         |   |   `-BinaryOperator 0x559be5603158 <col:39, col:54> 'int' '<'
|   |   | | |         |   |     |-ImplicitCastExpr 0x559be5603140 <col:39> 'int' <LValueToRValue>
|   |   | | |         |   |     | `-DeclRefExpr 0x559be56030f8 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |     `-IntegerLiteral 0x559be5603120 <col:54> 'int' 15
|   |   | | |         |   |-CompoundStmt 0x559be5603530 <line:208:11, line:213:11>
|   |   | | |         |   | |-IfStmt 0x559be5603320 <line:209:13, line:210:32>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-BinaryOperator 0x559be5603228 <line:209:17, col:33> 'int' '>='
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be5603210 <col:17> 'int' <LValueToRValue>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be56031c8 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | | | `-IntegerLiteral 0x559be56031f0 <col:33> 'int' 15
|   |   | | |         |   | | |-CallExpr 0x559be56032c0 <line:210:15, col:32> 'int'
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be56032a8 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be5603250 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | |         |   | | | `-ImplicitCastExpr 0x559be5603308 <col:22> 'const char *' <BitCast>
|   |   | | |         |   | | |   `-ImplicitCastExpr 0x559be56032f0 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | |         |   | | |     `-StringLiteral 0x559be5603278 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | |         |   | | `-<<<NULL>>>
|   |   | | |         |   | `-CompoundAssignOperator 0x559be56034d8 <line:212:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | |         |   |   |-ArraySubscriptExpr 0x559be5603478 <col:13, col:42> 'long' lvalue
|   |   | | |         |   |   | |-ImplicitCastExpr 0x559be5603448 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | |         |   |   | | `-DeclRefExpr 0x559be5603358 <col:13> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   | | |         |   |   | `-ImplicitCastExpr 0x559be5603460 <col:30> 'int' <LValueToRValue>
|   |   | | |         |   |   |   `-DeclRefExpr 0x559be5603420 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |   `-ImplicitCastExpr 0x559be56034c0 <col:47> 'long' <IntegralCast>
|   |   | | |         |   |     `-IntegerLiteral 0x559be56034a0 <col:47> 'int' 1
|   |   | | |         |   `-<<<NULL>>>
|   |   | | |         `-<<<NULL>>>
|   |   | | `-ImplicitParamDecl 0x559be55fec38 <line:185:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:185:13) *'
|   |   | |-OMPCapturedExprDecl 0x559be56039e8 <line:186:21, col:34> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-ParenExpr 0x559be55fef80 <col:21, col:34> 'long'
|   |   | |   `-BinaryOperator 0x559be55fef58 <col:22, col:33> 'long' '-'
|   |   | |     |-ImplicitCastExpr 0x559be55fef28 <col:22> 'long' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x559be55fedd0 <col:22> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   | |     `-ImplicitCastExpr 0x559be55fef40 <col:33> 'long' <IntegralCast>
|   |   | |       `-IntegerLiteral 0x559be55fef08 <col:33> 'int' 1
|   |   | |-OMPCapturedExprDecl 0x559be5603d48 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-BinaryOperator 0x559be5603d20 <col:5, <invalid sloc>> 'long' '-'
|   |   | |   |-BinaryOperator 0x559be5603bf8 <col:5, col:37> 'long' '/'
|   |   | |   | |-ParenExpr 0x559be5603bc0 <col:5> 'long'
|   |   | |   | | `-BinaryOperator 0x559be5603b98 <col:21, col:37> 'long' '+'
|   |   | |   | |   |-BinaryOperator 0x559be5603b58 <col:21, <invalid sloc>> 'long' '-'
|   |   | |   | |   | |-BinaryOperator 0x559be5603af8 <col:21, col:14> 'long' '-'
|   |   | |   | |   | | |-ImplicitCastExpr 0x559be5603ac8 <col:21> 'long' <LValueToRValue>
|   |   | |   | |   | | | `-DeclRefExpr 0x559be5603a48 <col:21> 'long' lvalue OMPCapturedExpr 0x559be56039e8 '.capture_expr.' 'long'
|   |   | |   | |   | | `-ImplicitCastExpr 0x559be5603ae0 <col:14> 'long' <IntegralCast>
|   |   | |   | |   | |   `-IntegerLiteral 0x559be55fed48 <col:14> 'int' 0
|   |   | |   | |   | `-ImplicitCastExpr 0x559be5603b40 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |   | |   |   `-IntegerLiteral 0x559be5603b20 <<invalid sloc>> 'int' 1
|   |   | |   | |   `-ImplicitCastExpr 0x559be5603b80 <col:37> 'long' <IntegralCast>
|   |   | |   | |     `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | |   | `-ImplicitCastExpr 0x559be5603be0 <col:37> 'long' <IntegralCast>
|   |   | |   |   `-IntegerLiteral 0x559be56039b0 <col:37> 'int' 1
|   |   | |   `-ImplicitCastExpr 0x559be5603d08 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x559be5603ce8 <<invalid sloc>> 'int' 1
|   |   | |-RecordDecl 0x559be56052c0 <line:221:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be5605370 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be56054d8 <line:223:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be5605788 <line:225:9> col:9 implicit 'long (&)[15]'
|   |   | | `-FieldDecl 0x559be56058d0 <col:33> col:33 implicit 'long (&)[15]'
|   |   | `-CapturedDecl 0x559be56053b8 <<invalid sloc>> <invalid sloc>
|   |   |   |-CompoundStmt 0x559be5605a60 <line:222:5, line:228:5>
|   |   |   | `-ForStmt 0x559be5605a28 <line:223:7, line:226:7>
|   |   |   |   |-BinaryOperator 0x559be5605580 <line:223:12, col:16> 'long' '='
|   |   |   |   | |-DeclRefExpr 0x559be5605498 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be5605568 <col:16> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be5605548 <col:16> 'int' 0
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x559be5605620 <col:19, col:23> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x559be56055f0 <col:19> 'long' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x559be56055a8 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be5605608 <col:23> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be56055d0 <col:23> 'int' 15
|   |   |   |   |-UnaryOperator 0x559be5605670 <col:27, col:29> 'long' prefix '++'
|   |   |   |   | `-DeclRefExpr 0x559be5605648 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   `-CompoundStmt 0x559be5605a10 <line:224:7, line:226:7>
|   |   |   |     `-CompoundAssignOperator 0x559be56059d8 <line:225:9, col:51> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |   |       |-ArraySubscriptExpr 0x559be5605850 <col:9, col:28> 'long' lvalue
|   |   |   |       | |-ImplicitCastExpr 0x559be5605820 <col:9> 'long *' <ArrayToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x559be5605690 <col:9> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |   |   |       | `-ImplicitCastExpr 0x559be5605838 <col:27> 'long' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x559be56057f8 <col:27> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |       `-ImplicitCastExpr 0x559be56059c0 <col:33, col:51> 'long' <LValueToRValue>
|   |   |   |         `-ArraySubscriptExpr 0x559be5605998 <col:33, col:51> 'long' lvalue
|   |   |   |           |-ImplicitCastExpr 0x559be5605968 <col:33> 'long *' <ArrayToPointerDecay>
|   |   |   |           | `-DeclRefExpr 0x559be5605878 <col:33> 'long [15]' lvalue Var 0x559be55fe260 'sum_local_counts' 'long [15]'
|   |   |   |           `-ImplicitCastExpr 0x559be5605980 <col:50> 'long' <LValueToRValue>
|   |   |   |             `-DeclRefExpr 0x559be5605940 <col:50> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   `-ImplicitParamDecl 0x559be5605438 <line:221:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:221:13) *'
|   |   |-DeclRefExpr 0x559be55fee58 <line:186:22> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be55ff258 <line:188:19> 'double [N20_data]' lvalue Var 0x559be55fc240 'Z20_LIST' 'double [N20_data]'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be55ff618 <line:189:17> 'double [N20_data]' lvalue Var 0x559be55fc120 'DEC20_LIST' 'double [N20_data]'
|   |   |-DeclRefExpr 0x559be55ff7e8 <col:33> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be5600158 <line:190:16> 'double [N20_data]' lvalue Var 0x559be55fc000 'RA20_LIST' 'double [N20_data]'
|   |   |-DeclRefExpr 0x559be5602bf8 <line:206:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   |-DeclRefExpr 0x559be5602dc8 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   `-DeclRefExpr 0x559be5605730 <line:225:9> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |-CallExpr 0x559be5605d40 <line:230:3, col:41> 'int'
|   | |-ImplicitCastExpr 0x559be5605d28 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5605cb8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5605d88 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5605d70 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5605ce0 <col:10> 'char [29]' lvalue "FINISHED Mr20 NESTED LOOP. \n"
|   |-CallExpr 0x559be5605e10 <line:231:3, col:20> 'int'
|   | |-ImplicitCastExpr 0x559be5605df8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5605da0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5605e58 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5605e40 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5605dc8 <col:10> 'char [9]' lvalue "Counts: "
|   |-ForStmt 0x559be5606470 <line:232:3, line:236:3>
|   | |-BinaryOperator 0x559be5605ed0 <line:232:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be5605e70 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5605eb8 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5605e98 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be5605f70 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be5605f40 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be5605ef8 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5605f58 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5605f20 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be5605fe0 <col:23, col:25> 'long' prefix '++'
|   | | `-DeclRefExpr 0x559be5605f98 <col:25> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be5606450 <line:233:3, line:236:3>
|   |   |-BinaryOperator 0x559be5606290 <line:234:5, col:71> 'long' '='
|   |   | |-ArraySubscriptExpr 0x559be5606080 <col:5, col:24> 'long' lvalue
|   |   | | |-ImplicitCastExpr 0x559be5606050 <col:5> 'long *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x559be5606000 <col:5> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |   | | `-ImplicitCastExpr 0x559be5606068 <col:23> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559be5606028 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | `-ImplicitCastExpr 0x559be5606278 <col:28, col:71> 'long' <IntegralCast>
|   |   |   `-CStyleCastExpr 0x559be5606250 <col:28, col:71> 'long long' <FloatingToIntegral>
|   |   |     `-CallExpr 0x559be5606208 <col:40, col:71> 'double'
|   |   |       |-ImplicitCastExpr 0x559be56061f0 <col:40> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x559be56060a8 <col:40> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   |       `-BinaryOperator 0x559be56061c8 <col:46, col:69> 'double' '/'
|   |   |         |-ImplicitCastExpr 0x559be56061b0 <col:46, col:65> 'double' <IntegralToFloating>
|   |   |         | `-ImplicitCastExpr 0x559be5606198 <col:46, col:65> 'long' <LValueToRValue>
|   |   |         |   `-ArraySubscriptExpr 0x559be5606150 <col:46, col:65> 'long' lvalue
|   |   |         |     |-ImplicitCastExpr 0x559be5606120 <col:46> 'long *' <ArrayToPointerDecay>
|   |   |         |     | `-DeclRefExpr 0x559be56060d0 <col:46> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |   |         |     `-ImplicitCastExpr 0x559be5606138 <col:64> 'long' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x559be56060f8 <col:64> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |         `-FloatingLiteral 0x559be5606178 <col:69> 'double' 2.000000e+00
|   |   `-CallExpr 0x559be56063d0 <line:235:5, col:40> 'int'
|   |     |-ImplicitCastExpr 0x559be56063b8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be56062b8 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |-ImplicitCastExpr 0x559be5606420 <col:12> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x559be5606408 <col:12> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x559be56062e0 <col:12> 'char [5]' lvalue "%ld "
|   |     `-ImplicitCastExpr 0x559be5606438 <col:20, col:39> 'long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x559be5606390 <col:20, col:39> 'long' lvalue
|   |         |-ImplicitCastExpr 0x559be5606360 <col:20> 'long *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x559be5606310 <col:20> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |         `-ImplicitCastExpr 0x559be5606378 <col:38> 'long' <LValueToRValue>
|   |           `-DeclRefExpr 0x559be5606338 <col:38> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |-CallExpr 0x559be5606518 <line:238:3, col:14> 'int'
|   | |-ImplicitCastExpr 0x559be5606500 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be56064a8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5606560 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5606548 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be56064d0 <col:10> 'char [2]' lvalue "\n"
|   |-DeclStmt 0x559be5606638 <line:239:3, col:61>
|   | `-VarDecl 0x559be5606598 <col:3, col:39> col:21 used r20z_datafile 'const char [21]' static cinit
|   |   `-StringLiteral 0x559be56065f8 <col:39> 'const char [21]' lvalue "SDSS_Mr20_zspace.dat"
|   |-IfStmt 0x559be5606950 <line:241:3, line:245:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be5606930 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be5606910 <line:242:3, line:245:3>
|   | | |-CallExpr 0x559be5606820 <line:243:5, col:53> 'int'
|   | | | |-ImplicitCastExpr 0x559be5606808 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be5606790 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be5606868 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be5606850 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be56067b8 <col:12> 'char [39]' lvalue "input_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be56068e0 <line:244:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be56068c8 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be5606880 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be56068a8 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-CallExpr 0x559be5606a18 <line:247:3, col:48> 'int'
|   | |-ImplicitCastExpr 0x559be5606a00 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5606988 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5606a60 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5606a48 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be56069b0 <col:10> 'char [36]' lvalue "Opened file - Begining assignment.\n"
|   |-DeclStmt 0x559be5606b30 <line:248:3, col:37>
|   | `-VarDecl 0x559be5606a90 <col:3, col:24> col:12 used N20z_data 'long' cinit
|   |   `-ImplicitCastExpr 0x559be5606b18 <col:24> 'long' <LValueToRValue>
|   |     `-DeclRefExpr 0x559be5606af0 <col:24> 'long' lvalue Var 0x559be55e5fd8 'FILELENGTH20z' 'long'
|   |-DeclStmt 0x559be5606c50 <line:249:3, col:31>
|   | `-VarDecl 0x559be5606bf0 <col:3, col:30> col:10 used RA20z_LIST 'double [N20z_data]'
|   |-DeclStmt 0x559be5606d70 <line:250:3, col:32>
|   | `-VarDecl 0x559be5606d10 <col:3, col:31> col:10 used DEC20z_LIST 'double [N20z_data]'
|   |-DeclStmt 0x559be5606e90 <line:251:3, col:30>
|   | `-VarDecl 0x559be5606e30 <col:3, col:29> col:10 used Z20z_LIST 'double [N20z_data]'
|   |-ForStmt 0x559be5607858 <line:252:3, line:262:3>
|   | |-BinaryOperator 0x559be5606f08 <line:252:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be5606ea8 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5606ef0 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5606ed0 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be5606fb0 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be5606f80 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be5606f30 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5606f98 <col:19> 'long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559be5606f58 <col:19> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   | |-UnaryOperator 0x559be5607018 <col:30, col:31> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be5606ff0 <col:30> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be5607840 <line:253:3, line:262:3>
|   |   `-IfStmt 0x559be5607808 <line:257:5, line:260:5>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x559be56075d0 <line:257:9, col:28> 'int' '>='
|   |     | |-ImplicitCastExpr 0x559be56075b8 <col:9> 'long' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x559be56074d0 <col:9> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     | `-ParenExpr 0x559be5607598 <col:14, col:28> 'long'
|   |     |   `-BinaryOperator 0x559be5607570 <col:15, col:27> 'long' '-'
|   |     |     |-ImplicitCastExpr 0x559be5607540 <col:15> 'long' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x559be56074f8 <col:15> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |     |     `-ImplicitCastExpr 0x559be5607558 <col:27> 'long' <IntegralCast>
|   |     |       `-IntegerLiteral 0x559be5607520 <col:27> 'int' 2
|   |     |-CompoundStmt 0x559be56077f0 <line:258:5, line:260:5>
|   |     | `-CallExpr 0x559be5607770 <line:259:7, col:76> 'int'
|   |     |   |-ImplicitCastExpr 0x559be5607758 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x559be56075f8 <col:7> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |   |-ImplicitCastExpr 0x559be56077c0 <col:14> 'const char *' <BitCast>
|   |     |   | `-ImplicitCastExpr 0x559be56077a8 <col:14> 'char *' <ArrayToPointerDecay>
|   |     |   |   `-StringLiteral 0x559be5607658 <col:14> 'char [45]' lvalue "Close or exceeded N20z_data limit. RA: %lf \n"
|   |     |   `-ImplicitCastExpr 0x559be56077d8 <col:63, col:75> 'double' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x559be5607730 <col:63, col:75> 'double' lvalue
|   |     |       |-ImplicitCastExpr 0x559be5607700 <col:63> 'double *' <ArrayToPointerDecay>
|   |     |       | `-DeclRefExpr 0x559be56076b0 <col:63> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   |     |       `-ImplicitCastExpr 0x559be5607718 <col:74> 'long' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x559be56076d8 <col:74> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     `-<<<NULL>>>
|   |-CallExpr 0x559be5607988 <line:265:3, col:27> 'int'
|   | |-ImplicitCastExpr 0x559be5607970 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5607910 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be56079d0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be56079b8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5607938 <col:10> 'char [15]' lvalue "Closing File.\n"
|   |-CallExpr 0x559be5607a70 <line:266:3, col:39> 'int'
|   | |-ImplicitCastExpr 0x559be5607a58 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be56079e8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5607ab8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5607aa0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5607a10 <col:10> 'char [27]' lvalue "Beginning Nested Loops...\n"
|   |-OMPParallelDirective 0x559be5610370 <line:267:11, col:207>
|   | |-OMPSharedClause 0x559be5607bc0 <col:24, col:98>
|   | | |-DeclRefExpr 0x559be5607ad0 <col:32> 'double [N20z_data]' lvalue Var 0x559be5606e30 'Z20z_LIST' 'double [N20z_data]'
|   | | |-DeclRefExpr 0x559be5607af8 <col:43> 'double [N20z_data]' lvalue Var 0x559be5606d10 'DEC20z_LIST' 'double [N20z_data]'
|   | | |-DeclRefExpr 0x559be5607b20 <col:56> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   | | |-DeclRefExpr 0x559be5607b48 <col:68> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   | | |-DeclRefExpr 0x559be5607b70 <col:79> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   | | `-DeclRefExpr 0x559be5607b98 <col:91> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   | |-OMPPrivateClause 0x559be5608960 <col:98, col:207>
|   | | |-DeclRefExpr 0x559be5607c08 <col:107> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   | | |-DeclRefExpr 0x559be5607c30 <col:112> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   | | |-DeclRefExpr 0x559be5607c58 <col:120> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   | | |-DeclRefExpr 0x559be5607c80 <col:123> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   | | |-DeclRefExpr 0x559be5607ca8 <col:127> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   | | |-DeclRefExpr 0x559be5607cd0 <col:136> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   | | |-DeclRefExpr 0x559be5607cf8 <col:146> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   | | |-DeclRefExpr 0x559be5607d20 <col:154> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   | | |-DeclRefExpr 0x559be5607d48 <col:163> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   | | |-DeclRefExpr 0x559be5607d70 <col:167> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   | | |-DeclRefExpr 0x559be5607d98 <col:171> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   | | |-DeclRefExpr 0x559be5607dc0 <col:175> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   | | |-DeclRefExpr 0x559be5607de8 <col:179> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   | | |-DeclRefExpr 0x559be5607e10 <col:183> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   | | |-DeclRefExpr 0x559be5607e38 <col:187> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   | | |-DeclRefExpr 0x559be5607e60 <col:201> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-DeclRefExpr 0x559be5607e88 <col:204> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   | `-CapturedStmt 0x559be5610230 <line:268:3, line:315:3>
|   |   |-CapturedDecl 0x559be5608b78 <<invalid sloc>> <invalid sloc>
|   |   | |-CompoundStmt 0x559be5610200 <line:268:3, line:315:3>
|   |   | | |-DeclStmt 0x559be5608dd0 <line:269:5, col:34>
|   |   | | | `-VarDecl 0x559be5608d70 <col:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | | |-CallExpr 0x559be5608fd0 <line:270:5, col:67> 'void *'
|   |   | | | |-ImplicitCastExpr 0x559be5608fb8 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559be5608de8 <col:5> 'void *(void *, int, unsigned long)' Function 0x559be55ef208 'memset' 'void *(void *, int, unsigned long)'
|   |   | | | |-ImplicitCastExpr 0x559be5609048 <col:12> 'void *' <BitCast>
|   |   | | | | `-ImplicitCastExpr 0x559be5609030 <col:12> 'long *' <ArrayToPointerDecay>
|   |   | | | |   `-DeclRefExpr 0x559be5608e10 <col:12> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   | | | |-IntegerLiteral 0x559be5608e38 <col:30> 'int' 0
|   |   | | | `-BinaryOperator 0x559be5608f78 <col:33, col:66> 'unsigned long' '*'
|   |   | | |   |-ImplicitCastExpr 0x559be5608f60 <col:33> 'unsigned long' <IntegralCast>
|   |   | | |   | `-IntegerLiteral 0x559be5608e58 <col:33> 'int' 15
|   |   | | |   `-ParenExpr 0x559be5608f40 <col:38, col:66> 'unsigned long'
|   |   | | |     `-UnaryExprOrTypeTraitExpr 0x559be5608f20 <col:39, col:65> 'unsigned long' sizeof
|   |   | | |       `-ParenExpr 0x559be5608f00 <col:45, col:65> 'long' lvalue
|   |   | | |         `-ArraySubscriptExpr 0x559be5608ed8 <col:46, col:64> 'long' lvalue
|   |   | | |           |-ImplicitCastExpr 0x559be5608ec0 <col:46> 'long *' <ArrayToPointerDecay>
|   |   | | |           | `-DeclRefExpr 0x559be5608e78 <col:46> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   | | |           `-IntegerLiteral 0x559be5608ea0 <col:63> 'int' 0
|   |   | | |-OMPForDirective 0x559be560f8c8 <line:271:13, col:44>
|   |   | | | |-OMPScheduleClause 0x559be5609128 <col:21, col:43>
|   |   | | | | `-ImplicitCastExpr 0x559be5609110 <col:38> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be5609060 <col:38> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   |   | | | |-CapturedStmt 0x559be560ddd8 <line:272:5, line:305:5>
|   |   | | | | |-CapturedDecl 0x559be5609268 <<invalid sloc>> <invalid sloc>
|   |   | | | | | |-ForStmt 0x559be560dda0 <line:272:5, line:305:5>
|   |   | | | | | | |-BinaryOperator 0x559be5609430 <line:272:10, col:14> 'long' '='
|   |   | | | | | | | |-DeclRefExpr 0x559be5609348 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ImplicitCastExpr 0x559be5609418 <col:14> 'long' <IntegralCast>
|   |   | | | | | | |   `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | | | | | |-<<<NULL>>>
|   |   | | | | | | |-BinaryOperator 0x559be5609668 <col:17, col:35> 'int' '<'
|   |   | | | | | | | |-ImplicitCastExpr 0x559be5609650 <col:17> 'long' <LValueToRValue>
|   |   | | | | | | | | `-DeclRefExpr 0x559be5609458 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ParenExpr 0x559be5609630 <col:21, col:35> 'long'
|   |   | | | | | | |   `-BinaryOperator 0x559be5609608 <col:22, col:34> 'long' '-'
|   |   | | | | | | |     |-ImplicitCastExpr 0x559be56095d8 <col:22> 'long' <LValueToRValue>
|   |   | | | | | | |     | `-DeclRefExpr 0x559be5609480 <col:22> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   | | | | | | |     `-ImplicitCastExpr 0x559be56095f0 <col:34> 'long' <IntegralCast>
|   |   | | | | | | |       `-IntegerLiteral 0x559be56095b8 <col:34> 'int' 1
|   |   | | | | | | |-UnaryOperator 0x559be56096b8 <col:38, col:40> 'long' prefix '++'
|   |   | | | | | | | `-DeclRefExpr 0x559be5609690 <col:40> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | `-CompoundStmt 0x559be560dd58 <line:273:5, line:305:5>
|   |   | | | | | |   |-BinaryOperator 0x559be5609a90 <line:274:7, col:30> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be56096d8 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5609a68 <col:11, col:30> 'double' '*'
|   |   | | | | | |   |   |-FloatingLiteral 0x559be5609788 <col:11> 'double' 2.998000e+03
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be5609a50 <col:19, col:30> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-ArraySubscriptExpr 0x559be5609a28 <col:19, col:30> 'double' lvalue
|   |   | | | | | |   |       |-ImplicitCastExpr 0x559be56099f8 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |       | `-DeclRefExpr 0x559be5609868 <col:19> 'double [N20z_data]' lvalue Var 0x559be5606e30 'Z20z_LIST' 'double [N20z_data]'
|   |   | | | | | |   |       `-ImplicitCastExpr 0x559be5609a10 <col:29> 'long' <LValueToRValue>
|   |   | | | | | |   |         `-DeclRefExpr 0x559be56099d0 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |-BinaryOperator 0x559be5609fa0 <line:275:7, col:34> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5609ab8 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5609f78 <col:17, col:34> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be5609f48 <col:17, col:30> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be5609de8 <col:17, col:30> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be5609db8 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be5609c28 <col:17> 'double [N20z_data]' lvalue Var 0x559be5606d10 'DEC20z_LIST' 'double [N20z_data]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be5609dd0 <col:29> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be5609d90 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be5609f60 <col:34> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be5609e10 <col:34> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be560a3b0 <line:276:7, col:32> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5609fc8 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be560a388 <col:16, col:32> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be560a358 <col:16, col:28> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be560a308 <col:16, col:28> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be560a2d8 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be560a148 <col:16> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be560a2f0 <col:27> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be560a2b0 <col:27> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be560a370 <col:32> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be560a330 <col:32> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be560a698 <line:277:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be560a3d8 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be560a670 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be560a5a0 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be560a578 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be560a560 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be560a488 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be560a518 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be560a500 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be560a4b0 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be560a548 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be560a4d8 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be560a628 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be560a610 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be560a5c0 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be560a658 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be560a5e8 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be560a980 <line:278:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be560a6c0 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be560a958 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be560a888 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be560a860 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be560a848 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be560a770 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be560a800 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be560a7e8 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be560a798 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be560a830 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be560a7c0 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be560a910 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be560a8f8 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be560a8a8 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be560a940 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be560a8d0 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be560ab70 <line:279:7, col:27> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be560a9a8 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be560ab48 <col:12, col:27> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be560ab30 <col:12> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-DeclRefExpr 0x559be560aa58 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be560aae8 <col:16, col:27> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be560aad0 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be560aa80 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be560ab18 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be560aaa8 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   `-ForStmt 0x559be560dd20 <line:280:7, line:303:7>
|   |   | | | | | |     |-BinaryOperator 0x559be560ac80 <line:280:12, col:16> 'long' '='
|   |   | | | | | |     | |-DeclRefExpr 0x559be560ab98 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ImplicitCastExpr 0x559be560ac68 <col:16> 'long' <IntegralCast>
|   |   | | | | | |     |   `-IntegerLiteral 0x559be560ac48 <col:16> 'int' 0
|   |   | | | | | |     |-<<<NULL>>>
|   |   | | | | | |     |-BinaryOperator 0x559be560ada8 <col:19, col:37> 'int' '<'
|   |   | | | | | |     | |-ImplicitCastExpr 0x559be560ad90 <col:19> 'long' <LValueToRValue>
|   |   | | | | | |     | | `-DeclRefExpr 0x559be560aca8 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ParenExpr 0x559be560ad70 <col:23, col:37> 'long'
|   |   | | | | | |     |   `-BinaryOperator 0x559be560ad48 <col:24, col:36> 'long' '-'
|   |   | | | | | |     |     |-ImplicitCastExpr 0x559be560ad18 <col:24> 'long' <LValueToRValue>
|   |   | | | | | |     |     | `-DeclRefExpr 0x559be560acd0 <col:24> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   | | | | | |     |     `-ImplicitCastExpr 0x559be560ad30 <col:36> 'long' <IntegralCast>
|   |   | | | | | |     |       `-IntegerLiteral 0x559be560acf8 <col:36> 'int' 1
|   |   | | | | | |     |-UnaryOperator 0x559be560adf8 <col:40, col:42> 'long' prefix '++'
|   |   | | | | | |     | `-DeclRefExpr 0x559be560add0 <col:42> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     `-CompoundStmt 0x559be560dd08 <line:281:7, line:303:7>
|   |   | | | | | |       `-IfStmt 0x559be560dcd0 <line:282:9, line:301:9>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-BinaryOperator 0x559be560ae98 <line:282:13, col:18> 'int' '!='
|   |   | | | | | |         | |-ImplicitCastExpr 0x559be560ae68 <col:13> 'long' <LValueToRValue>
|   |   | | | | | |         | | `-DeclRefExpr 0x559be560ae18 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | `-ImplicitCastExpr 0x559be560ae80 <col:18> 'long' <LValueToRValue>
|   |   | | | | | |         |   `-DeclRefExpr 0x559be560ae40 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |         |-CompoundStmt 0x559be560dc70 <line:283:9, line:301:9>
|   |   | | | | | |         | |-BinaryOperator 0x559be560b398 <line:284:11, col:35> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560aec0 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be560b370 <col:16, col:35> 'double' '*'
|   |   | | | | | |         | |   |-FloatingLiteral 0x559be560af70 <col:16> 'double' 2.998000e+03
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be560b358 <col:24, col:35> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-ArraySubscriptExpr 0x559be560b330 <col:24, col:35> 'double' lvalue
|   |   | | | | | |         | |       |-ImplicitCastExpr 0x559be560afe0 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |       | `-DeclRefExpr 0x559be560af90 <col:24> 'double [N20z_data]' lvalue Var 0x559be5606e30 'Z20z_LIST' 'double [N20z_data]'
|   |   | | | | | |         | |       `-ImplicitCastExpr 0x559be560aff8 <col:34> 'long' <LValueToRValue>
|   |   | | | | | |         | |         `-DeclRefExpr 0x559be560afb8 <col:34> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |-BinaryOperator 0x559be560b598 <line:285:11, col:39> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560b3c0 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be560b570 <col:22, col:39> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be560b540 <col:22, col:35> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be560b4f0 <col:22, col:35> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be560b4c0 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be560b470 <col:22> 'double [N20z_data]' lvalue Var 0x559be5606d10 'DEC20z_LIST' 'double [N20z_data]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be560b4d8 <col:34> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be560b498 <col:34> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be560b558 <col:39> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be560b518 <col:39> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be560b798 <line:286:11, col:37> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560b5c0 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be560b770 <col:21, col:37> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be560b740 <col:21, col:33> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be560b6f0 <col:21, col:33> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be560b6c0 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be560b670 <col:21> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be560b6d8 <col:32> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be560b698 <col:32> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be560b758 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be560b718 <col:37> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be560ba80 <line:287:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560b7c0 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be560ba58 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be560b988 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be560b960 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be560b948 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be560b870 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be560b900 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be560b8e8 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be560b898 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be560b930 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be560b8c0 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be560ba10 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be560b9f8 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be560b9a8 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be560ba40 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be560b9d0 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be560bd68 <line:288:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560baa8 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be560bd40 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be560bc70 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be560bc48 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be560bc30 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be560bb58 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be560bbe8 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be560bbd0 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be560bb80 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be560bc18 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be560bba8 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be560bcf8 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be560bce0 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be560bc90 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be560bd28 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be560bcb8 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be560bf58 <line:289:11, col:33> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560bd90 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be560bf30 <col:16, col:33> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be560bf18 <col:16> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be560be40 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be560bed0 <col:21, col:33> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be560beb8 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be560be68 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be560bf00 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be560be90 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be560cc68 <line:290:11, col:93> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560bf80 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be560cc40 <col:17, col:93> 'double' '+'
|   |   | | | | | |         | |   |-ParenExpr 0x559be560ca48 <col:17, col:67> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be560ca20 <col:18, col:66> 'double' '+'
|   |   | | | | | |         | |   |   |-ParenExpr 0x559be560c1e8 <col:18, col:40> 'double'
|   |   | | | | | |         | |   |   | `-BinaryOperator 0x559be560c1c0 <col:19, col:39> 'double' '*'
|   |   | | | | | |         | |   |   |   |-ParenExpr 0x559be560c0d8 <col:19, col:27> 'double'
|   |   | | | | | |         | |   |   |   | `-BinaryOperator 0x559be560c0b0 <col:20, col:25> 'double' '-'
|   |   | | | | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be560c080 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |   | `-DeclRefExpr 0x559be560c030 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be560c098 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |     `-DeclRefExpr 0x559be560c058 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   |   `-ParenExpr 0x559be560c1a0 <col:31, col:39> 'double'
|   |   | | | | | |         | |   |   |     `-BinaryOperator 0x559be560c178 <col:32, col:37> 'double' '-'
|   |   | | | | | |         | |   |   |       |-ImplicitCastExpr 0x559be560c148 <col:32> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |       | `-DeclRefExpr 0x559be560c0f8 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |       `-ImplicitCastExpr 0x559be560c160 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |         `-DeclRefExpr 0x559be560c120 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   `-ParenExpr 0x559be560ca00 <col:44, col:66> 'double'
|   |   | | | | | |         | |   |     `-BinaryOperator 0x559be560c9d8 <col:45, col:65> 'double' '*'
|   |   | | | | | |         | |   |       |-ParenExpr 0x559be560c2b0 <col:45, col:53> 'double'
|   |   | | | | | |         | |   |       | `-BinaryOperator 0x559be560c288 <col:46, col:51> 'double' '-'
|   |   | | | | | |         | |   |       |   |-ImplicitCastExpr 0x559be560c258 <col:46> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |   | `-DeclRefExpr 0x559be560c208 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |       |   `-ImplicitCastExpr 0x559be560c270 <col:51> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |     `-DeclRefExpr 0x559be560c230 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   |       `-ParenExpr 0x559be560c9b8 <col:57, col:65> 'double'
|   |   | | | | | |         | |   |         `-BinaryOperator 0x559be560c990 <col:58, col:63> 'double' '-'
|   |   | | | | | |         | |   |           |-ImplicitCastExpr 0x559be560c960 <col:58> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |           | `-DeclRefExpr 0x559be560c2d0 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |           `-ImplicitCastExpr 0x559be560c978 <col:63> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |             `-DeclRefExpr 0x559be560c2f8 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   `-ParenExpr 0x559be560cc20 <col:71, col:93> 'double'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be560cbf8 <col:72, col:92> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be560cb10 <col:72, col:80> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be560cae8 <col:73, col:78> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be560cab8 <col:73> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be560ca68 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be560cad0 <col:78> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be560ca90 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be560cbd8 <col:84, col:92> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be560cbb0 <col:85, col:90> 'double' '-'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be560cb80 <col:85> 'double' <LValueToRValue>
|   |   | | | | | |         | |           | `-DeclRefExpr 0x559be560cb30 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |           `-ImplicitCastExpr 0x559be560cb98 <col:90> 'double' <LValueToRValue>
|   |   | | | | | |         | |             `-DeclRefExpr 0x559be560cb58 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be560cdf0 <line:291:11, col:29> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560cc90 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | | `-CallExpr 0x559be560cda8 <col:20, col:29> 'double'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be560cd90 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be560cd40 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be560cdd8 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be560cd68 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be560d3d0 <line:292:11, col:94> 'int' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be560ce18 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         | | `-CStyleCastExpr 0x559be560d3a8 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | | | | |         | |   `-CallExpr 0x559be560d360 <col:32, col:94> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be560d348 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be560cec8 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be560d320 <col:38, col:93> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be560d0a8 <col:38, col:58> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be560d080 <col:39, col:48> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be560d050 <col:39> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be560cef0 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be560d068 <col:48> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be560cf18 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be560d300 <col:62, col:93> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be560d2d8 <col:63, col:92> 'double' '/'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be560d2c0 <col:63> 'double' <IntegralToFloating>
|   |   | | | | | |         | |           | `-IntegerLiteral 0x559be560d0c8 <col:63> 'int' 15
|   |   | | | | | |         | |           `-ParenExpr 0x559be560d2a0 <col:68, col:92> 'double'
|   |   | | | | | |         | |             `-BinaryOperator 0x559be560d278 <col:69, col:82> 'double' '-'
|   |   | | | | | |         | |               |-ImplicitCastExpr 0x559be560d248 <col:69> 'double' <LValueToRValue>
|   |   | | | | | |         | |               | `-DeclRefExpr 0x559be560d0e8 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | | |         | |               `-ImplicitCastExpr 0x559be560d260 <col:82> 'double' <LValueToRValue>
|   |   | | | | | |         | |                 `-DeclRefExpr 0x559be560d220 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | `-IfStmt 0x559be560d8d8 <line:293:11, line:299:11>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-BinaryOperator 0x559be560d548 <line:293:15, col:56> 'int' '&&'
|   |   | | | | | |         |   | |-ParenExpr 0x559be560d480 <col:15, col:33> 'int'
|   |   | | | | | |         |   | | `-BinaryOperator 0x559be560d458 <col:16, col:32> 'int' '>='
|   |   | | | | | |         |   | |   |-ImplicitCastExpr 0x559be560d440 <col:16> 'int' <LValueToRValue>
|   |   | | | | | |         |   | |   | `-DeclRefExpr 0x559be560d3f8 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | |   `-IntegerLiteral 0x559be560d420 <col:32> 'int' 0
|   |   | | | | | |         |   | `-ParenExpr 0x559be560d528 <col:38, col:56> 'int'
|   |   | | | | | |         |   |   `-BinaryOperator 0x559be560d500 <col:39, col:54> 'int' '<'
|   |   | | | | | |         |   |     |-ImplicitCastExpr 0x559be560d4e8 <col:39> 'int' <LValueToRValue>
|   |   | | | | | |         |   |     | `-DeclRefExpr 0x559be560d4a0 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be560d4c8 <col:54> 'int' 15
|   |   | | | | | |         |   |-CompoundStmt 0x559be560d8b8 <line:294:11, line:299:11>
|   |   | | | | | |         |   | |-IfStmt 0x559be560d6c8 <line:295:13, line:296:32>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-BinaryOperator 0x559be560d5d0 <line:295:17, col:33> 'int' '>='
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be560d5b8 <col:17> 'int' <LValueToRValue>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be560d570 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | | | `-IntegerLiteral 0x559be560d598 <col:33> 'int' 15
|   |   | | | | | |         |   | | |-CallExpr 0x559be560d668 <line:296:15, col:32> 'int'
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be560d650 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be560d5f8 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | | | | |         |   | | | `-ImplicitCastExpr 0x559be560d6b0 <col:22> 'const char *' <BitCast>
|   |   | | | | | |         |   | | |   `-ImplicitCastExpr 0x559be560d698 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | | | | |         |   | | |     `-StringLiteral 0x559be560d620 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | | | | |         |   | | `-<<<NULL>>>
|   |   | | | | | |         |   | `-CompoundAssignOperator 0x559be560d880 <line:298:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | | | | |         |   |   |-ArraySubscriptExpr 0x559be560d820 <col:13, col:42> 'long' lvalue
|   |   | | | | | |         |   |   | |-ImplicitCastExpr 0x559be560d7f0 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | | | | |         |   |   | | `-DeclRefExpr 0x559be560d700 <col:13> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   | | | | | |         |   |   | `-ImplicitCastExpr 0x559be560d808 <col:30> 'int' <LValueToRValue>
|   |   | | | | | |         |   |   |   `-DeclRefExpr 0x559be560d7c8 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |   `-ImplicitCastExpr 0x559be560d868 <col:47> 'long' <IntegralCast>
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be560d848 <col:47> 'int' 1
|   |   | | | | | |         |   `-<<<NULL>>>
|   |   | | | | | |         `-<<<NULL>>>
|   |   | | | | | `-ImplicitParamDecl 0x559be56092e8 <line:271:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:271:13) *'
|   |   | | | | |-DeclRefExpr 0x559be56093d0 <line:272:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | |-DeclRefExpr 0x559be5609590 <col:22> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   | | | | |-DeclRefExpr 0x559be5609760 <line:274:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be56099a8 <col:19> 'double [N20z_data]' lvalue Var 0x559be5606e30 'Z20z_LIST' 'double [N20z_data]'
|   |   | | | | |-DeclRefExpr 0x559be5609b40 <line:275:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be5609d68 <col:17> 'double [N20z_data]' lvalue Var 0x559be5606d10 'DEC20z_LIST' 'double [N20z_data]'
|   |   | | | | |-DeclRefExpr 0x559be5609f20 <col:34> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560a068 <line:276:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be560a288 <col:16> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   |   | | | | |-DeclRefExpr 0x559be560a460 <line:277:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560a748 <line:278:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560aa30 <line:279:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560ac20 <line:280:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | |-DeclRefExpr 0x559be560af48 <line:284:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560b448 <line:285:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560b648 <line:286:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560b848 <line:287:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560bb30 <line:288:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560be18 <line:289:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560c008 <line:290:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560cd18 <line:291:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560cea0 <line:292:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | |-DeclRefExpr 0x559be560d028 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | |-DeclRefExpr 0x559be560d1f8 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | `-DeclRefExpr 0x559be560d7a0 <line:298:13> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   | | | |-DeclRefExpr 0x559be560e968 <line:272:10> 'long' lvalue Var 0x559be560e908 '.omp.iv' 'long'
|   |   | | | |-ImplicitCastExpr 0x559be560e4b8 <col:5> 'long' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559be560e490 <col:5> 'long' lvalue OMPCapturedExpr 0x559be560e430 '.capture_expr.' 'long'
|   |   | | | |-<<<NULL>>>
|   |   | | | |-ImplicitCastExpr 0x559be560e198 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | | | | `-BinaryOperator 0x559be560e170 <col:14, col:21> 'int' '<'
|   |   | | | |   |-ImplicitCastExpr 0x559be560e0b8 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | | |   `-ImplicitCastExpr 0x559be560e158 <col:21> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be560e130 <col:21> 'long' lvalue OMPCapturedExpr 0x559be560e0d0 '.capture_expr.' 'long'
|   |   | | | |-BinaryOperator 0x559be560ea00 <col:10> 'int' '<='
|   |   | | | | |-ImplicitCastExpr 0x559be560e9d0 <col:10> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be560e968 <col:10> 'long' lvalue Var 0x559be560e908 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be560e9e8 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be560e680 <col:10> 'long' lvalue Var 0x559be560e620 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be560e9a8 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be560e968 <col:10> 'long' lvalue Var 0x559be560e908 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be560e990 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be560e5a8 <col:10> 'long' lvalue Var 0x559be560e548 '.omp.lb' 'long'
|   |   | | | |-BinaryOperator 0x559be560eaa0 <col:10, <invalid sloc>> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be560e968 <col:10> 'long' lvalue Var 0x559be560e908 '.omp.iv' 'long'
|   |   | | | | `-BinaryOperator 0x559be560ea78 <col:10, <invalid sloc>> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be560ea48 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be560e968 <col:10> 'long' lvalue Var 0x559be560e908 '.omp.iv' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be560ea60 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     `-IntegerLiteral 0x559be560ea28 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclStmt 0x559be560f898 <<invalid sloc>>
|   |   | | | | |-OMPCapturedExprDecl 0x559be560e0d0 <col:21, col:35> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | | | `-ParenExpr 0x559be5609630 <col:21, col:35> 'long'
|   |   | | | | |   `-BinaryOperator 0x559be5609608 <col:22, col:34> 'long' '-'
|   |   | | | | |     |-ImplicitCastExpr 0x559be56095d8 <col:22> 'long' <LValueToRValue>
|   |   | | | | |     | `-DeclRefExpr 0x559be5609480 <col:22> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   | | | | |     `-ImplicitCastExpr 0x559be56095f0 <col:34> 'long' <IntegralCast>
|   |   | | | | |       `-IntegerLiteral 0x559be56095b8 <col:34> 'int' 1
|   |   | | | | `-OMPCapturedExprDecl 0x559be560e430 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | |   `-BinaryOperator 0x559be560e408 <col:5, <invalid sloc>> 'long' '-'
|   |   | | | |     |-BinaryOperator 0x559be560e2e0 <col:5, col:38> 'long' '/'
|   |   | | | |     | |-ParenExpr 0x559be560e2a8 <col:5> 'long'
|   |   | | | |     | | `-BinaryOperator 0x559be560e280 <col:21, col:38> 'long' '+'
|   |   | | | |     | |   |-BinaryOperator 0x559be560e240 <col:21, <invalid sloc>> 'long' '-'
|   |   | | | |     | |   | |-BinaryOperator 0x559be560e1e0 <col:21, col:14> 'long' '-'
|   |   | | | |     | |   | | |-ImplicitCastExpr 0x559be560e1b0 <col:21> 'long' <LValueToRValue>
|   |   | | | |     | |   | | | `-DeclRefExpr 0x559be560e130 <col:21> 'long' lvalue OMPCapturedExpr 0x559be560e0d0 '.capture_expr.' 'long'
|   |   | | | |     | |   | | `-ImplicitCastExpr 0x559be560e1c8 <col:14> 'long' <IntegralCast>
|   |   | | | |     | |   | |   `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | | |     | |   | `-ImplicitCastExpr 0x559be560e228 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     | |   |   `-IntegerLiteral 0x559be560e208 <<invalid sloc>> 'int' 1
|   |   | | | |     | |   `-ImplicitCastExpr 0x559be560e268 <col:38> 'long' <IntegralCast>
|   |   | | | |     | |     `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | | | |     | `-ImplicitCastExpr 0x559be560e2c8 <col:38> 'long' <IntegralCast>
|   |   | | | |     |   `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | | | |     `-ImplicitCastExpr 0x559be560e3f0 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be560e3d0 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be560e720 <col:10> 'int' lvalue Var 0x559be560e6c0 '.omp.is_last' 'int'
|   |   | | | |-DeclRefExpr 0x559be560e5a8 <col:10> 'long' lvalue Var 0x559be560e548 '.omp.lb' 'long'
|   |   | | | |-DeclRefExpr 0x559be560e680 <col:10> 'long' lvalue Var 0x559be560e620 '.omp.ub' 'long'
|   |   | | | |-DeclRefExpr 0x559be560e7e0 <col:10> 'long' lvalue Var 0x559be560e780 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be560e8c8 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be560e680 <col:10> 'long' lvalue Var 0x559be560e620 '.omp.ub' 'long'
|   |   | | | | `-ConditionalOperator 0x559be560e898 <col:10> 'long'
|   |   | | | |   |-BinaryOperator 0x559be560e858 <col:10, col:5> 'int' '>'
|   |   | | | |   | |-ImplicitCastExpr 0x559be560e840 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | | `-DeclRefExpr 0x559be560e680 <col:10> 'long' lvalue Var 0x559be560e620 '.omp.ub' 'long'
|   |   | | | |   | `-ImplicitCastExpr 0x559be560e4b8 <col:5> 'long' <LValueToRValue>
|   |   | | | |   |   `-DeclRefExpr 0x559be560e490 <col:5> 'long' lvalue OMPCapturedExpr 0x559be560e430 '.capture_expr.' 'long'
|   |   | | | |   |-ImplicitCastExpr 0x559be560e4b8 <col:5> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be560e490 <col:5> 'long' lvalue OMPCapturedExpr 0x559be560e430 '.capture_expr.' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be560e880 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be560e680 <col:10> 'long' lvalue Var 0x559be560e620 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be560eb20 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be560e5a8 <col:10> 'long' lvalue Var 0x559be560e548 '.omp.lb' 'long'
|   |   | | | | `-BinaryOperator 0x559be560eaf8 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be560eac8 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be560e5a8 <col:10> 'long' lvalue Var 0x559be560e548 '.omp.lb' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be560eae0 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be560e7e0 <col:10> 'long' lvalue Var 0x559be560e780 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be560eba0 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be560e680 <col:10> 'long' lvalue Var 0x559be560e620 '.omp.ub' 'long'
|   |   | | | | `-BinaryOperator 0x559be560eb78 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be560eb48 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be560e680 <col:10> 'long' lvalue Var 0x559be560e620 '.omp.ub' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be560eb60 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be560e7e0 <col:10> 'long' lvalue Var 0x559be560e780 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be560e508 <col:5, <invalid sloc>> 'long' '+'
|   |   | | | | |-ImplicitCastExpr 0x559be560e4b8 <col:5> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be560e490 <col:5> 'long' lvalue OMPCapturedExpr 0x559be560e430 '.capture_expr.' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be560e4f0 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be560e4d0 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be560e308 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | |-DeclRefExpr 0x559be560e3a8 <col:5> 'long' lvalue Var 0x559be560e348 'i' 'long'
|   |   | | | |-BinaryOperator 0x559be560ec08 <col:5, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be560ebc8 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be560ebf0 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | | |-BinaryOperator 0x559be560f790 <col:5, col:38> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be560ebc8 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-BinaryOperator 0x559be560f768 <col:14, col:38> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be560f750 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | | |   `-BinaryOperator 0x559be560f728 <col:38> 'long' '*'
|   |   | | | |     |-ImplicitCastExpr 0x559be560ec50 <col:38> 'long' <LValueToRValue>
|   |   | | | |     | `-ParenExpr 0x559be560ec30 <col:38> 'long' lvalue
|   |   | | | |     |   `-DeclRefExpr 0x559be560e968 <col:10> 'long' lvalue Var 0x559be560e908 '.omp.iv' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be560f710 <col:38> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | | | `-BinaryOperator 0x559be560f858 <col:5, col:38> 'long' '='
|   |   | | |   |-DeclRefExpr 0x559be560ebc8 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   `-BinaryOperator 0x559be560f830 <col:14, col:38> 'long' '+'
|   |   | | |     |-ImplicitCastExpr 0x559be560f818 <col:14> 'long' <IntegralCast>
|   |   | | |     | `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | |     `-BinaryOperator 0x559be560f7f0 <col:38> 'long' '*'
|   |   | | |       |-ParenExpr 0x559be560f7b8 <col:38> 'long'
|   |   | | |       | `-BinaryOperator 0x559be560e2e0 <col:5, col:38> 'long' '/'
|   |   | | |       |   |-ParenExpr 0x559be560e2a8 <col:5> 'long'
|   |   | | |       |   | `-BinaryOperator 0x559be560e280 <col:21, col:38> 'long' '+'
|   |   | | |       |   |   |-BinaryOperator 0x559be560e240 <col:21, <invalid sloc>> 'long' '-'
|   |   | | |       |   |   | |-BinaryOperator 0x559be560e1e0 <col:21, col:14> 'long' '-'
|   |   | | |       |   |   | | |-ImplicitCastExpr 0x559be560e1b0 <col:21> 'long' <LValueToRValue>
|   |   | | |       |   |   | | | `-DeclRefExpr 0x559be560e130 <col:21> 'long' lvalue OMPCapturedExpr 0x559be560e0d0 '.capture_expr.' 'long'
|   |   | | |       |   |   | | `-ImplicitCastExpr 0x559be560e1c8 <col:14> 'long' <IntegralCast>
|   |   | | |       |   |   | |   `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | |       |   |   | `-ImplicitCastExpr 0x559be560e228 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | |       |   |   |   `-IntegerLiteral 0x559be560e208 <<invalid sloc>> 'int' 1
|   |   | | |       |   |   `-ImplicitCastExpr 0x559be560e268 <col:38> 'long' <IntegralCast>
|   |   | | |       |   |     `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | | |       |   `-ImplicitCastExpr 0x559be560e2c8 <col:38> 'long' <IntegralCast>
|   |   | | |       |     `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | | |       `-ImplicitCastExpr 0x559be560f7d8 <col:38> 'long' <IntegralCast>
|   |   | | |         `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | | `-OMPCriticalDirective 0x559be56101c0 <line:307:13, col:25>
|   |   | |   `-CapturedStmt 0x559be5610158 <line:308:5, line:314:5>
|   |   | |     |-CapturedDecl 0x559be560fa98 <<invalid sloc>> <invalid sloc>
|   |   | |     | |-CompoundStmt 0x559be5610140 <line:308:5, line:314:5>
|   |   | |     | | `-ForStmt 0x559be5610108 <line:309:7, line:312:7>
|   |   | |     | |   |-BinaryOperator 0x559be560fc60 <line:309:12, col:16> 'long' '='
|   |   | |     | |   | |-DeclRefExpr 0x559be560fb78 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be560fc48 <col:16> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be560fc28 <col:16> 'int' 0
|   |   | |     | |   |-<<<NULL>>>
|   |   | |     | |   |-BinaryOperator 0x559be560fd00 <col:19, col:23> 'int' '<'
|   |   | |     | |   | |-ImplicitCastExpr 0x559be560fcd0 <col:19> 'long' <LValueToRValue>
|   |   | |     | |   | | `-DeclRefExpr 0x559be560fc88 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be560fce8 <col:23> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be560fcb0 <col:23> 'int' 15
|   |   | |     | |   |-UnaryOperator 0x559be560fd50 <col:27, col:29> 'long' prefix '++'
|   |   | |     | |   | `-DeclRefExpr 0x559be560fd28 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   `-CompoundStmt 0x559be56100f0 <line:310:7, line:312:7>
|   |   | |     | |     `-CompoundAssignOperator 0x559be56100b8 <line:311:9, col:52> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | |     | |       |-ArraySubscriptExpr 0x559be560ff30 <col:9, col:29> 'long' lvalue
|   |   | |     | |       | |-ImplicitCastExpr 0x559be560ff00 <col:9> 'long *' <ArrayToPointerDecay>
|   |   | |     | |       | | `-DeclRefExpr 0x559be560fd70 <col:9> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |   | |     | |       | `-ImplicitCastExpr 0x559be560ff18 <col:28> 'long' <LValueToRValue>
|   |   | |     | |       |   `-DeclRefExpr 0x559be560fed8 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |       `-ImplicitCastExpr 0x559be56100a0 <col:34, col:52> 'long' <LValueToRValue>
|   |   | |     | |         `-ArraySubscriptExpr 0x559be5610078 <col:34, col:52> 'long' lvalue
|   |   | |     | |           |-ImplicitCastExpr 0x559be5610048 <col:34> 'long *' <ArrayToPointerDecay>
|   |   | |     | |           | `-DeclRefExpr 0x559be560ff58 <col:34> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   | |     | |           `-ImplicitCastExpr 0x559be5610060 <col:51> 'long' <LValueToRValue>
|   |   | |     | |             `-DeclRefExpr 0x559be5610020 <col:51> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | `-ImplicitParamDecl 0x559be560fb18 <line:307:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:307:13) *'
|   |   | |     |-DeclRefExpr 0x559be560fc00 <line:309:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     |-DeclRefExpr 0x559be560feb0 <line:311:9> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |   | |     `-DeclRefExpr 0x559be560fff8 <col:34> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   | |-ImplicitParamDecl 0x559be5608be0 <line:267:11> col:11 implicit .global_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be5608c40 <col:11> col:11 implicit .bound_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be5608cc8 <col:11> col:11 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:267:11) *'
|   |   | |-VarDecl 0x559be5608d70 <line:269:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | |-RecordDecl 0x559be5609170 <line:271:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be5609220 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be5609388 <line:272:10> col:10 implicit 'long &'
|   |   | | |-FieldDecl 0x559be5609548 <col:22> col:22 implicit 'long &'
|   |   | | |-FieldDecl 0x559be5609718 <line:274:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be56097a8 <line:251:20> col:20 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be5609960 <line:274:19> col:19 implicit 'double (&)[N20z_data]'
|   |   | | |-FieldDecl 0x559be5609af8 <line:275:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5609b68 <line:250:22> col:22 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be5609d20 <line:275:17> col:17 implicit 'double (&)[N20z_data]'
|   |   | | |-FieldDecl 0x559be5609ed8 <col:34> col:34 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560a020 <line:276:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560a090 <line:249:21> col:21 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be560a240 <line:276:16> col:16 implicit 'double (&)[N20z_data]'
|   |   | | |-FieldDecl 0x559be560a418 <line:277:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560a700 <line:278:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560a9e8 <line:279:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560abd8 <line:280:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be560af00 <line:284:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560b400 <line:285:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560b600 <line:286:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560b800 <line:287:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560bae8 <line:288:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560bdd0 <line:289:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560bfc0 <line:290:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560ccd0 <line:291:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560ce58 <line:292:11> col:11 implicit 'int &'
|   |   | | |-FieldDecl 0x559be560cfe0 <col:48> col:48 implicit 'double &'
|   |   | | |-FieldDecl 0x559be560d1b0 <col:69> col:69 implicit 'double &'
|   |   | | `-FieldDecl 0x559be560d758 <line:298:13> col:13 implicit 'long (&)[15]'
|   |   | |-CapturedDecl 0x559be5609268 <<invalid sloc>> <invalid sloc>
|   |   | | |-ForStmt 0x559be560dda0 <line:272:5, line:305:5>
|   |   | | | |-BinaryOperator 0x559be5609430 <line:272:10, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5609348 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5609418 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559be5609668 <col:17, col:35> 'int' '<'
|   |   | | | | |-ImplicitCastExpr 0x559be5609650 <col:17> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be5609458 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ParenExpr 0x559be5609630 <col:21, col:35> 'long'
|   |   | | | |   `-BinaryOperator 0x559be5609608 <col:22, col:34> 'long' '-'
|   |   | | | |     |-ImplicitCastExpr 0x559be56095d8 <col:22> 'long' <LValueToRValue>
|   |   | | | |     | `-DeclRefExpr 0x559be5609480 <col:22> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be56095f0 <col:34> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be56095b8 <col:34> 'int' 1
|   |   | | | |-UnaryOperator 0x559be56096b8 <col:38, col:40> 'long' prefix '++'
|   |   | | | | `-DeclRefExpr 0x559be5609690 <col:40> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | `-CompoundStmt 0x559be560dd58 <line:273:5, line:305:5>
|   |   | | |   |-BinaryOperator 0x559be5609a90 <line:274:7, col:30> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be56096d8 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5609a68 <col:11, col:30> 'double' '*'
|   |   | | |   |   |-FloatingLiteral 0x559be5609788 <col:11> 'double' 2.998000e+03
|   |   | | |   |   `-ImplicitCastExpr 0x559be5609a50 <col:19, col:30> 'double' <LValueToRValue>
|   |   | | |   |     `-ArraySubscriptExpr 0x559be5609a28 <col:19, col:30> 'double' lvalue
|   |   | | |   |       |-ImplicitCastExpr 0x559be56099f8 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | |   |       | `-DeclRefExpr 0x559be5609868 <col:19> 'double [N20z_data]' lvalue Var 0x559be5606e30 'Z20z_LIST' 'double [N20z_data]'
|   |   | | |   |       `-ImplicitCastExpr 0x559be5609a10 <col:29> 'long' <LValueToRValue>
|   |   | | |   |         `-DeclRefExpr 0x559be56099d0 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |-BinaryOperator 0x559be5609fa0 <line:275:7, col:34> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5609ab8 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5609f78 <col:17, col:34> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be5609f48 <col:17, col:30> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be5609de8 <col:17, col:30> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be5609db8 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be5609c28 <col:17> 'double [N20z_data]' lvalue Var 0x559be5606d10 'DEC20z_LIST' 'double [N20z_data]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be5609dd0 <col:29> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be5609d90 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be5609f60 <col:34> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be5609e10 <col:34> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be560a3b0 <line:276:7, col:32> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5609fc8 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be560a388 <col:16, col:32> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be560a358 <col:16, col:28> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be560a308 <col:16, col:28> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be560a2d8 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be560a148 <col:16> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be560a2f0 <col:27> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be560a2b0 <col:27> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be560a370 <col:32> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be560a330 <col:32> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be560a698 <line:277:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be560a3d8 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be560a670 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be560a5a0 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be560a578 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be560a560 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be560a488 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be560a518 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be560a500 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be560a4b0 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be560a548 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be560a4d8 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be560a628 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be560a610 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be560a5c0 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be560a658 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be560a5e8 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be560a980 <line:278:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be560a6c0 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be560a958 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be560a888 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be560a860 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be560a848 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be560a770 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be560a800 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be560a7e8 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be560a798 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be560a830 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be560a7c0 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be560a910 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be560a8f8 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be560a8a8 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be560a940 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be560a8d0 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be560ab70 <line:279:7, col:27> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be560a9a8 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be560ab48 <col:12, col:27> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be560ab30 <col:12> 'double' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x559be560aa58 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   `-CallExpr 0x559be560aae8 <col:16, col:27> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be560aad0 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be560aa80 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be560ab18 <col:20> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be560aaa8 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   `-ForStmt 0x559be560dd20 <line:280:7, line:303:7>
|   |   | | |     |-BinaryOperator 0x559be560ac80 <line:280:12, col:16> 'long' '='
|   |   | | |     | |-DeclRefExpr 0x559be560ab98 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ImplicitCastExpr 0x559be560ac68 <col:16> 'long' <IntegralCast>
|   |   | | |     |   `-IntegerLiteral 0x559be560ac48 <col:16> 'int' 0
|   |   | | |     |-<<<NULL>>>
|   |   | | |     |-BinaryOperator 0x559be560ada8 <col:19, col:37> 'int' '<'
|   |   | | |     | |-ImplicitCastExpr 0x559be560ad90 <col:19> 'long' <LValueToRValue>
|   |   | | |     | | `-DeclRefExpr 0x559be560aca8 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ParenExpr 0x559be560ad70 <col:23, col:37> 'long'
|   |   | | |     |   `-BinaryOperator 0x559be560ad48 <col:24, col:36> 'long' '-'
|   |   | | |     |     |-ImplicitCastExpr 0x559be560ad18 <col:24> 'long' <LValueToRValue>
|   |   | | |     |     | `-DeclRefExpr 0x559be560acd0 <col:24> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   | | |     |     `-ImplicitCastExpr 0x559be560ad30 <col:36> 'long' <IntegralCast>
|   |   | | |     |       `-IntegerLiteral 0x559be560acf8 <col:36> 'int' 1
|   |   | | |     |-UnaryOperator 0x559be560adf8 <col:40, col:42> 'long' prefix '++'
|   |   | | |     | `-DeclRefExpr 0x559be560add0 <col:42> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     `-CompoundStmt 0x559be560dd08 <line:281:7, line:303:7>
|   |   | | |       `-IfStmt 0x559be560dcd0 <line:282:9, line:301:9>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-BinaryOperator 0x559be560ae98 <line:282:13, col:18> 'int' '!='
|   |   | | |         | |-ImplicitCastExpr 0x559be560ae68 <col:13> 'long' <LValueToRValue>
|   |   | | |         | | `-DeclRefExpr 0x559be560ae18 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | `-ImplicitCastExpr 0x559be560ae80 <col:18> 'long' <LValueToRValue>
|   |   | | |         |   `-DeclRefExpr 0x559be560ae40 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |         |-CompoundStmt 0x559be560dc70 <line:283:9, line:301:9>
|   |   | | |         | |-BinaryOperator 0x559be560b398 <line:284:11, col:35> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560aec0 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be560b370 <col:16, col:35> 'double' '*'
|   |   | | |         | |   |-FloatingLiteral 0x559be560af70 <col:16> 'double' 2.998000e+03
|   |   | | |         | |   `-ImplicitCastExpr 0x559be560b358 <col:24, col:35> 'double' <LValueToRValue>
|   |   | | |         | |     `-ArraySubscriptExpr 0x559be560b330 <col:24, col:35> 'double' lvalue
|   |   | | |         | |       |-ImplicitCastExpr 0x559be560afe0 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |       | `-DeclRefExpr 0x559be560af90 <col:24> 'double [N20z_data]' lvalue Var 0x559be5606e30 'Z20z_LIST' 'double [N20z_data]'
|   |   | | |         | |       `-ImplicitCastExpr 0x559be560aff8 <col:34> 'long' <LValueToRValue>
|   |   | | |         | |         `-DeclRefExpr 0x559be560afb8 <col:34> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |-BinaryOperator 0x559be560b598 <line:285:11, col:39> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560b3c0 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be560b570 <col:22, col:39> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be560b540 <col:22, col:35> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be560b4f0 <col:22, col:35> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be560b4c0 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be560b470 <col:22> 'double [N20z_data]' lvalue Var 0x559be5606d10 'DEC20z_LIST' 'double [N20z_data]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be560b4d8 <col:34> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be560b498 <col:34> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be560b558 <col:39> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be560b518 <col:39> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be560b798 <line:286:11, col:37> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560b5c0 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be560b770 <col:21, col:37> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be560b740 <col:21, col:33> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be560b6f0 <col:21, col:33> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be560b6c0 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be560b670 <col:21> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be560b6d8 <col:32> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be560b698 <col:32> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be560b758 <col:37> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be560b718 <col:37> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be560ba80 <line:287:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560b7c0 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be560ba58 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be560b988 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be560b960 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be560b948 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be560b870 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be560b900 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be560b8e8 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be560b898 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be560b930 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be560b8c0 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be560ba10 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be560b9f8 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be560b9a8 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be560ba40 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be560b9d0 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be560bd68 <line:288:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560baa8 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be560bd40 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be560bc70 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be560bc48 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be560bc30 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be560bb58 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be560bbe8 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be560bbd0 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be560bb80 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be560bc18 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be560bba8 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be560bcf8 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be560bce0 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be560bc90 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be560bd28 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be560bcb8 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be560bf58 <line:289:11, col:33> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560bd90 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be560bf30 <col:16, col:33> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be560bf18 <col:16> 'double' <LValueToRValue>
|   |   | | |         | |   | `-DeclRefExpr 0x559be560be40 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be560bed0 <col:21, col:33> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be560beb8 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be560be68 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be560bf00 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be560be90 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be560cc68 <line:290:11, col:93> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560bf80 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be560cc40 <col:17, col:93> 'double' '+'
|   |   | | |         | |   |-ParenExpr 0x559be560ca48 <col:17, col:67> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be560ca20 <col:18, col:66> 'double' '+'
|   |   | | |         | |   |   |-ParenExpr 0x559be560c1e8 <col:18, col:40> 'double'
|   |   | | |         | |   |   | `-BinaryOperator 0x559be560c1c0 <col:19, col:39> 'double' '*'
|   |   | | |         | |   |   |   |-ParenExpr 0x559be560c0d8 <col:19, col:27> 'double'
|   |   | | |         | |   |   |   | `-BinaryOperator 0x559be560c0b0 <col:20, col:25> 'double' '-'
|   |   | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be560c080 <col:20> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |   | `-DeclRefExpr 0x559be560c030 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be560c098 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |     `-DeclRefExpr 0x559be560c058 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   |   `-ParenExpr 0x559be560c1a0 <col:31, col:39> 'double'
|   |   | | |         | |   |   |     `-BinaryOperator 0x559be560c178 <col:32, col:37> 'double' '-'
|   |   | | |         | |   |   |       |-ImplicitCastExpr 0x559be560c148 <col:32> 'double' <LValueToRValue>
|   |   | | |         | |   |   |       | `-DeclRefExpr 0x559be560c0f8 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |       `-ImplicitCastExpr 0x559be560c160 <col:37> 'double' <LValueToRValue>
|   |   | | |         | |   |   |         `-DeclRefExpr 0x559be560c120 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   `-ParenExpr 0x559be560ca00 <col:44, col:66> 'double'
|   |   | | |         | |   |     `-BinaryOperator 0x559be560c9d8 <col:45, col:65> 'double' '*'
|   |   | | |         | |   |       |-ParenExpr 0x559be560c2b0 <col:45, col:53> 'double'
|   |   | | |         | |   |       | `-BinaryOperator 0x559be560c288 <col:46, col:51> 'double' '-'
|   |   | | |         | |   |       |   |-ImplicitCastExpr 0x559be560c258 <col:46> 'double' <LValueToRValue>
|   |   | | |         | |   |       |   | `-DeclRefExpr 0x559be560c208 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |       |   `-ImplicitCastExpr 0x559be560c270 <col:51> 'double' <LValueToRValue>
|   |   | | |         | |   |       |     `-DeclRefExpr 0x559be560c230 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   |       `-ParenExpr 0x559be560c9b8 <col:57, col:65> 'double'
|   |   | | |         | |   |         `-BinaryOperator 0x559be560c990 <col:58, col:63> 'double' '-'
|   |   | | |         | |   |           |-ImplicitCastExpr 0x559be560c960 <col:58> 'double' <LValueToRValue>
|   |   | | |         | |   |           | `-DeclRefExpr 0x559be560c2d0 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |           `-ImplicitCastExpr 0x559be560c978 <col:63> 'double' <LValueToRValue>
|   |   | | |         | |   |             `-DeclRefExpr 0x559be560c2f8 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   `-ParenExpr 0x559be560cc20 <col:71, col:93> 'double'
|   |   | | |         | |     `-BinaryOperator 0x559be560cbf8 <col:72, col:92> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be560cb10 <col:72, col:80> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be560cae8 <col:73, col:78> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be560cab8 <col:73> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be560ca68 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be560cad0 <col:78> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be560ca90 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be560cbd8 <col:84, col:92> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be560cbb0 <col:85, col:90> 'double' '-'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be560cb80 <col:85> 'double' <LValueToRValue>
|   |   | | |         | |           | `-DeclRefExpr 0x559be560cb30 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |           `-ImplicitCastExpr 0x559be560cb98 <col:90> 'double' <LValueToRValue>
|   |   | | |         | |             `-DeclRefExpr 0x559be560cb58 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |-BinaryOperator 0x559be560cdf0 <line:291:11, col:29> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560cc90 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | | `-CallExpr 0x559be560cda8 <col:20, col:29> 'double'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be560cd90 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   | `-DeclRefExpr 0x559be560cd40 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be560cdd8 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be560cd68 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | |-BinaryOperator 0x559be560d3d0 <line:292:11, col:94> 'int' '='
|   |   | | |         | | |-DeclRefExpr 0x559be560ce18 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         | | `-CStyleCastExpr 0x559be560d3a8 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | |         | |   `-CallExpr 0x559be560d360 <col:32, col:94> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be560d348 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be560cec8 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | |         | |     `-BinaryOperator 0x559be560d320 <col:38, col:93> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be560d0a8 <col:38, col:58> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be560d080 <col:39, col:48> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be560d050 <col:39> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be560cef0 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be560d068 <col:48> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be560cf18 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be560d300 <col:62, col:93> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be560d2d8 <col:63, col:92> 'double' '/'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be560d2c0 <col:63> 'double' <IntegralToFloating>
|   |   | | |         | |           | `-IntegerLiteral 0x559be560d0c8 <col:63> 'int' 15
|   |   | | |         | |           `-ParenExpr 0x559be560d2a0 <col:68, col:92> 'double'
|   |   | | |         | |             `-BinaryOperator 0x559be560d278 <col:69, col:82> 'double' '-'
|   |   | | |         | |               |-ImplicitCastExpr 0x559be560d248 <col:69> 'double' <LValueToRValue>
|   |   | | |         | |               | `-DeclRefExpr 0x559be560d0e8 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | |         | |               `-ImplicitCastExpr 0x559be560d260 <col:82> 'double' <LValueToRValue>
|   |   | | |         | |                 `-DeclRefExpr 0x559be560d220 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | `-IfStmt 0x559be560d8d8 <line:293:11, line:299:11>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-BinaryOperator 0x559be560d548 <line:293:15, col:56> 'int' '&&'
|   |   | | |         |   | |-ParenExpr 0x559be560d480 <col:15, col:33> 'int'
|   |   | | |         |   | | `-BinaryOperator 0x559be560d458 <col:16, col:32> 'int' '>='
|   |   | | |         |   | |   |-ImplicitCastExpr 0x559be560d440 <col:16> 'int' <LValueToRValue>
|   |   | | |         |   | |   | `-DeclRefExpr 0x559be560d3f8 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | |   `-IntegerLiteral 0x559be560d420 <col:32> 'int' 0
|   |   | | |         |   | `-ParenExpr 0x559be560d528 <col:38, col:56> 'int'
|   |   | | |         |   |   `-BinaryOperator 0x559be560d500 <col:39, col:54> 'int' '<'
|   |   | | |         |   |     |-ImplicitCastExpr 0x559be560d4e8 <col:39> 'int' <LValueToRValue>
|   |   | | |         |   |     | `-DeclRefExpr 0x559be560d4a0 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |     `-IntegerLiteral 0x559be560d4c8 <col:54> 'int' 15
|   |   | | |         |   |-CompoundStmt 0x559be560d8b8 <line:294:11, line:299:11>
|   |   | | |         |   | |-IfStmt 0x559be560d6c8 <line:295:13, line:296:32>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-BinaryOperator 0x559be560d5d0 <line:295:17, col:33> 'int' '>='
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be560d5b8 <col:17> 'int' <LValueToRValue>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be560d570 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | | | `-IntegerLiteral 0x559be560d598 <col:33> 'int' 15
|   |   | | |         |   | | |-CallExpr 0x559be560d668 <line:296:15, col:32> 'int'
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be560d650 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be560d5f8 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | |         |   | | | `-ImplicitCastExpr 0x559be560d6b0 <col:22> 'const char *' <BitCast>
|   |   | | |         |   | | |   `-ImplicitCastExpr 0x559be560d698 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | |         |   | | |     `-StringLiteral 0x559be560d620 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | |         |   | | `-<<<NULL>>>
|   |   | | |         |   | `-CompoundAssignOperator 0x559be560d880 <line:298:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | |         |   |   |-ArraySubscriptExpr 0x559be560d820 <col:13, col:42> 'long' lvalue
|   |   | | |         |   |   | |-ImplicitCastExpr 0x559be560d7f0 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | |         |   |   | | `-DeclRefExpr 0x559be560d700 <col:13> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   | | |         |   |   | `-ImplicitCastExpr 0x559be560d808 <col:30> 'int' <LValueToRValue>
|   |   | | |         |   |   |   `-DeclRefExpr 0x559be560d7c8 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |   `-ImplicitCastExpr 0x559be560d868 <col:47> 'long' <IntegralCast>
|   |   | | |         |   |     `-IntegerLiteral 0x559be560d848 <col:47> 'int' 1
|   |   | | |         |   `-<<<NULL>>>
|   |   | | |         `-<<<NULL>>>
|   |   | | `-ImplicitParamDecl 0x559be56092e8 <line:271:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:271:13) *'
|   |   | |-OMPCapturedExprDecl 0x559be560e0d0 <line:272:21, col:35> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-ParenExpr 0x559be5609630 <col:21, col:35> 'long'
|   |   | |   `-BinaryOperator 0x559be5609608 <col:22, col:34> 'long' '-'
|   |   | |     |-ImplicitCastExpr 0x559be56095d8 <col:22> 'long' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x559be5609480 <col:22> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   | |     `-ImplicitCastExpr 0x559be56095f0 <col:34> 'long' <IntegralCast>
|   |   | |       `-IntegerLiteral 0x559be56095b8 <col:34> 'int' 1
|   |   | |-OMPCapturedExprDecl 0x559be560e430 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-BinaryOperator 0x559be560e408 <col:5, <invalid sloc>> 'long' '-'
|   |   | |   |-BinaryOperator 0x559be560e2e0 <col:5, col:38> 'long' '/'
|   |   | |   | |-ParenExpr 0x559be560e2a8 <col:5> 'long'
|   |   | |   | | `-BinaryOperator 0x559be560e280 <col:21, col:38> 'long' '+'
|   |   | |   | |   |-BinaryOperator 0x559be560e240 <col:21, <invalid sloc>> 'long' '-'
|   |   | |   | |   | |-BinaryOperator 0x559be560e1e0 <col:21, col:14> 'long' '-'
|   |   | |   | |   | | |-ImplicitCastExpr 0x559be560e1b0 <col:21> 'long' <LValueToRValue>
|   |   | |   | |   | | | `-DeclRefExpr 0x559be560e130 <col:21> 'long' lvalue OMPCapturedExpr 0x559be560e0d0 '.capture_expr.' 'long'
|   |   | |   | |   | | `-ImplicitCastExpr 0x559be560e1c8 <col:14> 'long' <IntegralCast>
|   |   | |   | |   | |   `-IntegerLiteral 0x559be56093f8 <col:14> 'int' 0
|   |   | |   | |   | `-ImplicitCastExpr 0x559be560e228 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |   | |   |   `-IntegerLiteral 0x559be560e208 <<invalid sloc>> 'int' 1
|   |   | |   | |   `-ImplicitCastExpr 0x559be560e268 <col:38> 'long' <IntegralCast>
|   |   | |   | |     `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | |   | `-ImplicitCastExpr 0x559be560e2c8 <col:38> 'long' <IntegralCast>
|   |   | |   |   `-IntegerLiteral 0x559be560e098 <col:38> 'int' 1
|   |   | |   `-ImplicitCastExpr 0x559be560e3f0 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x559be560e3d0 <<invalid sloc>> 'int' 1
|   |   | |-RecordDecl 0x559be560f9a8 <line:307:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be560fa50 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be560fbb8 <line:309:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be560fe68 <line:311:9> col:9 implicit 'long (&)[15]'
|   |   | | `-FieldDecl 0x559be560ffb0 <col:34> col:34 implicit 'long (&)[15]'
|   |   | `-CapturedDecl 0x559be560fa98 <<invalid sloc>> <invalid sloc>
|   |   |   |-CompoundStmt 0x559be5610140 <line:308:5, line:314:5>
|   |   |   | `-ForStmt 0x559be5610108 <line:309:7, line:312:7>
|   |   |   |   |-BinaryOperator 0x559be560fc60 <line:309:12, col:16> 'long' '='
|   |   |   |   | |-DeclRefExpr 0x559be560fb78 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be560fc48 <col:16> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be560fc28 <col:16> 'int' 0
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x559be560fd00 <col:19, col:23> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x559be560fcd0 <col:19> 'long' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x559be560fc88 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be560fce8 <col:23> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be560fcb0 <col:23> 'int' 15
|   |   |   |   |-UnaryOperator 0x559be560fd50 <col:27, col:29> 'long' prefix '++'
|   |   |   |   | `-DeclRefExpr 0x559be560fd28 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   `-CompoundStmt 0x559be56100f0 <line:310:7, line:312:7>
|   |   |   |     `-CompoundAssignOperator 0x559be56100b8 <line:311:9, col:52> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |   |       |-ArraySubscriptExpr 0x559be560ff30 <col:9, col:29> 'long' lvalue
|   |   |   |       | |-ImplicitCastExpr 0x559be560ff00 <col:9> 'long *' <ArrayToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x559be560fd70 <col:9> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |   |   |       | `-ImplicitCastExpr 0x559be560ff18 <col:28> 'long' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x559be560fed8 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |       `-ImplicitCastExpr 0x559be56100a0 <col:34, col:52> 'long' <LValueToRValue>
|   |   |   |         `-ArraySubscriptExpr 0x559be5610078 <col:34, col:52> 'long' lvalue
|   |   |   |           |-ImplicitCastExpr 0x559be5610048 <col:34> 'long *' <ArrayToPointerDecay>
|   |   |   |           | `-DeclRefExpr 0x559be560ff58 <col:34> 'long [15]' lvalue Var 0x559be5608d70 'sum_local_counts' 'long [15]'
|   |   |   |           `-ImplicitCastExpr 0x559be5610060 <col:51> 'long' <LValueToRValue>
|   |   |   |             `-DeclRefExpr 0x559be5610020 <col:51> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   `-ImplicitParamDecl 0x559be560fb18 <line:307:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:307:13) *'
|   |   |-DeclRefExpr 0x559be56090e8 <line:271:38> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   |   |-DeclRefExpr 0x559be5609508 <line:272:22> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be5609908 <line:274:19> 'double [N20z_data]' lvalue Var 0x559be5606e30 'Z20z_LIST' 'double [N20z_data]'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be5609cc8 <line:275:17> 'double [N20z_data]' lvalue Var 0x559be5606d10 'DEC20z_LIST' 'double [N20z_data]'
|   |   |-DeclRefExpr 0x559be5609e98 <col:34> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be560a1e8 <line:276:16> 'double [N20z_data]' lvalue Var 0x559be5606bf0 'RA20z_LIST' 'double [N20z_data]'
|   |   |-DeclRefExpr 0x559be560cfa0 <line:292:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   |-DeclRefExpr 0x559be560d170 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   `-DeclRefExpr 0x559be560fe10 <line:311:9> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |-CallExpr 0x559be5610430 <line:316:3, col:42> 'int'
|   | |-ImplicitCastExpr 0x559be5610418 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be56103a8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5610478 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5610460 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be56103d0 <col:10> 'char [30]' lvalue "FINISHED Mr20z NESTED LOOP. \n"
|   |-CallExpr 0x559be5610500 <line:317:3, col:20> 'int'
|   | |-ImplicitCastExpr 0x559be56104e8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5610490 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5610548 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5610530 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be56104b8 <col:10> 'char [9]' lvalue "Counts: "
|   |-ForStmt 0x559be5610b68 <line:318:3, line:322:3>
|   | |-BinaryOperator 0x559be56105c0 <line:318:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be5610560 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be56105a8 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5610588 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be5610660 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be5610630 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be56105e8 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5610648 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5610610 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be56106b0 <col:23, col:25> 'long' prefix '++'
|   | | `-DeclRefExpr 0x559be5610688 <col:25> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be5610b48 <line:319:3, line:322:3>
|   |   |-BinaryOperator 0x559be5610988 <line:320:5, col:73> 'long' '='
|   |   | |-ArraySubscriptExpr 0x559be5610778 <col:5, col:25> 'long' lvalue
|   |   | | |-ImplicitCastExpr 0x559be5610748 <col:5> 'long *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x559be56106d0 <col:5> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |   | | `-ImplicitCastExpr 0x559be5610760 <col:24> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559be5610720 <col:24> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | `-ImplicitCastExpr 0x559be5610970 <col:29, col:73> 'long' <IntegralCast>
|   |   |   `-CStyleCastExpr 0x559be5610948 <col:29, col:73> 'long long' <FloatingToIntegral>
|   |   |     `-CallExpr 0x559be5610900 <col:41, col:73> 'double'
|   |   |       |-ImplicitCastExpr 0x559be56108e8 <col:41> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x559be56107a0 <col:41> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   |       `-BinaryOperator 0x559be56108c0 <col:47, col:71> 'double' '/'
|   |   |         |-ImplicitCastExpr 0x559be56108a8 <col:47, col:67> 'double' <IntegralToFloating>
|   |   |         | `-ImplicitCastExpr 0x559be5610890 <col:47, col:67> 'long' <LValueToRValue>
|   |   |         |   `-ArraySubscriptExpr 0x559be5610848 <col:47, col:67> 'long' lvalue
|   |   |         |     |-ImplicitCastExpr 0x559be5610818 <col:47> 'long *' <ArrayToPointerDecay>
|   |   |         |     | `-DeclRefExpr 0x559be56107c8 <col:47> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |   |         |     `-ImplicitCastExpr 0x559be5610830 <col:66> 'long' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x559be56107f0 <col:66> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |         `-FloatingLiteral 0x559be5610870 <col:71> 'double' 2.000000e+00
|   |   `-CallExpr 0x559be5610ac8 <line:321:5, col:41> 'int'
|   |     |-ImplicitCastExpr 0x559be5610ab0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be56109b0 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |-ImplicitCastExpr 0x559be5610b18 <col:12> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x559be5610b00 <col:12> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x559be56109d8 <col:12> 'char [5]' lvalue "%ld "
|   |     `-ImplicitCastExpr 0x559be5610b30 <col:20, col:40> 'long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x559be5610a88 <col:20, col:40> 'long' lvalue
|   |         |-ImplicitCastExpr 0x559be5610a58 <col:20> 'long *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x559be5610a08 <col:20> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |         `-ImplicitCastExpr 0x559be5610a70 <col:39> 'long' <LValueToRValue>
|   |           `-DeclRefExpr 0x559be5610a30 <col:39> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |-CallExpr 0x559be5610c10 <line:324:3, col:14> 'int'
|   | |-ImplicitCastExpr 0x559be5610bf8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5610ba0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5610c58 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5610c40 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5610bc8 <col:10> 'char [2]' lvalue "\n"
|   |-DeclStmt 0x559be5610d98 <line:325:3, col:58>
|   | `-VarDecl 0x559be5610c90 <col:3, col:41> col:21 used random_datafile 'const char [16]' static cinit
|   |   `-StringLiteral 0x559be5610d28 <col:41> 'const char [16]' lvalue "SDSS_random.dat"
|   |-DeclStmt 0x559be5610e68 <line:326:3, col:35>
|   | `-VarDecl 0x559be5610dc8 <col:3, col:21> col:12 used N_rand 'long' cinit
|   |   `-ImplicitCastExpr 0x559be5610e50 <col:21> 'long' <LValueToRValue>
|   |     `-DeclRefExpr 0x559be5610e28 <col:21> 'long' lvalue Var 0x559be55e6168 'FILELENGTHrand' 'long'
|   |-IfStmt 0x559be5611180 <line:328:3, line:332:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be5611160 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be5611140 <line:329:3, line:332:3>
|   | | |-CallExpr 0x559be5611050 <line:330:5, col:53> 'int'
|   | | | |-ImplicitCastExpr 0x559be5611038 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be5610fc0 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be5611098 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be5611080 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be5610fe8 <col:12> 'char [39]' lvalue "input_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be5611110 <line:331:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be56110f8 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be56110b0 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be56110d8 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-DeclStmt 0x559be56112c0 <line:334:3, col:29>
|   | `-VarDecl 0x559be5611260 <col:3, col:28> col:10 used randRA_LIST 'double [N_rand]'
|   |-DeclStmt 0x559be56113e0 <line:335:3, col:30>
|   | `-VarDecl 0x559be5611380 <col:3, col:29> col:10 used randDEC_LIST 'double [N_rand]'
|   |-DeclStmt 0x559be5611500 <line:336:3, col:28>
|   | `-VarDecl 0x559be56114a0 <col:3, col:27> col:10 used randZ_LIST 'double [N_rand]'
|   |-ForStmt 0x559be5611e88 <line:337:3, line:347:3>
|   | |-BinaryOperator 0x559be5611578 <line:337:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be5611518 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5611560 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5611540 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be5611620 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be56115f0 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be56115a0 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5611608 <col:19> 'long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x559be56115c8 <col:19> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   | |-UnaryOperator 0x559be5611670 <col:27, col:29> 'long' prefix '++'
|   | | `-DeclRefExpr 0x559be5611648 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be5611e70 <line:338:3, line:347:3>
|   |   `-IfStmt 0x559be5611e38 <line:342:5, line:345:5>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x559be5611c38 <line:342:9, col:25> 'int' '>='
|   |     | |-ImplicitCastExpr 0x559be5611c20 <col:9> 'long' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x559be5611b38 <col:9> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     | `-ParenExpr 0x559be5611c00 <col:14, col:25> 'long'
|   |     |   `-BinaryOperator 0x559be5611bd8 <col:15, col:24> 'long' '-'
|   |     |     |-ImplicitCastExpr 0x559be5611ba8 <col:15> 'long' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x559be5611b60 <col:15> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |     |     `-ImplicitCastExpr 0x559be5611bc0 <col:24> 'long' <IntegralCast>
|   |     |       `-IntegerLiteral 0x559be5611b88 <col:24> 'int' 2
|   |     |-CompoundStmt 0x559be5611e20 <line:343:5, line:345:5>
|   |     | `-CallExpr 0x559be5611da0 <line:344:7, col:74> 'int'
|   |     |   |-ImplicitCastExpr 0x559be5611d88 <col:7> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x559be5611c60 <col:7> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |   |-ImplicitCastExpr 0x559be5611df0 <col:14> 'const char *' <BitCast>
|   |     |   | `-ImplicitCastExpr 0x559be5611dd8 <col:14> 'char *' <ArrayToPointerDecay>
|   |     |   |   `-StringLiteral 0x559be5611c88 <col:14> 'char [42]' lvalue "Close or exceeded N_data limit. RA: %lf \n"
|   |     |   `-ImplicitCastExpr 0x559be5611e08 <col:60, col:73> 'double' <LValueToRValue>
|   |     |     `-ArraySubscriptExpr 0x559be5611d60 <col:60, col:73> 'double' lvalue
|   |     |       |-ImplicitCastExpr 0x559be5611d30 <col:60> 'double *' <ArrayToPointerDecay>
|   |     |       | `-DeclRefExpr 0x559be5611ce0 <col:60> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   |     |       `-ImplicitCastExpr 0x559be5611d48 <col:72> 'long' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x559be5611d08 <col:72> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |     `-<<<NULL>>>
|   |-CallExpr 0x559be5611fb8 <line:350:3, col:27> 'int'
|   | |-ImplicitCastExpr 0x559be5611fa0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5611f40 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5612000 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5611fe8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5611f68 <col:10> 'char [15]' lvalue "Closing File.\n"
|   |-CallExpr 0x559be56120e0 <line:351:3, col:46> 'int'
|   | |-ImplicitCastExpr 0x559be56120c8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5612018 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5612128 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5612110 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5612078 <col:10> 'char [34]' lvalue "Beginning Random Nested Loops...\n"
|   |-OMPParallelDirective 0x559be5619b70 <line:352:11, col:207>
|   | |-OMPSharedClause 0x559be5612230 <col:24, col:98>
|   | | |-DeclRefExpr 0x559be5612140 <col:32> 'double [N_rand]' lvalue Var 0x559be56114a0 'randZ_LIST' 'double [N_rand]'
|   | | |-DeclRefExpr 0x559be5612168 <col:44> 'double [N_rand]' lvalue Var 0x559be5611380 'randDEC_LIST' 'double [N_rand]'
|   | | |-DeclRefExpr 0x559be5612190 <col:58> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   | | |-DeclRefExpr 0x559be56121b8 <col:71> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   | | |-DeclRefExpr 0x559be56121e0 <col:79> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   | | `-DeclRefExpr 0x559be5612208 <col:91> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   | |-OMPPrivateClause 0x559be5612fe8 <col:98, col:207>
|   | | |-DeclRefExpr 0x559be5612278 <col:107> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   | | |-DeclRefExpr 0x559be56122a0 <col:112> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   | | |-DeclRefExpr 0x559be56122c8 <col:120> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   | | |-DeclRefExpr 0x559be56122f0 <col:123> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   | | |-DeclRefExpr 0x559be5612318 <col:127> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   | | |-DeclRefExpr 0x559be5612340 <col:136> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   | | |-DeclRefExpr 0x559be5612368 <col:146> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   | | |-DeclRefExpr 0x559be5612390 <col:154> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   | | |-DeclRefExpr 0x559be56123b8 <col:163> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   | | |-DeclRefExpr 0x559be56123e0 <col:167> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   | | |-DeclRefExpr 0x559be5612408 <col:171> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   | | |-DeclRefExpr 0x559be5612430 <col:175> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   | | |-DeclRefExpr 0x559be5612458 <col:179> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   | | |-DeclRefExpr 0x559be5612480 <col:183> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   | | |-DeclRefExpr 0x559be56124a8 <col:187> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   | | |-DeclRefExpr 0x559be56124d0 <col:201> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-DeclRefExpr 0x559be56124f8 <col:204> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   | `-CapturedStmt 0x559be5619a30 <line:353:3, line:400:3>
|   |   |-CapturedDecl 0x559be5613208 <<invalid sloc>> <invalid sloc>
|   |   | |-CompoundStmt 0x559be5619a00 <line:353:3, line:400:3>
|   |   | | |-DeclStmt 0x559be5613460 <line:354:5, col:34>
|   |   | | | `-VarDecl 0x559be5613400 <col:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | | |-CallExpr 0x559be5613660 <line:355:5, col:67> 'void *'
|   |   | | | |-ImplicitCastExpr 0x559be5613648 <col:5> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x559be5613478 <col:5> 'void *(void *, int, unsigned long)' Function 0x559be55ef208 'memset' 'void *(void *, int, unsigned long)'
|   |   | | | |-ImplicitCastExpr 0x559be56136b8 <col:12> 'void *' <BitCast>
|   |   | | | | `-ImplicitCastExpr 0x559be56136a0 <col:12> 'long *' <ArrayToPointerDecay>
|   |   | | | |   `-DeclRefExpr 0x559be56134a0 <col:12> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   | | | |-IntegerLiteral 0x559be56134c8 <col:30> 'int' 0
|   |   | | | `-BinaryOperator 0x559be5613608 <col:33, col:66> 'unsigned long' '*'
|   |   | | |   |-ImplicitCastExpr 0x559be56135f0 <col:33> 'unsigned long' <IntegralCast>
|   |   | | |   | `-IntegerLiteral 0x559be56134e8 <col:33> 'int' 15
|   |   | | |   `-ParenExpr 0x559be56135d0 <col:38, col:66> 'unsigned long'
|   |   | | |     `-UnaryExprOrTypeTraitExpr 0x559be56135b0 <col:39, col:65> 'unsigned long' sizeof
|   |   | | |       `-ParenExpr 0x559be5613590 <col:45, col:65> 'long' lvalue
|   |   | | |         `-ArraySubscriptExpr 0x559be5613568 <col:46, col:64> 'long' lvalue
|   |   | | |           |-ImplicitCastExpr 0x559be5613550 <col:46> 'long *' <ArrayToPointerDecay>
|   |   | | |           | `-DeclRefExpr 0x559be5613508 <col:46> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   | | |           `-IntegerLiteral 0x559be5613530 <col:63> 'int' 0
|   |   | | |-OMPForDirective 0x559be56190c0 <line:356:13, col:44>
|   |   | | | |-OMPScheduleClause 0x559be56137d8 <col:21, col:43>
|   |   | | | | `-ImplicitCastExpr 0x559be56137c0 <col:38> 'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be56136d0 <col:38> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   |   | | | |-CapturedStmt 0x559be5617848 <line:357:5, line:390:5>
|   |   | | | | |-CapturedDecl 0x559be5613918 <<invalid sloc>> <invalid sloc>
|   |   | | | | | |-ForStmt 0x559be5617810 <line:357:5, line:390:5>
|   |   | | | | | | |-BinaryOperator 0x559be5613ae0 <line:357:10, col:14> 'long' '='
|   |   | | | | | | | |-DeclRefExpr 0x559be56139f8 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ImplicitCastExpr 0x559be5613ac8 <col:14> 'long' <IntegralCast>
|   |   | | | | | | |   `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | | | | | |-<<<NULL>>>
|   |   | | | | | | |-BinaryOperator 0x559be5613d18 <col:17, col:32> 'int' '<'
|   |   | | | | | | | |-ImplicitCastExpr 0x559be5613d00 <col:17> 'long' <LValueToRValue>
|   |   | | | | | | | | `-DeclRefExpr 0x559be5613b08 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | | `-ParenExpr 0x559be5613ce0 <col:21, col:32> 'long'
|   |   | | | | | | |   `-BinaryOperator 0x559be5613cb8 <col:22, col:31> 'long' '-'
|   |   | | | | | | |     |-ImplicitCastExpr 0x559be5613c88 <col:22> 'long' <LValueToRValue>
|   |   | | | | | | |     | `-DeclRefExpr 0x559be5613b30 <col:22> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   | | | | | | |     `-ImplicitCastExpr 0x559be5613ca0 <col:31> 'long' <IntegralCast>
|   |   | | | | | | |       `-IntegerLiteral 0x559be5613c68 <col:31> 'int' 1
|   |   | | | | | | |-UnaryOperator 0x559be5613d68 <col:35, col:37> 'long' prefix '++'
|   |   | | | | | | | `-DeclRefExpr 0x559be5613d40 <col:37> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | | `-CompoundStmt 0x559be56177c8 <line:358:5, line:390:5>
|   |   | | | | | |   |-BinaryOperator 0x559be5614140 <line:359:7, col:31> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5613d88 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5614118 <col:11, col:31> 'double' '*'
|   |   | | | | | |   |   |-FloatingLiteral 0x559be5613e38 <col:11> 'double' 2.998000e+03
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be5614100 <col:19, col:31> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-ArraySubscriptExpr 0x559be56140d8 <col:19, col:31> 'double' lvalue
|   |   | | | | | |   |       |-ImplicitCastExpr 0x559be56140a8 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |       | `-DeclRefExpr 0x559be5613f18 <col:19> 'double [N_rand]' lvalue Var 0x559be56114a0 'randZ_LIST' 'double [N_rand]'
|   |   | | | | | |   |       `-ImplicitCastExpr 0x559be56140c0 <col:30> 'long' <LValueToRValue>
|   |   | | | | | |   |         `-DeclRefExpr 0x559be5614080 <col:30> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |-BinaryOperator 0x559be5614650 <line:360:7, col:35> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5614168 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5614628 <col:17, col:35> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be56145f8 <col:17, col:31> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be5614498 <col:17, col:31> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be5614468 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be56142d8 <col:17> 'double [N_rand]' lvalue Var 0x559be5611380 'randDEC_LIST' 'double [N_rand]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be5614480 <col:30> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be5614440 <col:30> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be5614610 <col:35> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be56144c0 <col:35> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be5614a80 <line:361:7, col:33> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5614678 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5614a58 <col:16, col:33> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be5614a28 <col:16, col:29> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-ArraySubscriptExpr 0x559be56149d8 <col:16, col:29> 'double' lvalue
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be56149a8 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be5614818 <col:16> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   |   | | | | | |   |   |   `-ImplicitCastExpr 0x559be56149c0 <col:28> 'long' <LValueToRValue>
|   |   | | | | | |   |   |     `-DeclRefExpr 0x559be5614980 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |   |   `-ImplicitCastExpr 0x559be5614a40 <col:33> 'double' <LValueToRValue>
|   |   | | | | | |   |     `-DeclRefExpr 0x559be5614a00 <col:33> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be5614d68 <line:362:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5614aa8 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5614d40 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be5614c70 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be5614c48 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be5614c30 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be5614b58 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be5614be8 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be5614bd0 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be5614b80 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be5614c18 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be5614ba8 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be5614cf8 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be5614ce0 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be5614c90 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be5614d28 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be5614cb8 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be5615050 <line:363:7, col:43> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5614d90 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5615028 <col:12, col:43> 'double' '*'
|   |   | | | | | |   |   |-ParenExpr 0x559be5614f58 <col:12, col:29> 'double'
|   |   | | | | | |   |   | `-BinaryOperator 0x559be5614f30 <col:13, col:28> 'double' '*'
|   |   | | | | | |   |   |   |-ImplicitCastExpr 0x559be5614f18 <col:13> 'double' <LValueToRValue>
|   |   | | | | | |   |   |   | `-DeclRefExpr 0x559be5614e40 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   |   `-CallExpr 0x559be5614ed0 <col:17, col:28> 'double'
|   |   | | | | | |   |   |     |-ImplicitCastExpr 0x559be5614eb8 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |   |     | `-DeclRefExpr 0x559be5614e68 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |   |   |     `-ImplicitCastExpr 0x559be5614f00 <col:21> 'double' <LValueToRValue>
|   |   | | | | | |   |   |       `-DeclRefExpr 0x559be5614e90 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be5614fe0 <col:33, col:43> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be5614fc8 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be5614f78 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be5615010 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be5614fa0 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | | |   |-BinaryOperator 0x559be5615240 <line:364:7, col:27> 'double' '='
|   |   | | | | | |   | |-DeclRefExpr 0x559be5615078 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |   | `-BinaryOperator 0x559be5615218 <col:12, col:27> 'double' '*'
|   |   | | | | | |   |   |-ImplicitCastExpr 0x559be5615200 <col:12> 'double' <LValueToRValue>
|   |   | | | | | |   |   | `-DeclRefExpr 0x559be5615128 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | | |   |   `-CallExpr 0x559be56151b8 <col:16, col:27> 'double'
|   |   | | | | | |   |     |-ImplicitCastExpr 0x559be56151a0 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |   |     | `-DeclRefExpr 0x559be5615150 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |   |     `-ImplicitCastExpr 0x559be56151e8 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |   |       `-DeclRefExpr 0x559be5615178 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | | |   `-ForStmt 0x559be5617790 <line:365:7, line:388:7>
|   |   | | | | | |     |-BinaryOperator 0x559be5615350 <line:365:12, col:16> 'long' '='
|   |   | | | | | |     | |-DeclRefExpr 0x559be5615268 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ImplicitCastExpr 0x559be5615338 <col:16> 'long' <IntegralCast>
|   |   | | | | | |     |   `-IntegerLiteral 0x559be5615318 <col:16> 'int' 0
|   |   | | | | | |     |-<<<NULL>>>
|   |   | | | | | |     |-BinaryOperator 0x559be5615478 <col:19, col:34> 'int' '<'
|   |   | | | | | |     | |-ImplicitCastExpr 0x559be5615460 <col:19> 'long' <LValueToRValue>
|   |   | | | | | |     | | `-DeclRefExpr 0x559be5615378 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     | `-ParenExpr 0x559be5615440 <col:23, col:34> 'long'
|   |   | | | | | |     |   `-BinaryOperator 0x559be5615418 <col:24, col:33> 'long' '-'
|   |   | | | | | |     |     |-ImplicitCastExpr 0x559be56153e8 <col:24> 'long' <LValueToRValue>
|   |   | | | | | |     |     | `-DeclRefExpr 0x559be56153a0 <col:24> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   | | | | | |     |     `-ImplicitCastExpr 0x559be5615400 <col:33> 'long' <IntegralCast>
|   |   | | | | | |     |       `-IntegerLiteral 0x559be56153c8 <col:33> 'int' 1
|   |   | | | | | |     |-UnaryOperator 0x559be56154c8 <col:37, col:39> 'long' prefix '++'
|   |   | | | | | |     | `-DeclRefExpr 0x559be56154a0 <col:39> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |     `-CompoundStmt 0x559be5617750 <line:366:7, line:388:7>
|   |   | | | | | |       `-IfStmt 0x559be5617718 <line:367:9, line:386:9>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-<<<NULL>>>
|   |   | | | | | |         |-BinaryOperator 0x559be5615568 <line:367:13, col:18> 'int' '!='
|   |   | | | | | |         | |-ImplicitCastExpr 0x559be5615538 <col:13> 'long' <LValueToRValue>
|   |   | | | | | |         | | `-DeclRefExpr 0x559be56154e8 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | `-ImplicitCastExpr 0x559be5615550 <col:18> 'long' <LValueToRValue>
|   |   | | | | | |         |   `-DeclRefExpr 0x559be5615510 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | | |         |-CompoundStmt 0x559be56176b8 <line:368:9, line:386:9>
|   |   | | | | | |         | |-BinaryOperator 0x559be5615770 <line:369:11, col:36> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5615590 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5615720 <col:16, col:36> 'double' '*'
|   |   | | | | | |         | |   |-FloatingLiteral 0x559be5615640 <col:16> 'double' 2.998000e+03
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be5615708 <col:24, col:36> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-ArraySubscriptExpr 0x559be56156e0 <col:24, col:36> 'double' lvalue
|   |   | | | | | |         | |       |-ImplicitCastExpr 0x559be56156b0 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |       | `-DeclRefExpr 0x559be5615660 <col:24> 'double [N_rand]' lvalue Var 0x559be56114a0 'randZ_LIST' 'double [N_rand]'
|   |   | | | | | |         | |       `-ImplicitCastExpr 0x559be56156c8 <col:35> 'long' <LValueToRValue>
|   |   | | | | | |         | |         `-DeclRefExpr 0x559be5615688 <col:35> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |-BinaryOperator 0x559be5615970 <line:370:11, col:40> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5615798 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5615948 <col:22, col:40> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be5615918 <col:22, col:36> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be56158c8 <col:22, col:36> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be5615898 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be5615848 <col:22> 'double [N_rand]' lvalue Var 0x559be5611380 'randDEC_LIST' 'double [N_rand]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be56158b0 <col:35> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be5615870 <col:35> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be5615930 <col:40> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be56158f0 <col:40> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5615b70 <line:371:11, col:38> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5615998 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5615b48 <col:21, col:38> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be5615b18 <col:21, col:34> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-ArraySubscriptExpr 0x559be5615ac8 <col:21, col:34> 'double' lvalue
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be5615a98 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be5615a48 <col:21> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   |   | | | | | |         | |   |   `-ImplicitCastExpr 0x559be5615ab0 <col:33> 'long' <LValueToRValue>
|   |   | | | | | |         | |   |     `-DeclRefExpr 0x559be5615a70 <col:33> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be5615b30 <col:38> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be5615af0 <col:38> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5615e58 <line:372:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5615b98 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5615e30 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be5615d60 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be5615d38 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be5615d20 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be5615c48 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be5615cd8 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be5615cc0 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be5615c70 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be5615d08 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be5615c98 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be5615de8 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be5615dd0 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be5615d80 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be5615e18 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be5615da8 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5616140 <line:373:11, col:50> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5615e80 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5616118 <col:16, col:50> 'double' '*'
|   |   | | | | | |         | |   |-ParenExpr 0x559be5616048 <col:16, col:35> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be5616020 <col:17, col:34> 'double' '*'
|   |   | | | | | |         | |   |   |-ImplicitCastExpr 0x559be5616008 <col:17> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   | `-DeclRefExpr 0x559be5615f30 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   |   `-CallExpr 0x559be5615fc0 <col:22, col:34> 'double'
|   |   | | | | | |         | |   |     |-ImplicitCastExpr 0x559be5615fa8 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   |     | `-DeclRefExpr 0x559be5615f58 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | | | | |         | |   |     `-ImplicitCastExpr 0x559be5615ff0 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       `-DeclRefExpr 0x559be5615f80 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be56160d0 <col:39, col:50> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be56160b8 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be5616068 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be5616100 <col:43> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be5616090 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5616330 <line:374:11, col:33> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5616168 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be5616308 <col:16, col:33> 'double' '*'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be56162f0 <col:16> 'double' <LValueToRValue>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be5616218 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | | |         | |   `-CallExpr 0x559be56162a8 <col:21, col:33> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be5616290 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be5616240 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | | | | |         | |     `-ImplicitCastExpr 0x559be56162d8 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |       `-DeclRefExpr 0x559be5616268 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5616a10 <line:375:11, col:93> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5616358 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | | `-BinaryOperator 0x559be56169e8 <col:17, col:93> 'double' '+'
|   |   | | | | | |         | |   |-ParenExpr 0x559be56167f0 <col:17, col:67> 'double'
|   |   | | | | | |         | |   | `-BinaryOperator 0x559be56167c8 <col:18, col:66> 'double' '+'
|   |   | | | | | |         | |   |   |-ParenExpr 0x559be56165c0 <col:18, col:40> 'double'
|   |   | | | | | |         | |   |   | `-BinaryOperator 0x559be5616598 <col:19, col:39> 'double' '*'
|   |   | | | | | |         | |   |   |   |-ParenExpr 0x559be56164b0 <col:19, col:27> 'double'
|   |   | | | | | |         | |   |   |   | `-BinaryOperator 0x559be5616488 <col:20, col:25> 'double' '-'
|   |   | | | | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be5616458 <col:20> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |   | `-DeclRefExpr 0x559be5616408 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be5616470 <col:25> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |   |     `-DeclRefExpr 0x559be5616430 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   |   `-ParenExpr 0x559be5616578 <col:31, col:39> 'double'
|   |   | | | | | |         | |   |   |     `-BinaryOperator 0x559be5616550 <col:32, col:37> 'double' '-'
|   |   | | | | | |         | |   |   |       |-ImplicitCastExpr 0x559be5616520 <col:32> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |       | `-DeclRefExpr 0x559be56164d0 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | | |         | |   |   |       `-ImplicitCastExpr 0x559be5616538 <col:37> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |   |         `-DeclRefExpr 0x559be56164f8 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | | |         | |   |   `-ParenExpr 0x559be56167a8 <col:44, col:66> 'double'
|   |   | | | | | |         | |   |     `-BinaryOperator 0x559be5616780 <col:45, col:65> 'double' '*'
|   |   | | | | | |         | |   |       |-ParenExpr 0x559be5616688 <col:45, col:53> 'double'
|   |   | | | | | |         | |   |       | `-BinaryOperator 0x559be5616660 <col:46, col:51> 'double' '-'
|   |   | | | | | |         | |   |       |   |-ImplicitCastExpr 0x559be5616630 <col:46> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |   | `-DeclRefExpr 0x559be56165e0 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |       |   `-ImplicitCastExpr 0x559be5616648 <col:51> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |       |     `-DeclRefExpr 0x559be5616608 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   |       `-ParenExpr 0x559be5616750 <col:57, col:65> 'double'
|   |   | | | | | |         | |   |         `-BinaryOperator 0x559be5616728 <col:58, col:63> 'double' '-'
|   |   | | | | | |         | |   |           |-ImplicitCastExpr 0x559be56166f8 <col:58> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |           | `-DeclRefExpr 0x559be56166a8 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | | |         | |   |           `-ImplicitCastExpr 0x559be5616710 <col:63> 'double' <LValueToRValue>
|   |   | | | | | |         | |   |             `-DeclRefExpr 0x559be56166d0 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | | |         | |   `-ParenExpr 0x559be56169c8 <col:71, col:93> 'double'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be56169a0 <col:72, col:92> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be56168b8 <col:72, col:80> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be5616890 <col:73, col:78> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be5616860 <col:73> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be5616810 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be5616878 <col:78> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be5616838 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be5616980 <col:84, col:92> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be5616958 <col:85, col:90> 'double' '-'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be5616928 <col:85> 'double' <LValueToRValue>
|   |   | | | | | |         | |           | `-DeclRefExpr 0x559be56168d8 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | | |         | |           `-ImplicitCastExpr 0x559be5616940 <col:90> 'double' <LValueToRValue>
|   |   | | | | | |         | |             `-DeclRefExpr 0x559be5616900 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5616b98 <line:376:11, col:29> 'double' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5616a38 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | | `-CallExpr 0x559be5616b50 <col:20, col:29> 'double'
|   |   | | | | | |         | |   |-ImplicitCastExpr 0x559be5616b38 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |   | `-DeclRefExpr 0x559be5616ae8 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | | | | |         | |   `-ImplicitCastExpr 0x559be5616b80 <col:26> 'double' <LValueToRValue>
|   |   | | | | | |         | |     `-DeclRefExpr 0x559be5616b10 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | | |         | |-BinaryOperator 0x559be5617178 <line:377:11, col:94> 'int' '='
|   |   | | | | | |         | | |-DeclRefExpr 0x559be5616bc0 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         | | `-CStyleCastExpr 0x559be5617150 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | | | | |         | |   `-CallExpr 0x559be5617108 <col:32, col:94> 'double'
|   |   | | | | | |         | |     |-ImplicitCastExpr 0x559be56170f0 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | | | | |         | |     | `-DeclRefExpr 0x559be5616c70 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | | | | |         | |     `-BinaryOperator 0x559be56170c8 <col:38, col:93> 'double' '*'
|   |   | | | | | |         | |       |-ParenExpr 0x559be5616e50 <col:38, col:58> 'double'
|   |   | | | | | |         | |       | `-BinaryOperator 0x559be5616e28 <col:39, col:48> 'double' '-'
|   |   | | | | | |         | |       |   |-ImplicitCastExpr 0x559be5616df8 <col:39> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |   | `-DeclRefExpr 0x559be5616c98 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | | |         | |       |   `-ImplicitCastExpr 0x559be5616e10 <col:48> 'double' <LValueToRValue>
|   |   | | | | | |         | |       |     `-DeclRefExpr 0x559be5616cc0 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | |       `-ParenExpr 0x559be56170a8 <col:62, col:93> 'double'
|   |   | | | | | |         | |         `-BinaryOperator 0x559be5617080 <col:63, col:92> 'double' '/'
|   |   | | | | | |         | |           |-ImplicitCastExpr 0x559be5617068 <col:63> 'double' <IntegralToFloating>
|   |   | | | | | |         | |           | `-IntegerLiteral 0x559be5616e70 <col:63> 'int' 15
|   |   | | | | | |         | |           `-ParenExpr 0x559be5617048 <col:68, col:92> 'double'
|   |   | | | | | |         | |             `-BinaryOperator 0x559be5617020 <col:69, col:82> 'double' '-'
|   |   | | | | | |         | |               |-ImplicitCastExpr 0x559be5616ff0 <col:69> 'double' <LValueToRValue>
|   |   | | | | | |         | |               | `-DeclRefExpr 0x559be5616e90 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | | |         | |               `-ImplicitCastExpr 0x559be5617008 <col:82> 'double' <LValueToRValue>
|   |   | | | | | |         | |                 `-DeclRefExpr 0x559be5616fc8 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | | |         | `-IfStmt 0x559be5617680 <line:378:11, line:384:11>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-<<<NULL>>>
|   |   | | | | | |         |   |-BinaryOperator 0x559be56172f0 <line:378:15, col:56> 'int' '&&'
|   |   | | | | | |         |   | |-ParenExpr 0x559be5617228 <col:15, col:33> 'int'
|   |   | | | | | |         |   | | `-BinaryOperator 0x559be5617200 <col:16, col:32> 'int' '>='
|   |   | | | | | |         |   | |   |-ImplicitCastExpr 0x559be56171e8 <col:16> 'int' <LValueToRValue>
|   |   | | | | | |         |   | |   | `-DeclRefExpr 0x559be56171a0 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | |   `-IntegerLiteral 0x559be56171c8 <col:32> 'int' 0
|   |   | | | | | |         |   | `-ParenExpr 0x559be56172d0 <col:38, col:56> 'int'
|   |   | | | | | |         |   |   `-BinaryOperator 0x559be56172a8 <col:39, col:54> 'int' '<'
|   |   | | | | | |         |   |     |-ImplicitCastExpr 0x559be5617290 <col:39> 'int' <LValueToRValue>
|   |   | | | | | |         |   |     | `-DeclRefExpr 0x559be5617248 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be5617270 <col:54> 'int' 15
|   |   | | | | | |         |   |-CompoundStmt 0x559be5617660 <line:379:11, line:384:11>
|   |   | | | | | |         |   | |-IfStmt 0x559be5617470 <line:380:13, line:381:32>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-<<<NULL>>>
|   |   | | | | | |         |   | | |-BinaryOperator 0x559be5617378 <line:380:17, col:33> 'int' '>='
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be5617360 <col:17> 'int' <LValueToRValue>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be5617318 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   | | | `-IntegerLiteral 0x559be5617340 <col:33> 'int' 15
|   |   | | | | | |         |   | | |-CallExpr 0x559be5617410 <line:381:15, col:32> 'int'
|   |   | | | | | |         |   | | | |-ImplicitCastExpr 0x559be56173f8 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | | | | |         |   | | | | `-DeclRefExpr 0x559be56173a0 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | | | | |         |   | | | `-ImplicitCastExpr 0x559be5617458 <col:22> 'const char *' <BitCast>
|   |   | | | | | |         |   | | |   `-ImplicitCastExpr 0x559be5617440 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | | | | |         |   | | |     `-StringLiteral 0x559be56173c8 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | | | | |         |   | | `-<<<NULL>>>
|   |   | | | | | |         |   | `-CompoundAssignOperator 0x559be5617628 <line:383:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | | | | |         |   |   |-ArraySubscriptExpr 0x559be56175c8 <col:13, col:42> 'long' lvalue
|   |   | | | | | |         |   |   | |-ImplicitCastExpr 0x559be5617598 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | | | | |         |   |   | | `-DeclRefExpr 0x559be56174a8 <col:13> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   | | | | | |         |   |   | `-ImplicitCastExpr 0x559be56175b0 <col:30> 'int' <LValueToRValue>
|   |   | | | | | |         |   |   |   `-DeclRefExpr 0x559be5617570 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | | |         |   |   `-ImplicitCastExpr 0x559be5617610 <col:47> 'long' <IntegralCast>
|   |   | | | | | |         |   |     `-IntegerLiteral 0x559be56175f0 <col:47> 'int' 1
|   |   | | | | | |         |   `-<<<NULL>>>
|   |   | | | | | |         `-<<<NULL>>>
|   |   | | | | | `-ImplicitParamDecl 0x559be5613998 <line:356:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:356:13) *'
|   |   | | | | |-DeclRefExpr 0x559be5613a80 <line:357:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | |-DeclRefExpr 0x559be5613c40 <col:22> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   | | | | |-DeclRefExpr 0x559be5613e10 <line:359:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be5614058 <col:19> 'double [N_rand]' lvalue Var 0x559be56114a0 'randZ_LIST' 'double [N_rand]'
|   |   | | | | |-DeclRefExpr 0x559be56141f0 <line:360:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be5614418 <col:17> 'double [N_rand]' lvalue Var 0x559be5611380 'randDEC_LIST' 'double [N_rand]'
|   |   | | | | |-DeclRefExpr 0x559be56145d0 <col:35> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5614700 <line:361:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | | | |-<<<NULL>>>
|   |   | | | | |-DeclRefExpr 0x559be5614958 <col:16> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   |   | | | | |-DeclRefExpr 0x559be5614b30 <line:362:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5614e18 <line:363:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5615100 <line:364:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56152f0 <line:365:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | | | |-DeclRefExpr 0x559be5615618 <line:369:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5615820 <line:370:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5615a20 <line:371:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5615c20 <line:372:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5615f08 <line:373:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56161f0 <line:374:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | | | |-DeclRefExpr 0x559be56163e0 <line:375:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5616ac0 <line:376:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5616c48 <line:377:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | | | |-DeclRefExpr 0x559be5616dd0 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | | | |-DeclRefExpr 0x559be5616fa0 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | | | `-DeclRefExpr 0x559be5617548 <line:383:13> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   | | | |-DeclRefExpr 0x559be56183d8 <line:357:10> 'long' lvalue Var 0x559be5618378 '.omp.iv' 'long'
|   |   | | | |-ImplicitCastExpr 0x559be5617f28 <col:5> 'long' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x559be5617f00 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5617ea0 '.capture_expr.' 'long'
|   |   | | | |-<<<NULL>>>
|   |   | | | |-ImplicitCastExpr 0x559be5617c08 <col:14, col:21> '_Bool' <IntegralToBoolean>
|   |   | | | | `-BinaryOperator 0x559be5617be0 <col:14, col:21> 'int' '<'
|   |   | | | |   |-ImplicitCastExpr 0x559be5617b28 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | | |   `-ImplicitCastExpr 0x559be5617bc8 <col:21> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be5617ba0 <col:21> 'long' lvalue OMPCapturedExpr 0x559be5617b40 '.capture_expr.' 'long'
|   |   | | | |-BinaryOperator 0x559be5618470 <col:10> 'int' '<='
|   |   | | | | |-ImplicitCastExpr 0x559be5618440 <col:10> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be56183d8 <col:10> 'long' lvalue Var 0x559be5618378 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5618458 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be56180f0 <col:10> 'long' lvalue Var 0x559be5618090 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be5618418 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be56183d8 <col:10> 'long' lvalue Var 0x559be5618378 '.omp.iv' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5618400 <col:10> 'long' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x559be5618018 <col:10> 'long' lvalue Var 0x559be5617fb8 '.omp.lb' 'long'
|   |   | | | |-BinaryOperator 0x559be5618510 <col:10, <invalid sloc>> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be56183d8 <col:10> 'long' lvalue Var 0x559be5618378 '.omp.iv' 'long'
|   |   | | | | `-BinaryOperator 0x559be56184e8 <col:10, <invalid sloc>> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be56184b8 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be56183d8 <col:10> 'long' lvalue Var 0x559be5618378 '.omp.iv' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be56184d0 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     `-IntegerLiteral 0x559be5618498 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclStmt 0x559be5619090 <<invalid sloc>>
|   |   | | | | |-OMPCapturedExprDecl 0x559be5617b40 <col:21, col:32> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | | | `-ParenExpr 0x559be5613ce0 <col:21, col:32> 'long'
|   |   | | | | |   `-BinaryOperator 0x559be5613cb8 <col:22, col:31> 'long' '-'
|   |   | | | | |     |-ImplicitCastExpr 0x559be5613c88 <col:22> 'long' <LValueToRValue>
|   |   | | | | |     | `-DeclRefExpr 0x559be5613b30 <col:22> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   | | | | |     `-ImplicitCastExpr 0x559be5613ca0 <col:31> 'long' <IntegralCast>
|   |   | | | | |       `-IntegerLiteral 0x559be5613c68 <col:31> 'int' 1
|   |   | | | | `-OMPCapturedExprDecl 0x559be5617ea0 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | | |   `-BinaryOperator 0x559be5617e78 <col:5, <invalid sloc>> 'long' '-'
|   |   | | | |     |-BinaryOperator 0x559be5617d50 <col:5, col:35> 'long' '/'
|   |   | | | |     | |-ParenExpr 0x559be5617d18 <col:5> 'long'
|   |   | | | |     | | `-BinaryOperator 0x559be5617cf0 <col:21, col:35> 'long' '+'
|   |   | | | |     | |   |-BinaryOperator 0x559be5617cb0 <col:21, <invalid sloc>> 'long' '-'
|   |   | | | |     | |   | |-BinaryOperator 0x559be5617c50 <col:21, col:14> 'long' '-'
|   |   | | | |     | |   | | |-ImplicitCastExpr 0x559be5617c20 <col:21> 'long' <LValueToRValue>
|   |   | | | |     | |   | | | `-DeclRefExpr 0x559be5617ba0 <col:21> 'long' lvalue OMPCapturedExpr 0x559be5617b40 '.capture_expr.' 'long'
|   |   | | | |     | |   | | `-ImplicitCastExpr 0x559be5617c38 <col:14> 'long' <IntegralCast>
|   |   | | | |     | |   | |   `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | | |     | |   | `-ImplicitCastExpr 0x559be5617c98 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |     | |   |   `-IntegerLiteral 0x559be5617c78 <<invalid sloc>> 'int' 1
|   |   | | | |     | |   `-ImplicitCastExpr 0x559be5617cd8 <col:35> 'long' <IntegralCast>
|   |   | | | |     | |     `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | | | |     | `-ImplicitCastExpr 0x559be5617d38 <col:35> 'long' <IntegralCast>
|   |   | | | |     |   `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | | | |     `-ImplicitCastExpr 0x559be5617e60 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be5617e40 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be5618190 <col:10> 'int' lvalue Var 0x559be5618130 '.omp.is_last' 'int'
|   |   | | | |-DeclRefExpr 0x559be5618018 <col:10> 'long' lvalue Var 0x559be5617fb8 '.omp.lb' 'long'
|   |   | | | |-DeclRefExpr 0x559be56180f0 <col:10> 'long' lvalue Var 0x559be5618090 '.omp.ub' 'long'
|   |   | | | |-DeclRefExpr 0x559be5618250 <col:10> 'long' lvalue Var 0x559be56181f0 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be5618338 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be56180f0 <col:10> 'long' lvalue Var 0x559be5618090 '.omp.ub' 'long'
|   |   | | | | `-ConditionalOperator 0x559be5618308 <col:10> 'long'
|   |   | | | |   |-BinaryOperator 0x559be56182c8 <col:10, col:5> 'int' '>'
|   |   | | | |   | |-ImplicitCastExpr 0x559be56182b0 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | | `-DeclRefExpr 0x559be56180f0 <col:10> 'long' lvalue Var 0x559be5618090 '.omp.ub' 'long'
|   |   | | | |   | `-ImplicitCastExpr 0x559be5617f28 <col:5> 'long' <LValueToRValue>
|   |   | | | |   |   `-DeclRefExpr 0x559be5617f00 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5617ea0 '.capture_expr.' 'long'
|   |   | | | |   |-ImplicitCastExpr 0x559be5617f28 <col:5> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be5617f00 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5617ea0 '.capture_expr.' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be56182f0 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be56180f0 <col:10> 'long' lvalue Var 0x559be5618090 '.omp.ub' 'long'
|   |   | | | |-BinaryOperator 0x559be5618590 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5618018 <col:10> 'long' lvalue Var 0x559be5617fb8 '.omp.lb' 'long'
|   |   | | | | `-BinaryOperator 0x559be5618568 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be5618538 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be5618018 <col:10> 'long' lvalue Var 0x559be5617fb8 '.omp.lb' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be5618550 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be5618250 <col:10> 'long' lvalue Var 0x559be56181f0 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be5618610 <col:10> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be56180f0 <col:10> 'long' lvalue Var 0x559be5618090 '.omp.ub' 'long'
|   |   | | | | `-BinaryOperator 0x559be56185e8 <col:10> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be56185b8 <col:10> 'long' <LValueToRValue>
|   |   | | | |   | `-DeclRefExpr 0x559be56180f0 <col:10> 'long' lvalue Var 0x559be5618090 '.omp.ub' 'long'
|   |   | | | |   `-ImplicitCastExpr 0x559be56185d0 <col:10> 'long' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x559be5618250 <col:10> 'long' lvalue Var 0x559be56181f0 '.omp.stride' 'long'
|   |   | | | |-BinaryOperator 0x559be5617f78 <col:5, <invalid sloc>> 'long' '+'
|   |   | | | | |-ImplicitCastExpr 0x559be5617f28 <col:5> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be5617f00 <col:5> 'long' lvalue OMPCapturedExpr 0x559be5617ea0 '.capture_expr.' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5617f60 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be5617f40 <<invalid sloc>> 'int' 1
|   |   | | | |-DeclRefExpr 0x559be5617d78 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | |-DeclRefExpr 0x559be5617e18 <col:5> 'long' lvalue Var 0x559be5617db8 'i' 'long'
|   |   | | | |-BinaryOperator 0x559be5618678 <col:5, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5618638 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5618660 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | | |-BinaryOperator 0x559be5618758 <col:5, col:35> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be5618638 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-BinaryOperator 0x559be5618730 <col:14, col:35> 'long' '+'
|   |   | | | |   |-ImplicitCastExpr 0x559be5618718 <col:14> 'long' <IntegralCast>
|   |   | | | |   | `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | | |   `-BinaryOperator 0x559be56186f0 <col:35> 'long' '*'
|   |   | | | |     |-ImplicitCastExpr 0x559be56186c0 <col:35> 'long' <LValueToRValue>
|   |   | | | |     | `-ParenExpr 0x559be56186a0 <col:35> 'long' lvalue
|   |   | | | |     |   `-DeclRefExpr 0x559be56183d8 <col:10> 'long' lvalue Var 0x559be5618378 '.omp.iv' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be56186d8 <col:35> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | | | `-BinaryOperator 0x559be5619050 <col:5, col:35> 'long' '='
|   |   | | |   |-DeclRefExpr 0x559be5618638 <col:5> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   `-BinaryOperator 0x559be5619028 <col:14, col:35> 'long' '+'
|   |   | | |     |-ImplicitCastExpr 0x559be5619010 <col:14> 'long' <IntegralCast>
|   |   | | |     | `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | |     `-BinaryOperator 0x559be5618fe8 <col:35> 'long' '*'
|   |   | | |       |-ParenExpr 0x559be5618fb0 <col:35> 'long'
|   |   | | |       | `-BinaryOperator 0x559be5617d50 <col:5, col:35> 'long' '/'
|   |   | | |       |   |-ParenExpr 0x559be5617d18 <col:5> 'long'
|   |   | | |       |   | `-BinaryOperator 0x559be5617cf0 <col:21, col:35> 'long' '+'
|   |   | | |       |   |   |-BinaryOperator 0x559be5617cb0 <col:21, <invalid sloc>> 'long' '-'
|   |   | | |       |   |   | |-BinaryOperator 0x559be5617c50 <col:21, col:14> 'long' '-'
|   |   | | |       |   |   | | |-ImplicitCastExpr 0x559be5617c20 <col:21> 'long' <LValueToRValue>
|   |   | | |       |   |   | | | `-DeclRefExpr 0x559be5617ba0 <col:21> 'long' lvalue OMPCapturedExpr 0x559be5617b40 '.capture_expr.' 'long'
|   |   | | |       |   |   | | `-ImplicitCastExpr 0x559be5617c38 <col:14> 'long' <IntegralCast>
|   |   | | |       |   |   | |   `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | |       |   |   | `-ImplicitCastExpr 0x559be5617c98 <<invalid sloc>> 'long' <IntegralCast>
|   |   | | |       |   |   |   `-IntegerLiteral 0x559be5617c78 <<invalid sloc>> 'int' 1
|   |   | | |       |   |   `-ImplicitCastExpr 0x559be5617cd8 <col:35> 'long' <IntegralCast>
|   |   | | |       |   |     `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | | |       |   `-ImplicitCastExpr 0x559be5617d38 <col:35> 'long' <IntegralCast>
|   |   | | |       |     `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | | |       `-ImplicitCastExpr 0x559be5618fd0 <col:35> 'long' <IntegralCast>
|   |   | | |         `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | | `-OMPCriticalDirective 0x559be56199c0 <line:392:13, col:25>
|   |   | |   `-CapturedStmt 0x559be5619958 <line:393:5, line:399:5>
|   |   | |     |-CapturedDecl 0x559be5619298 <<invalid sloc>> <invalid sloc>
|   |   | |     | |-CompoundStmt 0x559be5619940 <line:393:5, line:399:5>
|   |   | |     | | `-ForStmt 0x559be5619908 <line:394:7, line:397:7>
|   |   | |     | |   |-BinaryOperator 0x559be5619460 <line:394:12, col:16> 'long' '='
|   |   | |     | |   | |-DeclRefExpr 0x559be5619378 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be5619448 <col:16> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be5619428 <col:16> 'int' 0
|   |   | |     | |   |-<<<NULL>>>
|   |   | |     | |   |-BinaryOperator 0x559be5619500 <col:19, col:23> 'int' '<'
|   |   | |     | |   | |-ImplicitCastExpr 0x559be56194d0 <col:19> 'long' <LValueToRValue>
|   |   | |     | |   | | `-DeclRefExpr 0x559be5619488 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   | `-ImplicitCastExpr 0x559be56194e8 <col:23> 'long' <IntegralCast>
|   |   | |     | |   |   `-IntegerLiteral 0x559be56194b0 <col:23> 'int' 15
|   |   | |     | |   |-UnaryOperator 0x559be5619550 <col:27, col:29> 'long' prefix '++'
|   |   | |     | |   | `-DeclRefExpr 0x559be5619528 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |   `-CompoundStmt 0x559be56198f0 <line:395:7, line:397:7>
|   |   | |     | |     `-CompoundAssignOperator 0x559be56198b8 <line:396:9, col:53> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | |     | |       |-ArraySubscriptExpr 0x559be5619730 <col:9, col:30> 'long' lvalue
|   |   | |     | |       | |-ImplicitCastExpr 0x559be5619700 <col:9> 'long *' <ArrayToPointerDecay>
|   |   | |     | |       | | `-DeclRefExpr 0x559be5619570 <col:9> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   | |     | |       | `-ImplicitCastExpr 0x559be5619718 <col:29> 'long' <LValueToRValue>
|   |   | |     | |       |   `-DeclRefExpr 0x559be56196d8 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | |       `-ImplicitCastExpr 0x559be56198a0 <col:35, col:53> 'long' <LValueToRValue>
|   |   | |     | |         `-ArraySubscriptExpr 0x559be5619878 <col:35, col:53> 'long' lvalue
|   |   | |     | |           |-ImplicitCastExpr 0x559be5619848 <col:35> 'long *' <ArrayToPointerDecay>
|   |   | |     | |           | `-DeclRefExpr 0x559be5619758 <col:35> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   | |     | |           `-ImplicitCastExpr 0x559be5619860 <col:52> 'long' <LValueToRValue>
|   |   | |     | |             `-DeclRefExpr 0x559be5619820 <col:52> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     | `-ImplicitParamDecl 0x559be5619318 <line:392:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:392:13) *'
|   |   | |     |-DeclRefExpr 0x559be5619400 <line:394:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | |     |-DeclRefExpr 0x559be56196b0 <line:396:9> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   | |     `-DeclRefExpr 0x559be56197f8 <col:35> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   | |-ImplicitParamDecl 0x559be5613270 <line:352:11> col:11 implicit .global_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be56132d0 <col:11> col:11 implicit .bound_tid. 'int *const restrict'
|   |   | |-ImplicitParamDecl 0x559be5613358 <col:11> col:11 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:352:11) *'
|   |   | |-VarDecl 0x559be5613400 <line:354:5, col:33> col:14 used sum_local_counts 'long [15]'
|   |   | |-RecordDecl 0x559be5613820 <line:356:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be56138d0 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be5613a38 <line:357:10> col:10 implicit 'long &'
|   |   | | |-FieldDecl 0x559be5613bf8 <col:22> col:22 implicit 'long &'
|   |   | | |-FieldDecl 0x559be5613dc8 <line:359:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5613e58 <line:336:21> col:21 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be5614010 <line:359:19> col:19 implicit 'double (&)[N_rand]'
|   |   | | |-FieldDecl 0x559be56141a8 <line:360:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5614218 <line:335:23> col:23 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be56143d0 <line:360:17> col:17 implicit 'double (&)[N_rand]'
|   |   | | |-FieldDecl 0x559be5614588 <col:35> col:35 implicit 'double &'
|   |   | | |-FieldDecl 0x559be56146b8 <line:361:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5614760 <line:334:22> col:22 implicit 'unsigned long'
|   |   | | |-FieldDecl 0x559be5614910 <line:361:16> col:16 implicit 'double (&)[N_rand]'
|   |   | | |-FieldDecl 0x559be5614ae8 <line:362:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5614dd0 <line:363:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be56150b8 <line:364:7> col:7 implicit 'double &'
|   |   | | |-FieldDecl 0x559be56152a8 <line:365:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be56155d0 <line:369:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be56157d8 <line:370:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be56159d8 <line:371:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5615bd8 <line:372:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5615ec0 <line:373:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be56161a8 <line:374:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5616398 <line:375:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5616a78 <line:376:11> col:11 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5616c00 <line:377:11> col:11 implicit 'int &'
|   |   | | |-FieldDecl 0x559be5616d88 <col:48> col:48 implicit 'double &'
|   |   | | |-FieldDecl 0x559be5616f58 <col:69> col:69 implicit 'double &'
|   |   | | `-FieldDecl 0x559be5617500 <line:383:13> col:13 implicit 'long (&)[15]'
|   |   | |-CapturedDecl 0x559be5613918 <<invalid sloc>> <invalid sloc>
|   |   | | |-ForStmt 0x559be5617810 <line:357:5, line:390:5>
|   |   | | | |-BinaryOperator 0x559be5613ae0 <line:357:10, col:14> 'long' '='
|   |   | | | | |-DeclRefExpr 0x559be56139f8 <col:10> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ImplicitCastExpr 0x559be5613ac8 <col:14> 'long' <IntegralCast>
|   |   | | | |   `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x559be5613d18 <col:17, col:32> 'int' '<'
|   |   | | | | |-ImplicitCastExpr 0x559be5613d00 <col:17> 'long' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x559be5613b08 <col:17> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | | `-ParenExpr 0x559be5613ce0 <col:21, col:32> 'long'
|   |   | | | |   `-BinaryOperator 0x559be5613cb8 <col:22, col:31> 'long' '-'
|   |   | | | |     |-ImplicitCastExpr 0x559be5613c88 <col:22> 'long' <LValueToRValue>
|   |   | | | |     | `-DeclRefExpr 0x559be5613b30 <col:22> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   | | | |     `-ImplicitCastExpr 0x559be5613ca0 <col:31> 'long' <IntegralCast>
|   |   | | | |       `-IntegerLiteral 0x559be5613c68 <col:31> 'int' 1
|   |   | | | |-UnaryOperator 0x559be5613d68 <col:35, col:37> 'long' prefix '++'
|   |   | | | | `-DeclRefExpr 0x559be5613d40 <col:37> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | | `-CompoundStmt 0x559be56177c8 <line:358:5, line:390:5>
|   |   | | |   |-BinaryOperator 0x559be5614140 <line:359:7, col:31> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5613d88 <col:7> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5614118 <col:11, col:31> 'double' '*'
|   |   | | |   |   |-FloatingLiteral 0x559be5613e38 <col:11> 'double' 2.998000e+03
|   |   | | |   |   `-ImplicitCastExpr 0x559be5614100 <col:19, col:31> 'double' <LValueToRValue>
|   |   | | |   |     `-ArraySubscriptExpr 0x559be56140d8 <col:19, col:31> 'double' lvalue
|   |   | | |   |       |-ImplicitCastExpr 0x559be56140a8 <col:19> 'double *' <ArrayToPointerDecay>
|   |   | | |   |       | `-DeclRefExpr 0x559be5613f18 <col:19> 'double [N_rand]' lvalue Var 0x559be56114a0 'randZ_LIST' 'double [N_rand]'
|   |   | | |   |       `-ImplicitCastExpr 0x559be56140c0 <col:30> 'long' <LValueToRValue>
|   |   | | |   |         `-DeclRefExpr 0x559be5614080 <col:30> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |-BinaryOperator 0x559be5614650 <line:360:7, col:35> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5614168 <col:7> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5614628 <col:17, col:35> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be56145f8 <col:17, col:31> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be5614498 <col:17, col:31> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be5614468 <col:17> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be56142d8 <col:17> 'double [N_rand]' lvalue Var 0x559be5611380 'randDEC_LIST' 'double [N_rand]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be5614480 <col:30> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be5614440 <col:30> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be5614610 <col:35> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be56144c0 <col:35> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be5614a80 <line:361:7, col:33> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5614678 <col:7> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5614a58 <col:16, col:33> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be5614a28 <col:16, col:29> 'double' <LValueToRValue>
|   |   | | |   |   | `-ArraySubscriptExpr 0x559be56149d8 <col:16, col:29> 'double' lvalue
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be56149a8 <col:16> 'double *' <ArrayToPointerDecay>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be5614818 <col:16> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   |   | | |   |   |   `-ImplicitCastExpr 0x559be56149c0 <col:28> 'long' <LValueToRValue>
|   |   | | |   |   |     `-DeclRefExpr 0x559be5614980 <col:28> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |   |   `-ImplicitCastExpr 0x559be5614a40 <col:33> 'double' <LValueToRValue>
|   |   | | |   |     `-DeclRefExpr 0x559be5614a00 <col:33> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be5614d68 <line:362:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5614aa8 <col:7> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5614d40 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be5614c70 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be5614c48 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be5614c30 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be5614b58 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be5614be8 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be5614bd0 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be5614b80 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be5614c18 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be5614ba8 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be5614cf8 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be5614ce0 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be5614c90 <col:33> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be5614d28 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be5614cb8 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be5615050 <line:363:7, col:43> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5614d90 <col:7> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5615028 <col:12, col:43> 'double' '*'
|   |   | | |   |   |-ParenExpr 0x559be5614f58 <col:12, col:29> 'double'
|   |   | | |   |   | `-BinaryOperator 0x559be5614f30 <col:13, col:28> 'double' '*'
|   |   | | |   |   |   |-ImplicitCastExpr 0x559be5614f18 <col:13> 'double' <LValueToRValue>
|   |   | | |   |   |   | `-DeclRefExpr 0x559be5614e40 <col:13> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   |   `-CallExpr 0x559be5614ed0 <col:17, col:28> 'double'
|   |   | | |   |   |     |-ImplicitCastExpr 0x559be5614eb8 <col:17> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |   |     | `-DeclRefExpr 0x559be5614e68 <col:17> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |   |   |     `-ImplicitCastExpr 0x559be5614f00 <col:21> 'double' <LValueToRValue>
|   |   | | |   |   |       `-DeclRefExpr 0x559be5614e90 <col:21> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   |   `-CallExpr 0x559be5614fe0 <col:33, col:43> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be5614fc8 <col:33> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be5614f78 <col:33> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be5615010 <col:37> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be5614fa0 <col:37> 'double' lvalue Var 0x559be55ea850 'RA_rad' 'double'
|   |   | | |   |-BinaryOperator 0x559be5615240 <line:364:7, col:27> 'double' '='
|   |   | | |   | |-DeclRefExpr 0x559be5615078 <col:7> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |   | `-BinaryOperator 0x559be5615218 <col:12, col:27> 'double' '*'
|   |   | | |   |   |-ImplicitCastExpr 0x559be5615200 <col:12> 'double' <LValueToRValue>
|   |   | | |   |   | `-DeclRefExpr 0x559be5615128 <col:12> 'double' lvalue Var 0x559be55ea6c0 'r' 'double'
|   |   | | |   |   `-CallExpr 0x559be56151b8 <col:16, col:27> 'double'
|   |   | | |   |     |-ImplicitCastExpr 0x559be56151a0 <col:16> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |   |     | `-DeclRefExpr 0x559be5615150 <col:16> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |   |     `-ImplicitCastExpr 0x559be56151e8 <col:20> 'double' <LValueToRValue>
|   |   | | |   |       `-DeclRefExpr 0x559be5615178 <col:20> 'double' lvalue Var 0x559be55ea788 'DEC_rad' 'double'
|   |   | | |   `-ForStmt 0x559be5617790 <line:365:7, line:388:7>
|   |   | | |     |-BinaryOperator 0x559be5615350 <line:365:12, col:16> 'long' '='
|   |   | | |     | |-DeclRefExpr 0x559be5615268 <col:12> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ImplicitCastExpr 0x559be5615338 <col:16> 'long' <IntegralCast>
|   |   | | |     |   `-IntegerLiteral 0x559be5615318 <col:16> 'int' 0
|   |   | | |     |-<<<NULL>>>
|   |   | | |     |-BinaryOperator 0x559be5615478 <col:19, col:34> 'int' '<'
|   |   | | |     | |-ImplicitCastExpr 0x559be5615460 <col:19> 'long' <LValueToRValue>
|   |   | | |     | | `-DeclRefExpr 0x559be5615378 <col:19> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     | `-ParenExpr 0x559be5615440 <col:23, col:34> 'long'
|   |   | | |     |   `-BinaryOperator 0x559be5615418 <col:24, col:33> 'long' '-'
|   |   | | |     |     |-ImplicitCastExpr 0x559be56153e8 <col:24> 'long' <LValueToRValue>
|   |   | | |     |     | `-DeclRefExpr 0x559be56153a0 <col:24> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   | | |     |     `-ImplicitCastExpr 0x559be5615400 <col:33> 'long' <IntegralCast>
|   |   | | |     |       `-IntegerLiteral 0x559be56153c8 <col:33> 'int' 1
|   |   | | |     |-UnaryOperator 0x559be56154c8 <col:37, col:39> 'long' prefix '++'
|   |   | | |     | `-DeclRefExpr 0x559be56154a0 <col:39> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |     `-CompoundStmt 0x559be5617750 <line:366:7, line:388:7>
|   |   | | |       `-IfStmt 0x559be5617718 <line:367:9, line:386:9>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-<<<NULL>>>
|   |   | | |         |-BinaryOperator 0x559be5615568 <line:367:13, col:18> 'int' '!='
|   |   | | |         | |-ImplicitCastExpr 0x559be5615538 <col:13> 'long' <LValueToRValue>
|   |   | | |         | | `-DeclRefExpr 0x559be56154e8 <col:13> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | `-ImplicitCastExpr 0x559be5615550 <col:18> 'long' <LValueToRValue>
|   |   | | |         |   `-DeclRefExpr 0x559be5615510 <col:18> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | | |         |-CompoundStmt 0x559be56176b8 <line:368:9, line:386:9>
|   |   | | |         | |-BinaryOperator 0x559be5615770 <line:369:11, col:36> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5615590 <col:11> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5615720 <col:16, col:36> 'double' '*'
|   |   | | |         | |   |-FloatingLiteral 0x559be5615640 <col:16> 'double' 2.998000e+03
|   |   | | |         | |   `-ImplicitCastExpr 0x559be5615708 <col:24, col:36> 'double' <LValueToRValue>
|   |   | | |         | |     `-ArraySubscriptExpr 0x559be56156e0 <col:24, col:36> 'double' lvalue
|   |   | | |         | |       |-ImplicitCastExpr 0x559be56156b0 <col:24> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |       | `-DeclRefExpr 0x559be5615660 <col:24> 'double [N_rand]' lvalue Var 0x559be56114a0 'randZ_LIST' 'double [N_rand]'
|   |   | | |         | |       `-ImplicitCastExpr 0x559be56156c8 <col:35> 'long' <LValueToRValue>
|   |   | | |         | |         `-DeclRefExpr 0x559be5615688 <col:35> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |-BinaryOperator 0x559be5615970 <line:370:11, col:40> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5615798 <col:11> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5615948 <col:22, col:40> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be5615918 <col:22, col:36> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be56158c8 <col:22, col:36> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be5615898 <col:22> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be5615848 <col:22> 'double [N_rand]' lvalue Var 0x559be5611380 'randDEC_LIST' 'double [N_rand]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be56158b0 <col:35> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be5615870 <col:35> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be5615930 <col:40> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be56158f0 <col:40> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5615b70 <line:371:11, col:38> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5615998 <col:11> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5615b48 <col:21, col:38> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be5615b18 <col:21, col:34> 'double' <LValueToRValue>
|   |   | | |         | |   | `-ArraySubscriptExpr 0x559be5615ac8 <col:21, col:34> 'double' lvalue
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be5615a98 <col:21> 'double *' <ArrayToPointerDecay>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be5615a48 <col:21> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   |   | | |         | |   |   `-ImplicitCastExpr 0x559be5615ab0 <col:33> 'long' <LValueToRValue>
|   |   | | |         | |   |     `-DeclRefExpr 0x559be5615a70 <col:33> 'long' lvalue Var 0x559be55e3d18 'j' 'long'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be5615b30 <col:38> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be5615af0 <col:38> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5615e58 <line:372:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5615b98 <col:11> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5615e30 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be5615d60 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be5615d38 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be5615d20 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be5615c48 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be5615cd8 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be5615cc0 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be5615c70 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be5615d08 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be5615c98 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be5615de8 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be5615dd0 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be5615d80 <col:39> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be5615e18 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be5615da8 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5616140 <line:373:11, col:50> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5615e80 <col:11> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5616118 <col:16, col:50> 'double' '*'
|   |   | | |         | |   |-ParenExpr 0x559be5616048 <col:16, col:35> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be5616020 <col:17, col:34> 'double' '*'
|   |   | | |         | |   |   |-ImplicitCastExpr 0x559be5616008 <col:17> 'double' <LValueToRValue>
|   |   | | |         | |   |   | `-DeclRefExpr 0x559be5615f30 <col:17> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   |   `-CallExpr 0x559be5615fc0 <col:22, col:34> 'double'
|   |   | | |         | |   |     |-ImplicitCastExpr 0x559be5615fa8 <col:22> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   |     | `-DeclRefExpr 0x559be5615f58 <col:22> 'double (double)' Function 0x559be55f0e40 'cos' 'double (double)'
|   |   | | |         | |   |     `-ImplicitCastExpr 0x559be5615ff0 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |   |       `-DeclRefExpr 0x559be5615f80 <col:26> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be56160d0 <col:39, col:50> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be56160b8 <col:39> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be5616068 <col:39> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be5616100 <col:43> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be5616090 <col:43> 'double' lvalue Var 0x559be55ead00 'RA_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5616330 <line:374:11, col:33> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5616168 <col:11> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be5616308 <col:16, col:33> 'double' '*'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be56162f0 <col:16> 'double' <LValueToRValue>
|   |   | | |         | |   | `-DeclRefExpr 0x559be5616218 <col:16> 'double' lvalue Var 0x559be55eab70 'rj' 'double'
|   |   | | |         | |   `-CallExpr 0x559be56162a8 <col:21, col:33> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be5616290 <col:21> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be5616240 <col:21> 'double (double)' Function 0x559be55f2158 'sin' 'double (double)'
|   |   | | |         | |     `-ImplicitCastExpr 0x559be56162d8 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |       `-DeclRefExpr 0x559be5616268 <col:25> 'double' lvalue Var 0x559be55eac38 'DEC_radj' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5616a10 <line:375:11, col:93> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5616358 <col:11> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | | `-BinaryOperator 0x559be56169e8 <col:17, col:93> 'double' '+'
|   |   | | |         | |   |-ParenExpr 0x559be56167f0 <col:17, col:67> 'double'
|   |   | | |         | |   | `-BinaryOperator 0x559be56167c8 <col:18, col:66> 'double' '+'
|   |   | | |         | |   |   |-ParenExpr 0x559be56165c0 <col:18, col:40> 'double'
|   |   | | |         | |   |   | `-BinaryOperator 0x559be5616598 <col:19, col:39> 'double' '*'
|   |   | | |         | |   |   |   |-ParenExpr 0x559be56164b0 <col:19, col:27> 'double'
|   |   | | |         | |   |   |   | `-BinaryOperator 0x559be5616488 <col:20, col:25> 'double' '-'
|   |   | | |         | |   |   |   |   |-ImplicitCastExpr 0x559be5616458 <col:20> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |   | `-DeclRefExpr 0x559be5616408 <col:20> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |   |   `-ImplicitCastExpr 0x559be5616470 <col:25> 'double' <LValueToRValue>
|   |   | | |         | |   |   |   |     `-DeclRefExpr 0x559be5616430 <col:25> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   |   `-ParenExpr 0x559be5616578 <col:31, col:39> 'double'
|   |   | | |         | |   |   |     `-BinaryOperator 0x559be5616550 <col:32, col:37> 'double' '-'
|   |   | | |         | |   |   |       |-ImplicitCastExpr 0x559be5616520 <col:32> 'double' <LValueToRValue>
|   |   | | |         | |   |   |       | `-DeclRefExpr 0x559be56164d0 <col:32> 'double' lvalue Var 0x559be55ea918 'x1' 'double'
|   |   | | |         | |   |   |       `-ImplicitCastExpr 0x559be5616538 <col:37> 'double' <LValueToRValue>
|   |   | | |         | |   |   |         `-DeclRefExpr 0x559be56164f8 <col:37> 'double' lvalue Var 0x559be55eadc8 'x2' 'double'
|   |   | | |         | |   |   `-ParenExpr 0x559be56167a8 <col:44, col:66> 'double'
|   |   | | |         | |   |     `-BinaryOperator 0x559be5616780 <col:45, col:65> 'double' '*'
|   |   | | |         | |   |       |-ParenExpr 0x559be5616688 <col:45, col:53> 'double'
|   |   | | |         | |   |       | `-BinaryOperator 0x559be5616660 <col:46, col:51> 'double' '-'
|   |   | | |         | |   |       |   |-ImplicitCastExpr 0x559be5616630 <col:46> 'double' <LValueToRValue>
|   |   | | |         | |   |       |   | `-DeclRefExpr 0x559be56165e0 <col:46> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |       |   `-ImplicitCastExpr 0x559be5616648 <col:51> 'double' <LValueToRValue>
|   |   | | |         | |   |       |     `-DeclRefExpr 0x559be5616608 <col:51> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   |       `-ParenExpr 0x559be5616750 <col:57, col:65> 'double'
|   |   | | |         | |   |         `-BinaryOperator 0x559be5616728 <col:58, col:63> 'double' '-'
|   |   | | |         | |   |           |-ImplicitCastExpr 0x559be56166f8 <col:58> 'double' <LValueToRValue>
|   |   | | |         | |   |           | `-DeclRefExpr 0x559be56166a8 <col:58> 'double' lvalue Var 0x559be55ea9e0 'y1' 'double'
|   |   | | |         | |   |           `-ImplicitCastExpr 0x559be5616710 <col:63> 'double' <LValueToRValue>
|   |   | | |         | |   |             `-DeclRefExpr 0x559be56166d0 <col:63> 'double' lvalue Var 0x559be55eae90 'y2' 'double'
|   |   | | |         | |   `-ParenExpr 0x559be56169c8 <col:71, col:93> 'double'
|   |   | | |         | |     `-BinaryOperator 0x559be56169a0 <col:72, col:92> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be56168b8 <col:72, col:80> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be5616890 <col:73, col:78> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be5616860 <col:73> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be5616810 <col:73> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be5616878 <col:78> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be5616838 <col:78> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be5616980 <col:84, col:92> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be5616958 <col:85, col:90> 'double' '-'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be5616928 <col:85> 'double' <LValueToRValue>
|   |   | | |         | |           | `-DeclRefExpr 0x559be56168d8 <col:85> 'double' lvalue Var 0x559be55eaaa8 'z1' 'double'
|   |   | | |         | |           `-ImplicitCastExpr 0x559be5616940 <col:90> 'double' <LValueToRValue>
|   |   | | |         | |             `-DeclRefExpr 0x559be5616900 <col:90> 'double' lvalue Var 0x559be55ec878 'z2' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5616b98 <line:376:11, col:29> 'double' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5616a38 <col:11> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | | `-CallExpr 0x559be5616b50 <col:20, col:29> 'double'
|   |   | | |         | |   |-ImplicitCastExpr 0x559be5616b38 <col:20> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |   | `-DeclRefExpr 0x559be5616ae8 <col:20> 'double (double)' Function 0x559be55e4318 'log10' 'double (double)'
|   |   | | |         | |   `-ImplicitCastExpr 0x559be5616b80 <col:26> 'double' <LValueToRValue>
|   |   | | |         | |     `-DeclRefExpr 0x559be5616b10 <col:26> 'double' lvalue Var 0x559be55ea5a0 'DSQ' 'double'
|   |   | | |         | |-BinaryOperator 0x559be5617178 <line:377:11, col:94> 'int' '='
|   |   | | |         | | |-DeclRefExpr 0x559be5616bc0 <col:11> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         | | `-CStyleCastExpr 0x559be5617150 <col:26, col:94> 'int' <FloatingToIntegral>
|   |   | | |         | |   `-CallExpr 0x559be5617108 <col:32, col:94> 'double'
|   |   | | |         | |     |-ImplicitCastExpr 0x559be56170f0 <col:32> 'double (*)(double)' <FunctionToPointerDecay>
|   |   | | |         | |     | `-DeclRefExpr 0x559be5616c70 <col:32> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   | | |         | |     `-BinaryOperator 0x559be56170c8 <col:38, col:93> 'double' '*'
|   |   | | |         | |       |-ParenExpr 0x559be5616e50 <col:38, col:58> 'double'
|   |   | | |         | |       | `-BinaryOperator 0x559be5616e28 <col:39, col:48> 'double' '-'
|   |   | | |         | |       |   |-ImplicitCastExpr 0x559be5616df8 <col:39> 'double' <LValueToRValue>
|   |   | | |         | |       |   | `-DeclRefExpr 0x559be5616c98 <col:39> 'double' lvalue Var 0x559be55ea630 'logDSQ' 'double'
|   |   | | |         | |       |   `-ImplicitCastExpr 0x559be5616e10 <col:48> 'double' <LValueToRValue>
|   |   | | |         | |       |     `-DeclRefExpr 0x559be5616cc0 <col:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | |       `-ParenExpr 0x559be56170a8 <col:62, col:93> 'double'
|   |   | | |         | |         `-BinaryOperator 0x559be5617080 <col:63, col:92> 'double' '/'
|   |   | | |         | |           |-ImplicitCastExpr 0x559be5617068 <col:63> 'double' <IntegralToFloating>
|   |   | | |         | |           | `-IntegerLiteral 0x559be5616e70 <col:63> 'int' 15
|   |   | | |         | |           `-ParenExpr 0x559be5617048 <col:68, col:92> 'double'
|   |   | | |         | |             `-BinaryOperator 0x559be5617020 <col:69, col:82> 'double' '-'
|   |   | | |         | |               |-ImplicitCastExpr 0x559be5616ff0 <col:69> 'double' <LValueToRValue>
|   |   | | |         | |               | `-DeclRefExpr 0x559be5616e90 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   | | |         | |               `-ImplicitCastExpr 0x559be5617008 <col:82> 'double' <LValueToRValue>
|   |   | | |         | |                 `-DeclRefExpr 0x559be5616fc8 <col:82> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   | | |         | `-IfStmt 0x559be5617680 <line:378:11, line:384:11>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-<<<NULL>>>
|   |   | | |         |   |-BinaryOperator 0x559be56172f0 <line:378:15, col:56> 'int' '&&'
|   |   | | |         |   | |-ParenExpr 0x559be5617228 <col:15, col:33> 'int'
|   |   | | |         |   | | `-BinaryOperator 0x559be5617200 <col:16, col:32> 'int' '>='
|   |   | | |         |   | |   |-ImplicitCastExpr 0x559be56171e8 <col:16> 'int' <LValueToRValue>
|   |   | | |         |   | |   | `-DeclRefExpr 0x559be56171a0 <col:16> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | |   `-IntegerLiteral 0x559be56171c8 <col:32> 'int' 0
|   |   | | |         |   | `-ParenExpr 0x559be56172d0 <col:38, col:56> 'int'
|   |   | | |         |   |   `-BinaryOperator 0x559be56172a8 <col:39, col:54> 'int' '<'
|   |   | | |         |   |     |-ImplicitCastExpr 0x559be5617290 <col:39> 'int' <LValueToRValue>
|   |   | | |         |   |     | `-DeclRefExpr 0x559be5617248 <col:39> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |     `-IntegerLiteral 0x559be5617270 <col:54> 'int' 15
|   |   | | |         |   |-CompoundStmt 0x559be5617660 <line:379:11, line:384:11>
|   |   | | |         |   | |-IfStmt 0x559be5617470 <line:380:13, line:381:32>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-<<<NULL>>>
|   |   | | |         |   | | |-BinaryOperator 0x559be5617378 <line:380:17, col:33> 'int' '>='
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be5617360 <col:17> 'int' <LValueToRValue>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be5617318 <col:17> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   | | | `-IntegerLiteral 0x559be5617340 <col:33> 'int' 15
|   |   | | |         |   | | |-CallExpr 0x559be5617410 <line:381:15, col:32> 'int'
|   |   | | |         |   | | | |-ImplicitCastExpr 0x559be56173f8 <col:15> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | |         |   | | | | `-DeclRefExpr 0x559be56173a0 <col:15> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |   | | |         |   | | | `-ImplicitCastExpr 0x559be5617458 <col:22> 'const char *' <BitCast>
|   |   | | |         |   | | |   `-ImplicitCastExpr 0x559be5617440 <col:22> 'char *' <ArrayToPointerDecay>
|   |   | | |         |   | | |     `-StringLiteral 0x559be56173c8 <col:22> 'char [9]' lvalue "YELLING!"
|   |   | | |         |   | | `-<<<NULL>>>
|   |   | | |         |   | `-CompoundAssignOperator 0x559be5617628 <line:383:13, col:47> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   | | |         |   |   |-ArraySubscriptExpr 0x559be56175c8 <col:13, col:42> 'long' lvalue
|   |   | | |         |   |   | |-ImplicitCastExpr 0x559be5617598 <col:13> 'long *' <ArrayToPointerDecay>
|   |   | | |         |   |   | | `-DeclRefExpr 0x559be56174a8 <col:13> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   | | |         |   |   | `-ImplicitCastExpr 0x559be56175b0 <col:30> 'int' <LValueToRValue>
|   |   | | |         |   |   |   `-DeclRefExpr 0x559be5617570 <col:30> 'int' lvalue Var 0x559be55e5e80 'distSQ_index' 'int'
|   |   | | |         |   |   `-ImplicitCastExpr 0x559be5617610 <col:47> 'long' <IntegralCast>
|   |   | | |         |   |     `-IntegerLiteral 0x559be56175f0 <col:47> 'int' 1
|   |   | | |         |   `-<<<NULL>>>
|   |   | | |         `-<<<NULL>>>
|   |   | | `-ImplicitParamDecl 0x559be5613998 <line:356:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:356:13) *'
|   |   | |-OMPCapturedExprDecl 0x559be5617b40 <line:357:21, col:32> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-ParenExpr 0x559be5613ce0 <col:21, col:32> 'long'
|   |   | |   `-BinaryOperator 0x559be5613cb8 <col:22, col:31> 'long' '-'
|   |   | |     |-ImplicitCastExpr 0x559be5613c88 <col:22> 'long' <LValueToRValue>
|   |   | |     | `-DeclRefExpr 0x559be5613b30 <col:22> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   | |     `-ImplicitCastExpr 0x559be5613ca0 <col:31> 'long' <IntegralCast>
|   |   | |       `-IntegerLiteral 0x559be5613c68 <col:31> 'int' 1
|   |   | |-OMPCapturedExprDecl 0x559be5617ea0 <col:5, <invalid sloc>> <invalid sloc> implicit used .capture_expr. 'long'
|   |   | | `-BinaryOperator 0x559be5617e78 <col:5, <invalid sloc>> 'long' '-'
|   |   | |   |-BinaryOperator 0x559be5617d50 <col:5, col:35> 'long' '/'
|   |   | |   | |-ParenExpr 0x559be5617d18 <col:5> 'long'
|   |   | |   | | `-BinaryOperator 0x559be5617cf0 <col:21, col:35> 'long' '+'
|   |   | |   | |   |-BinaryOperator 0x559be5617cb0 <col:21, <invalid sloc>> 'long' '-'
|   |   | |   | |   | |-BinaryOperator 0x559be5617c50 <col:21, col:14> 'long' '-'
|   |   | |   | |   | | |-ImplicitCastExpr 0x559be5617c20 <col:21> 'long' <LValueToRValue>
|   |   | |   | |   | | | `-DeclRefExpr 0x559be5617ba0 <col:21> 'long' lvalue OMPCapturedExpr 0x559be5617b40 '.capture_expr.' 'long'
|   |   | |   | |   | | `-ImplicitCastExpr 0x559be5617c38 <col:14> 'long' <IntegralCast>
|   |   | |   | |   | |   `-IntegerLiteral 0x559be5613aa8 <col:14> 'int' 0
|   |   | |   | |   | `-ImplicitCastExpr 0x559be5617c98 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |   | |   |   `-IntegerLiteral 0x559be5617c78 <<invalid sloc>> 'int' 1
|   |   | |   | |   `-ImplicitCastExpr 0x559be5617cd8 <col:35> 'long' <IntegralCast>
|   |   | |   | |     `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | |   | `-ImplicitCastExpr 0x559be5617d38 <col:35> 'long' <IntegralCast>
|   |   | |   |   `-IntegerLiteral 0x559be5617b08 <col:35> 'int' 1
|   |   | |   `-ImplicitCastExpr 0x559be5617e60 <<invalid sloc>> 'long' <IntegralCast>
|   |   | |     `-IntegerLiteral 0x559be5617e40 <<invalid sloc>> 'int' 1
|   |   | |-RecordDecl 0x559be56191a0 <line:392:13> col:13 implicit struct definition
|   |   | | |-CapturedRecordAttr 0x559be5619250 <<invalid sloc>> Implicit
|   |   | | |-FieldDecl 0x559be56193b8 <line:394:12> col:12 implicit 'long &'
|   |   | | |-FieldDecl 0x559be5619668 <line:396:9> col:9 implicit 'long (&)[15]'
|   |   | | `-FieldDecl 0x559be56197b0 <col:35> col:35 implicit 'long (&)[15]'
|   |   | `-CapturedDecl 0x559be5619298 <<invalid sloc>> <invalid sloc>
|   |   |   |-CompoundStmt 0x559be5619940 <line:393:5, line:399:5>
|   |   |   | `-ForStmt 0x559be5619908 <line:394:7, line:397:7>
|   |   |   |   |-BinaryOperator 0x559be5619460 <line:394:12, col:16> 'long' '='
|   |   |   |   | |-DeclRefExpr 0x559be5619378 <col:12> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be5619448 <col:16> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be5619428 <col:16> 'int' 0
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x559be5619500 <col:19, col:23> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x559be56194d0 <col:19> 'long' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x559be5619488 <col:19> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   | `-ImplicitCastExpr 0x559be56194e8 <col:23> 'long' <IntegralCast>
|   |   |   |   |   `-IntegerLiteral 0x559be56194b0 <col:23> 'int' 15
|   |   |   |   |-UnaryOperator 0x559be5619550 <col:27, col:29> 'long' prefix '++'
|   |   |   |   | `-DeclRefExpr 0x559be5619528 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |   `-CompoundStmt 0x559be56198f0 <line:395:7, line:397:7>
|   |   |   |     `-CompoundAssignOperator 0x559be56198b8 <line:396:9, col:53> 'long' '+=' ComputeLHSTy='long' ComputeResultTy='long'
|   |   |   |       |-ArraySubscriptExpr 0x559be5619730 <col:9, col:30> 'long' lvalue
|   |   |   |       | |-ImplicitCastExpr 0x559be5619700 <col:9> 'long *' <ArrayToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x559be5619570 <col:9> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   |   |       | `-ImplicitCastExpr 0x559be5619718 <col:29> 'long' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x559be56196d8 <col:29> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |       `-ImplicitCastExpr 0x559be56198a0 <col:35, col:53> 'long' <LValueToRValue>
|   |   |   |         `-ArraySubscriptExpr 0x559be5619878 <col:35, col:53> 'long' lvalue
|   |   |   |           |-ImplicitCastExpr 0x559be5619848 <col:35> 'long *' <ArrayToPointerDecay>
|   |   |   |           | `-DeclRefExpr 0x559be5619758 <col:35> 'long [15]' lvalue Var 0x559be5613400 'sum_local_counts' 'long [15]'
|   |   |   |           `-ImplicitCastExpr 0x559be5619860 <col:52> 'long' <LValueToRValue>
|   |   |   |             `-DeclRefExpr 0x559be5619820 <col:52> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   `-ImplicitParamDecl 0x559be5619318 <line:392:13> col:13 implicit __context 'struct (anonymous at HW3ParallelCorrelationFunc2_2_-_main.c:392:13) *'
|   |   |-DeclRefExpr 0x559be5613798 <line:356:38> 'int' lvalue Var 0x559be55e3da8 'chunk' 'int'
|   |   |-DeclRefExpr 0x559be5613bb8 <line:357:22> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be5613fb8 <line:359:19> 'double [N_rand]' lvalue Var 0x559be56114a0 'randZ_LIST' 'double [N_rand]'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be5614378 <line:360:17> 'double [N_rand]' lvalue Var 0x559be5611380 'randDEC_LIST' 'double [N_rand]'
|   |   |-DeclRefExpr 0x559be5614548 <col:35> 'double' lvalue Var 0x559be55e3f98 'deg_to_rad' 'double'
|   |   |-<<<NULL>>>
|   |   |-DeclRefExpr 0x559be56148b8 <line:361:16> 'double [N_rand]' lvalue Var 0x559be5611260 'randRA_LIST' 'double [N_rand]'
|   |   |-DeclRefExpr 0x559be5616d48 <line:377:48> 'double' lvalue Var 0x559be55e4278 'logrSQ_min' 'double'
|   |   |-DeclRefExpr 0x559be5616f18 <col:69> 'double' lvalue Var 0x559be55e4900 'logrSQ_max' 'double'
|   |   `-DeclRefExpr 0x559be5619610 <line:396:9> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |-CallExpr 0x559be5619c68 <line:401:3, col:44> 'int'
|   | |-ImplicitCastExpr 0x559be5619c50 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5619ba8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5619cb0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5619c98 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5619c08 <col:10> 'char [32]' lvalue "FINISHED RANDOM NESTED LOOPS! \n"
|   |-CallExpr 0x559be5619d38 <line:402:3, col:20> 'int'
|   | |-ImplicitCastExpr 0x559be5619d20 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be5619cc8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5619d80 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5619d68 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5619cf0 <col:10> 'char [9]' lvalue "Counts: "
|   |-ForStmt 0x559be561a388 <line:403:3, line:407:3>
|   | |-BinaryOperator 0x559be5619df8 <line:403:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be5619d98 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5619de0 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5619dc0 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be5619e98 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be5619e68 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be5619e20 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5619e80 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5619e48 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be5619ee8 <col:23, col:25> 'long' prefix '++'
|   | | `-DeclRefExpr 0x559be5619ec0 <col:25> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561a368 <line:404:3, line:407:3>
|   |   |-BinaryOperator 0x559be561a1a8 <line:405:5, col:75> 'long' '='
|   |   | |-ArraySubscriptExpr 0x559be5619f88 <col:5, col:26> 'long' lvalue
|   |   | | |-ImplicitCastExpr 0x559be5619f58 <col:5> 'long *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x559be5619f08 <col:5> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   | | `-ImplicitCastExpr 0x559be5619f70 <col:25> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559be5619f30 <col:25> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | `-ImplicitCastExpr 0x559be561a190 <col:30, col:75> 'long' <IntegralCast>
|   |   |   `-CStyleCastExpr 0x559be561a168 <col:30, col:75> 'long long' <FloatingToIntegral>
|   |   |     `-CallExpr 0x559be561a120 <col:42, col:75> 'double'
|   |   |       |-ImplicitCastExpr 0x559be561a108 <col:42> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x559be5619fc0 <col:42> 'double (double)' Function 0x559be55f4d08 'floor' 'double (double)'
|   |   |       `-BinaryOperator 0x559be561a0e0 <col:48, col:73> 'double' '/'
|   |   |         |-ImplicitCastExpr 0x559be561a0c8 <col:48, col:69> 'double' <IntegralToFloating>
|   |   |         | `-ImplicitCastExpr 0x559be561a0b0 <col:48, col:69> 'long' <LValueToRValue>
|   |   |         |   `-ArraySubscriptExpr 0x559be561a068 <col:48, col:69> 'long' lvalue
|   |   |         |     |-ImplicitCastExpr 0x559be561a038 <col:48> 'long *' <ArrayToPointerDecay>
|   |   |         |     | `-DeclRefExpr 0x559be5619fe8 <col:48> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   |         |     `-ImplicitCastExpr 0x559be561a050 <col:68> 'long' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x559be561a010 <col:68> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |         `-FloatingLiteral 0x559be561a090 <col:73> 'double' 2.000000e+00
|   |   `-CallExpr 0x559be561a2e8 <line:406:5, col:42> 'int'
|   |     |-ImplicitCastExpr 0x559be561a2d0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be561a1d0 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |-ImplicitCastExpr 0x559be561a338 <col:12> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x559be561a320 <col:12> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x559be561a1f8 <col:12> 'char [5]' lvalue "%ld "
|   |     `-ImplicitCastExpr 0x559be561a350 <col:20, col:41> 'long' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x559be561a2a8 <col:20, col:41> 'long' lvalue
|   |         |-ImplicitCastExpr 0x559be561a278 <col:20> 'long *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x559be561a228 <col:20> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |         `-ImplicitCastExpr 0x559be561a290 <col:40> 'long' <LValueToRValue>
|   |           `-DeclRefExpr 0x559be561a250 <col:40> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |-CallExpr 0x559be561a430 <line:409:3, col:14> 'int'
|   | |-ImplicitCastExpr 0x559be561a418 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561a3c0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561a478 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561a460 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561a3e8 <col:10> 'char [2]' lvalue "\n"
|   |-CallExpr 0x559be561a528 <line:410:3, col:54> 'int'
|   | |-ImplicitCastExpr 0x559be561a510 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561a490 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561a570 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561a558 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561a4b8 <col:10> 'char [42]' lvalue "Calculating Mr21 Correlation Function...\n"
|   |-CallExpr 0x559be561a660 <line:411:3, col:32> 'int'
|   | |-ImplicitCastExpr 0x559be561a648 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561a588 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | |-ImplicitCastExpr 0x559be561a6b0 <col:10> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x559be561a698 <col:10> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x559be561a5e8 <col:10> 'char [12]' lvalue "Nrand: %ld\n"
|   | `-ImplicitCastExpr 0x559be561a6c8 <col:26> 'long' <LValueToRValue>
|   |   `-DeclRefExpr 0x559be561a620 <col:26> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |-CallExpr 0x559be561a780 <line:412:3, col:32> 'int'
|   | |-ImplicitCastExpr 0x559be561a768 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561a6e0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | |-ImplicitCastExpr 0x559be561a7d0 <col:10> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x559be561a7b8 <col:10> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x559be561a708 <col:10> 'char [12]' lvalue "Ndata: %ld\n"
|   | `-ImplicitCastExpr 0x559be561a7e8 <col:26> 'long' <LValueToRValue>
|   |   `-DeclRefExpr 0x559be561a740 <col:26> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |-DeclStmt 0x559be561aa28 <line:413:3, col:55>
|   | `-VarDecl 0x559be561a818 <col:3, col:54> col:10 used ratio 'double' cinit
|   |   `-CStyleCastExpr 0x559be561aa00 <col:18, col:54> 'double' <NoOp>
|   |     `-ParenExpr 0x559be561a9e0 <col:27, col:54> 'double'
|   |       `-BinaryOperator 0x559be561a970 <col:28, col:53> 'double' '/'
|   |         |-ImplicitCastExpr 0x559be561a958 <col:28> 'double' <IntegralToFloating>
|   |         | `-ImplicitCastExpr 0x559be561a940 <col:28> 'long' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x559be561a878 <col:28> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |         `-ParenExpr 0x559be561a920 <col:37, col:53> 'double'
|   |           `-CStyleCastExpr 0x559be561a8f8 <col:38, col:47> 'double' <IntegralToFloating>
|   |             `-ImplicitCastExpr 0x559be561a8e0 <col:47> 'long' <LValueToRValue>
|   |               `-DeclRefExpr 0x559be561a8a0 <col:47> 'long' lvalue Var 0x559be55e8ba8 'N_data' 'long'
|   |-ForStmt 0x559be561b240 <line:414:3, line:418:3>
|   | |-BinaryOperator 0x559be561aaa0 <line:414:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561aa40 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561aa88 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561aa68 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561ab40 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561ab10 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561aac8 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561ab28 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561aaf0 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561ab90 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561ab68 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561b220 <line:415:3, line:418:3>
|   |   |-BinaryOperator 0x559be561b060 <line:416:5, col:108> 'double' '='
|   |   | |-ArraySubscriptExpr 0x559be561ac30 <col:5, col:14> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x559be561ac00 <col:5> 'double *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x559be561abb0 <col:5> 'double [15]' lvalue Var 0x559be55e5450 'Xi_func' 'double [15]'
|   |   | | `-ImplicitCastExpr 0x559be561ac18 <col:13> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559be561abd8 <col:13> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | `-BinaryOperator 0x559be561b038 <col:18, col:108> 'double' '-'
|   |   |   |-ParenExpr 0x559be561aff8 <col:18, col:104> 'double'
|   |   |   | `-BinaryOperator 0x559be561afd0 <col:19, col:103> 'double' '*'
|   |   |   |   |-ParenExpr 0x559be561ad00 <col:19, col:33> 'double'
|   |   |   |   | `-BinaryOperator 0x559be561acd8 <col:20, col:28> 'double' '*'
|   |   |   |   |   |-ImplicitCastExpr 0x559be561aca8 <col:20> 'double' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x559be561ac58 <col:20> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   |   |   |   |   `-ImplicitCastExpr 0x559be561acc0 <col:28> 'double' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x559be561ac80 <col:28> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   |   |   |   `-ParenExpr 0x559be561af88 <col:37, col:103> 'double'
|   |   |   |     `-BinaryOperator 0x559be561af60 <col:38, col:102> 'double' '/'
|   |   |   |       |-ParenExpr 0x559be561ae20 <col:38, col:66> 'double'
|   |   |   |       | `-CStyleCastExpr 0x559be561adf8 <col:39, col:65> 'double' <IntegralToFloating>
|   |   |   |       |   `-ImplicitCastExpr 0x559be561ade0 <col:48, col:65> 'long' <LValueToRValue>
|   |   |   |       |     `-ArraySubscriptExpr 0x559be561ada0 <col:48, col:65> 'long' lvalue
|   |   |   |       |       |-ImplicitCastExpr 0x559be561ad70 <col:48> 'long *' <ArrayToPointerDecay>
|   |   |   |       |       | `-DeclRefExpr 0x559be561ad20 <col:48> 'long [15]' lvalue Var 0x559be55e4db0 'distance_counts' 'long [15]'
|   |   |   |       |       `-ImplicitCastExpr 0x559be561ad88 <col:64> 'long' <LValueToRValue>
|   |   |   |       |         `-DeclRefExpr 0x559be561ad48 <col:64> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |       `-ParenExpr 0x559be561af40 <col:70, col:102> 'double'
|   |   |   |         `-CStyleCastExpr 0x559be561af18 <col:71, col:101> 'double' <IntegralToFloating>
|   |   |   |           `-ImplicitCastExpr 0x559be561af00 <col:80, col:101> 'long' <LValueToRValue>
|   |   |   |             `-ArraySubscriptExpr 0x559be561aec0 <col:80, col:101> 'long' lvalue
|   |   |   |               |-ImplicitCastExpr 0x559be561ae90 <col:80> 'long *' <ArrayToPointerDecay>
|   |   |   |               | `-DeclRefExpr 0x559be561ae40 <col:80> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   |   |               `-ImplicitCastExpr 0x559be561aea8 <col:100> 'long' <LValueToRValue>
|   |   |   |                 `-DeclRefExpr 0x559be561ae68 <col:100> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   `-FloatingLiteral 0x559be561b018 <col:108> 'double' 1.000000e+00
|   |   `-CallExpr 0x559be561b1a0 <line:417:5, col:32> 'int'
|   |     |-ImplicitCastExpr 0x559be561b188 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be561b088 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |-ImplicitCastExpr 0x559be561b1f0 <col:12> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x559be561b1d8 <col:12> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x559be561b0b0 <col:12> 'char [7]' lvalue "%.2lf "
|   |     `-ImplicitCastExpr 0x559be561b208 <col:22, col:31> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x559be561b160 <col:22, col:31> 'double' lvalue
|   |         |-ImplicitCastExpr 0x559be561b130 <col:22> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x559be561b0e0 <col:22> 'double [15]' lvalue Var 0x559be55e5450 'Xi_func' 'double [15]'
|   |         `-ImplicitCastExpr 0x559be561b148 <col:30> 'long' <LValueToRValue>
|   |           `-DeclRefExpr 0x559be561b108 <col:30> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |-CallExpr 0x559be561b2e8 <line:420:3, col:14> 'int'
|   | |-ImplicitCastExpr 0x559be561b2d0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561b278 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561b330 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561b318 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561b2a0 <col:10> 'char [2]' lvalue "\n"
|   |-CallExpr 0x559be561b3e0 <line:421:3, col:54> 'int'
|   | |-ImplicitCastExpr 0x559be561b3c8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561b348 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561b428 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561b410 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561b370 <col:10> 'char [42]' lvalue "Calculating Mr20 Correlation Function...\n"
|   |-CallExpr 0x559be561b4e0 <line:422:3, col:32> 'int'
|   | |-ImplicitCastExpr 0x559be561b4c8 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561b440 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | |-ImplicitCastExpr 0x559be561b530 <col:10> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x559be561b518 <col:10> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x559be561b468 <col:10> 'char [12]' lvalue "Nrand: %ld\n"
|   | `-ImplicitCastExpr 0x559be561b548 <col:26> 'long' <LValueToRValue>
|   |   `-DeclRefExpr 0x559be561b4a0 <col:26> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |-CallExpr 0x559be561b640 <line:423:3, col:36> 'int'
|   | |-ImplicitCastExpr 0x559be561b628 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561b560 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | |-ImplicitCastExpr 0x559be561b690 <col:10> 'const char *' <BitCast>
|   | | `-ImplicitCastExpr 0x559be561b678 <col:10> 'char *' <ArrayToPointerDecay>
|   | |   `-StringLiteral 0x559be561b5c8 <col:10> 'char [14]' lvalue "N20data: %ld\n"
|   | `-ImplicitCastExpr 0x559be561b6a8 <col:28> 'long' <LValueToRValue>
|   |   `-DeclRefExpr 0x559be561b600 <col:28> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |-BinaryOperator 0x559be561b8e0 <line:424:3, col:60> 'double' '='
|   | |-DeclRefExpr 0x559be561b6c0 <col:3> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   | `-CStyleCastExpr 0x559be561b8b8 <col:11, col:60> 'double' <NoOp>
|   |   `-ParenExpr 0x559be561b898 <col:20, col:60> 'double'
|   |     `-BinaryOperator 0x559be561b828 <col:21, col:59> 'double' '/'
|   |       |-ParenExpr 0x559be561b768 <col:21, col:37> 'double'
|   |       | `-CStyleCastExpr 0x559be561b740 <col:22, col:31> 'double' <IntegralToFloating>
|   |       |   `-ImplicitCastExpr 0x559be561b728 <col:31> 'long' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x559be561b6e8 <col:31> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |       `-ParenExpr 0x559be561b808 <col:41, col:59> 'double'
|   |         `-CStyleCastExpr 0x559be561b7e0 <col:42, col:51> 'double' <IntegralToFloating>
|   |           `-ImplicitCastExpr 0x559be561b7c8 <col:51> 'long' <LValueToRValue>
|   |             `-DeclRefExpr 0x559be561b788 <col:51> 'long' lvalue Var 0x559be55fbea8 'N20_data' 'long'
|   |-ForStmt 0x559be561c0f0 <line:425:3, line:429:3>
|   | |-BinaryOperator 0x559be561b968 <line:425:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561b908 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561b950 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561b930 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561ba08 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561b9d8 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561b990 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561b9f0 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561b9b8 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561ba58 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561ba30 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561c0d0 <line:426:3, line:429:3>
|   |   |-BinaryOperator 0x559be561bf00 <line:427:5, col:112> 'double' '='
|   |   | |-ArraySubscriptExpr 0x559be561baf8 <col:5, col:16> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x559be561bac8 <col:5> 'double *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x559be561ba78 <col:5> 'double [15]' lvalue Var 0x559be55e5a10 'Xi20_func' 'double [15]'
|   |   | | `-ImplicitCastExpr 0x559be561bae0 <col:15> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559be561baa0 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | `-BinaryOperator 0x559be561bed8 <col:20, col:112> 'double' '-'
|   |   |   |-ParenExpr 0x559be561be98 <col:20, col:108> 'double'
|   |   |   | `-BinaryOperator 0x559be561be70 <col:21, col:107> 'double' '*'
|   |   |   |   |-ParenExpr 0x559be561bbc8 <col:21, col:35> 'double'
|   |   |   |   | `-BinaryOperator 0x559be561bba0 <col:22, col:30> 'double' '*'
|   |   |   |   |   |-ImplicitCastExpr 0x559be561bb70 <col:22> 'double' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x559be561bb20 <col:22> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   |   |   |   |   `-ImplicitCastExpr 0x559be561bb88 <col:30> 'double' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x559be561bb48 <col:30> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   |   |   |   `-ParenExpr 0x559be561be50 <col:39, col:107> 'double'
|   |   |   |     `-BinaryOperator 0x559be561be28 <col:40, col:106> 'double' '/'
|   |   |   |       |-ParenExpr 0x559be561bce8 <col:40, col:70> 'double'
|   |   |   |       | `-CStyleCastExpr 0x559be561bcc0 <col:41, col:69> 'double' <IntegralToFloating>
|   |   |   |       |   `-ImplicitCastExpr 0x559be561bca8 <col:50, col:69> 'long' <LValueToRValue>
|   |   |   |       |     `-ArraySubscriptExpr 0x559be561bc68 <col:50, col:69> 'long' lvalue
|   |   |   |       |       |-ImplicitCastExpr 0x559be561bc38 <col:50> 'long *' <ArrayToPointerDecay>
|   |   |   |       |       | `-DeclRefExpr 0x559be561bbe8 <col:50> 'long [15]' lvalue Var 0x559be55e4f48 'distance20_counts' 'long [15]'
|   |   |   |       |       `-ImplicitCastExpr 0x559be561bc50 <col:68> 'long' <LValueToRValue>
|   |   |   |       |         `-DeclRefExpr 0x559be561bc10 <col:68> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |       `-ParenExpr 0x559be561be08 <col:74, col:106> 'double'
|   |   |   |         `-CStyleCastExpr 0x559be561bde0 <col:75, col:105> 'double' <IntegralToFloating>
|   |   |   |           `-ImplicitCastExpr 0x559be561bdc8 <col:84, col:105> 'long' <LValueToRValue>
|   |   |   |             `-ArraySubscriptExpr 0x559be561bd88 <col:84, col:105> 'long' lvalue
|   |   |   |               |-ImplicitCastExpr 0x559be561bd58 <col:84> 'long *' <ArrayToPointerDecay>
|   |   |   |               | `-DeclRefExpr 0x559be561bd08 <col:84> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   |   |               `-ImplicitCastExpr 0x559be561bd70 <col:104> 'long' <LValueToRValue>
|   |   |   |                 `-DeclRefExpr 0x559be561bd30 <col:104> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   `-FloatingLiteral 0x559be561beb8 <col:112> 'double' 1.000000e+00
|   |   `-CallExpr 0x559be561c050 <line:428:5, col:34> 'int'
|   |     |-ImplicitCastExpr 0x559be561c038 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be561bf28 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |-ImplicitCastExpr 0x559be561c0a0 <col:12> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x559be561c088 <col:12> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x559be561bf50 <col:12> 'char [7]' lvalue "%.2lf "
|   |     `-ImplicitCastExpr 0x559be561c0b8 <col:22, col:33> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x559be561c010 <col:22, col:33> 'double' lvalue
|   |         |-ImplicitCastExpr 0x559be561bfe0 <col:22> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x559be561bf80 <col:22> 'double [15]' lvalue Var 0x559be55e5a10 'Xi20_func' 'double [15]'
|   |         `-ImplicitCastExpr 0x559be561bff8 <col:32> 'long' <LValueToRValue>
|   |           `-DeclRefExpr 0x559be561bfa8 <col:32> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |-CallExpr 0x559be561c198 <line:431:3, col:14> 'int'
|   | |-ImplicitCastExpr 0x559be561c180 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561c128 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561c1e0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561c1c8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561c150 <col:10> 'char [2]' lvalue "\n"
|   |-CallExpr 0x559be561c2c8 <line:432:3, col:55> 'int'
|   | |-ImplicitCastExpr 0x559be561c2b0 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561c1f8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561c310 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561c2f8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561c258 <col:10> 'char [43]' lvalue "Calculating Mr20z Correlation Function...\n"
|   |-BinaryOperator 0x559be561c500 <line:433:3, col:50> 'double' '='
|   | |-DeclRefExpr 0x559be561c328 <col:3> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   | `-CStyleCastExpr 0x559be561c4d8 <col:11, col:50> 'double' <NoOp>
|   |   `-ParenExpr 0x559be561c4b8 <col:20, col:50> 'double'
|   |     `-BinaryOperator 0x559be561c448 <col:21, col:49> 'double' '/'
|   |       |-ImplicitCastExpr 0x559be561c430 <col:21> 'double' <IntegralToFloating>
|   |       | `-ImplicitCastExpr 0x559be561c418 <col:21> 'long' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x559be561c350 <col:21> 'long' lvalue Var 0x559be5610dc8 'N_rand' 'long'
|   |       `-ParenExpr 0x559be561c3f8 <col:30, col:49> 'double'
|   |         `-CStyleCastExpr 0x559be561c3d0 <col:31, col:40> 'double' <IntegralToFloating>
|   |           `-ImplicitCastExpr 0x559be561c3b8 <col:40> 'long' <LValueToRValue>
|   |             `-DeclRefExpr 0x559be561c378 <col:40> 'long' lvalue Var 0x559be5606a90 'N20z_data' 'long'
|   |-ForStmt 0x559be561cd00 <line:434:3, line:438:3>
|   | |-BinaryOperator 0x559be561c588 <line:434:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561c528 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561c570 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561c550 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561c628 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561c5f8 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561c5b0 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561c610 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561c5d8 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561c678 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561c650 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561cce0 <line:435:3, line:438:3>
|   |   |-BinaryOperator 0x559be561cb20 <line:436:5, col:114> 'double' '='
|   |   | |-ArraySubscriptExpr 0x559be561c718 <col:5, col:17> 'double' lvalue
|   |   | | |-ImplicitCastExpr 0x559be561c6e8 <col:5> 'double *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x559be561c698 <col:5> 'double [15]' lvalue Var 0x559be55e5b90 'Xi20z_func' 'double [15]'
|   |   | | `-ImplicitCastExpr 0x559be561c700 <col:16> 'long' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x559be561c6c0 <col:16> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   | `-BinaryOperator 0x559be561caf8 <col:21, col:114> 'double' '-'
|   |   |   |-ParenExpr 0x559be561cab8 <col:21, col:110> 'double'
|   |   |   | `-BinaryOperator 0x559be561ca90 <col:22, col:109> 'double' '*'
|   |   |   |   |-ParenExpr 0x559be561c7e8 <col:22, col:36> 'double'
|   |   |   |   | `-BinaryOperator 0x559be561c7c0 <col:23, col:31> 'double' '*'
|   |   |   |   |   |-ImplicitCastExpr 0x559be561c790 <col:23> 'double' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x559be561c740 <col:23> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   |   |   |   |   `-ImplicitCastExpr 0x559be561c7a8 <col:31> 'double' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x559be561c768 <col:31> 'double' lvalue Var 0x559be561a818 'ratio' 'double'
|   |   |   |   `-ParenExpr 0x559be561ca70 <col:40, col:109> 'double'
|   |   |   |     `-BinaryOperator 0x559be561ca48 <col:41, col:108> 'double' '/'
|   |   |   |       |-ParenExpr 0x559be561c908 <col:41, col:72> 'double'
|   |   |   |       | `-CStyleCastExpr 0x559be561c8e0 <col:42, col:71> 'double' <IntegralToFloating>
|   |   |   |       |   `-ImplicitCastExpr 0x559be561c8c8 <col:51, col:71> 'long' <LValueToRValue>
|   |   |   |       |     `-ArraySubscriptExpr 0x559be561c888 <col:51, col:71> 'long' lvalue
|   |   |   |       |       |-ImplicitCastExpr 0x559be561c858 <col:51> 'long *' <ArrayToPointerDecay>
|   |   |   |       |       | `-DeclRefExpr 0x559be561c808 <col:51> 'long [15]' lvalue Var 0x559be55e50e0 'distance20z_counts' 'long [15]'
|   |   |   |       |       `-ImplicitCastExpr 0x559be561c870 <col:70> 'long' <LValueToRValue>
|   |   |   |       |         `-DeclRefExpr 0x559be561c830 <col:70> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   |       `-ParenExpr 0x559be561ca28 <col:76, col:108> 'double'
|   |   |   |         `-CStyleCastExpr 0x559be561ca00 <col:77, col:107> 'double' <IntegralToFloating>
|   |   |   |           `-ImplicitCastExpr 0x559be561c9e8 <col:86, col:107> 'long' <LValueToRValue>
|   |   |   |             `-ArraySubscriptExpr 0x559be561c9a8 <col:86, col:107> 'long' lvalue
|   |   |   |               |-ImplicitCastExpr 0x559be561c978 <col:86> 'long *' <ArrayToPointerDecay>
|   |   |   |               | `-DeclRefExpr 0x559be561c928 <col:86> 'long [15]' lvalue Var 0x559be55e5278 'randdistance_counts' 'long [15]'
|   |   |   |               `-ImplicitCastExpr 0x559be561c990 <col:106> 'long' <LValueToRValue>
|   |   |   |                 `-DeclRefExpr 0x559be561c950 <col:106> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |   |   `-FloatingLiteral 0x559be561cad8 <col:114> 'double' 1.000000e+00
|   |   `-CallExpr 0x559be561cc60 <line:437:5, col:35> 'int'
|   |     |-ImplicitCastExpr 0x559be561cc48 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x559be561cb48 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   |     |-ImplicitCastExpr 0x559be561ccb0 <col:12> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x559be561cc98 <col:12> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x559be561cb70 <col:12> 'char [7]' lvalue "%.2lf "
|   |     `-ImplicitCastExpr 0x559be561ccc8 <col:22, col:34> 'double' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x559be561cc20 <col:22, col:34> 'double' lvalue
|   |         |-ImplicitCastExpr 0x559be561cbf0 <col:22> 'double *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x559be561cba0 <col:22> 'double [15]' lvalue Var 0x559be55e5b90 'Xi20z_func' 'double [15]'
|   |         `-ImplicitCastExpr 0x559be561cc08 <col:33> 'long' <LValueToRValue>
|   |           `-DeclRefExpr 0x559be561cbc8 <col:33> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   |-CallExpr 0x559be561cda8 <line:440:3, col:14> 'int'
|   | |-ImplicitCastExpr 0x559be561cd90 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561cd38 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561cdf0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561cdd8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561cd60 <col:10> 'char [2]' lvalue "\n"
|   |-CallExpr 0x559be561ce90 <line:441:3, col:42> 'int'
|   | |-ImplicitCastExpr 0x559be561ce78 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561ce08 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561ced8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561cec0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561ce30 <col:10> 'char [30]' lvalue "Saving Mr21r counts to file.\n"
|   |-IfStmt 0x559be561dae0 <line:444:3, line:448:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be561dac0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be561daa0 <line:445:3, line:448:3>
|   | | |-CallExpr 0x559be561d9b0 <line:446:5, col:54> 'int'
|   | | | |-ImplicitCastExpr 0x559be561d998 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be561d8e0 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be561d9f8 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be561d9e0 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be561d948 <col:12> 'char [40]' lvalue "output_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be561da70 <line:447:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be561da58 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be561da10 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be561da38 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x559be561df30 <line:450:3, line:453:3>
|   | |-BinaryOperator 0x559be561db78 <line:450:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561db18 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561db60 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561db40 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561dc18 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561dbe8 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561dba0 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561dc00 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561dbc8 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561dc68 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561dc40 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561df20 <line:451:3, line:453:3>
|   |-CallExpr 0x559be561e070 <line:456:3, col:42> 'int'
|   | |-ImplicitCastExpr 0x559be561e058 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561dfe8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561e0b8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561e0a0 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561e010 <col:10> 'char [30]' lvalue "Saving Mr20r counts to file.\n"
|   |-IfStmt 0x559be561e3d8 <line:458:3, line:462:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be561e3b8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be561e398 <line:459:3, line:462:3>
|   | | |-CallExpr 0x559be561e2a8 <line:460:5, col:54> 'int'
|   | | | |-ImplicitCastExpr 0x559be561e290 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be561e218 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be561e2f0 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be561e2d8 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be561e240 <col:12> 'char [40]' lvalue "output_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be561e368 <line:461:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be561e350 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be561e308 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be561e330 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x559be561e6f8 <line:464:3, line:467:3>
|   | |-BinaryOperator 0x559be561e470 <line:464:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561e410 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561e458 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561e438 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561e510 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561e4e0 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561e498 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561e4f8 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561e4c0 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561e560 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561e538 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561e6e8 <line:465:3, line:467:3>
|   |-CallExpr 0x559be561e858 <line:470:3, col:42> 'int'
|   | |-ImplicitCastExpr 0x559be561e840 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561e7b0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561e8a0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561e888 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561e7d8 <col:10> 'char [30]' lvalue "Saving Mr20z counts to file.\n"
|   |-IfStmt 0x559be561ebf8 <line:472:3, line:476:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be561ebd8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be561ebb8 <line:473:3, line:476:3>
|   | | |-CallExpr 0x559be561eac8 <line:474:5, col:54> 'int'
|   | | | |-ImplicitCastExpr 0x559be561eab0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be561ea38 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be561eb10 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be561eaf8 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be561ea60 <col:12> 'char [40]' lvalue "output_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be561eb88 <line:475:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be561eb70 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be561eb28 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be561eb50 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x559be561ef18 <line:478:3, line:481:3>
|   | |-BinaryOperator 0x559be561ec90 <line:478:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561ec30 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561ec78 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561ec58 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561ed30 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561ed00 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561ecb8 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561ed18 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561ece0 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561ed80 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561ed58 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561ef08 <line:479:3, line:481:3>
|   |-CallExpr 0x559be561f098 <line:484:3, col:43> 'int'
|   | |-ImplicitCastExpr 0x559be561f080 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561efd0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561f0e0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561f0c8 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561f038 <col:10> 'char [31]' lvalue "Saving Random counts to file.\n"
|   |-IfStmt 0x559be561f400 <line:486:3, line:490:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be561f3e0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be561f3c0 <line:487:3, line:490:3>
|   | | |-CallExpr 0x559be561f2d0 <line:488:5, col:54> 'int'
|   | | | |-ImplicitCastExpr 0x559be561f2b8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be561f240 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be561f318 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be561f300 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be561f268 <col:12> 'char [40]' lvalue "output_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be561f390 <line:489:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be561f378 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be561f330 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be561f358 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x559be561f720 <line:492:3, line:495:3>
|   | |-BinaryOperator 0x559be561f498 <line:492:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561f438 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561f480 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561f460 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561f538 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561f508 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561f4c0 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561f520 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561f4e8 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561f588 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561f560 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561f710 <line:493:3, line:495:3>
|   |-CallExpr 0x559be561f868 <line:498:3, col:34> 'int'
|   | |-ImplicitCastExpr 0x559be561f850 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561f7d8 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be561f8b0 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be561f898 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be561f800 <col:10> 'char [22]' lvalue "Saving Xi21 to file.\n"
|   |-IfStmt 0x559be561fc08 <line:500:3, line:504:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be561fbe8 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be561fbc8 <line:501:3, line:504:3>
|   | | |-CallExpr 0x559be561fad8 <line:502:5, col:54> 'int'
|   | | | |-ImplicitCastExpr 0x559be561fac0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be561fa48 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be561fb20 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be561fb08 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be561fa70 <col:12> 'char [40]' lvalue "output_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be561fb98 <line:503:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be561fb80 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be561fb38 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be561fb60 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x559be561ff28 <line:506:3, line:509:3>
|   | |-BinaryOperator 0x559be561fca0 <line:506:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be561fc40 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561fc88 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561fc68 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be561fd40 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be561fd10 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be561fcc8 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be561fd28 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be561fcf0 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be561fd90 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be561fd68 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be561ff18 <line:507:3, line:509:3>
|   |-CallExpr 0x559be5620060 <line:512:3, col:34> 'int'
|   | |-ImplicitCastExpr 0x559be5620048 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be561ffe0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be56200a8 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5620090 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be5620008 <col:10> 'char [22]' lvalue "Saving Xi20 to file.\n"
|   |-IfStmt 0x559be56203b8 <line:514:3, line:518:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be5620398 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be5620378 <line:515:3, line:518:3>
|   | | |-CallExpr 0x559be5620288 <line:516:5, col:54> 'int'
|   | | | |-ImplicitCastExpr 0x559be5620270 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be56201f8 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be56202d0 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be56202b8 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be5620220 <col:12> 'char [40]' lvalue "output_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be5620348 <line:517:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be5620330 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be56202e8 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be5620310 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x559be5620670 <line:520:3, line:523:3>
|   | |-BinaryOperator 0x559be5620450 <line:520:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be56203f0 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5620438 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5620418 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be56204f0 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be56204c0 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be5620478 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be56204d8 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be56204a0 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be5620540 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be5620518 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be5620660 <line:521:3, line:523:3>
|   |-CallExpr 0x559be5620750 <line:526:3, col:35> 'int'
|   | |-ImplicitCastExpr 0x559be5620738 <col:3> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x559be56206d0 <col:3> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | `-ImplicitCastExpr 0x559be5620798 <col:10> 'const char *' <BitCast>
|   |   `-ImplicitCastExpr 0x559be5620780 <col:10> 'char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x559be56206f8 <col:10> 'char [23]' lvalue "Saving Xi20z to file.\n"
|   |-IfStmt 0x559be5620ac0 <line:528:3, line:532:3>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-OpaqueValueExpr 0x559be5620aa0 <<invalid sloc>> '_Bool'
|   | |-CompoundStmt 0x559be5620a80 <line:529:3, line:532:3>
|   | | |-CallExpr 0x559be5620990 <line:530:5, col:54> 'int'
|   | | | |-ImplicitCastExpr 0x559be5620978 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x559be5620900 <col:5> 'int (const char *, ...)' Function 0x559be55e39c0 'printf' 'int (const char *, ...)'
|   | | | `-ImplicitCastExpr 0x559be56209d8 <col:12> 'const char *' <BitCast>
|   | | |   `-ImplicitCastExpr 0x559be56209c0 <col:12> 'char *' <ArrayToPointerDecay>
|   | | |     `-StringLiteral 0x559be5620928 <col:12> 'char [40]' lvalue "output_file.txt not opened, exiting...\n"
|   | | `-CallExpr 0x559be5620a50 <line:531:5, col:11> 'void'
|   | |   |-ImplicitCastExpr 0x559be5620a38 <col:5> 'void (*)(int) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x559be56209f0 <col:5> 'void (int) __attribute__((noreturn))' Function 0x559be55e67c8 'exit' 'void (int) __attribute__((noreturn))'
|   | |   `-IntegerLiteral 0x559be5620a18 <col:10> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x559be5620d78 <line:534:3, line:537:3>
|   | |-BinaryOperator 0x559be5620b58 <line:534:8, col:12> 'long' '='
|   | | |-DeclRefExpr 0x559be5620af8 <col:8> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5620b40 <col:12> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5620b20 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x559be5620bf8 <col:15, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x559be5620bc8 <col:15> 'long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x559be5620b80 <col:15> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | | `-ImplicitCastExpr 0x559be5620be0 <col:19> 'long' <IntegralCast>
|   | |   `-IntegerLiteral 0x559be5620ba8 <col:19> 'int' 15
|   | |-UnaryOperator 0x559be5620c48 <col:23, col:24> 'long' postfix '++'
|   | | `-DeclRefExpr 0x559be5620c20 <col:23> 'long' lvalue Var 0x559be55e3c88 'i' 'long'
|   | `-CompoundStmt 0x559be5620d68 <line:535:3, line:537:3>
|   `-ReturnStmt 0x559be5620df8 <line:540:3, col:10>
|     `-IntegerLiteral 0x559be5620dd8 <col:10> 'int' 0
|-FunctionDecl 0x559be55e39c0 <line:3:3> col:3 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x559be55e3a60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x559be55e3ac8 <col:3> Implicit printf 1 2
|-FunctionDecl 0x559be55e4318 <line:11:23> col:23 implicit used log10 'double (double)' extern
| |-ParmVarDecl 0x559be55e43b8 <<invalid sloc>> <invalid sloc> 'double'
| |-ConstAttr 0x559be55e4420 <col:23> Implicit
| `-NoThrowAttr 0x559be55e4468 <col:23> Implicit
|-FunctionDecl 0x559be55e4500 <col:29> col:29 implicit used pow 'double (double, double)' extern
| |-ParmVarDecl 0x559be55e45a0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x559be55e4600 <<invalid sloc>> <invalid sloc> 'double'
| |-ConstAttr 0x559be55e4670 <col:29> Implicit
| `-NoThrowAttr 0x559be55e46b8 <col:29> Implicit
|-FunctionDecl 0x559be55e67c8 <line:34:5> col:5 implicit used exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x559be55e6868 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x559be55ef208 <line:78:5> col:5 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x559be55ef2a8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x559be55ef308 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x559be55ef368 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x559be55f0e40 <line:85:17> col:17 implicit used cos 'double (double)' extern
| |-ParmVarDecl 0x559be55f0ee0 <<invalid sloc>> <invalid sloc> 'double'
| |-ConstAttr 0x559be55f0f48 <col:17> Implicit
| `-NoThrowAttr 0x559be55f0f90 <col:17> Implicit
|-FunctionDecl 0x559be55f2158 <line:86:33> col:33 implicit used sin 'double (double)' extern
| |-ParmVarDecl 0x559be55f21f8 <<invalid sloc>> <invalid sloc> 'double'
| |-ConstAttr 0x559be55f2260 <col:33> Implicit
| `-NoThrowAttr 0x559be55f22a8 <col:33> Implicit
`-FunctionDecl 0x559be55f4d08 <line:100:32> col:32 implicit used floor 'double (double)' extern
  |-ParmVarDecl 0x559be55f4da8 <<invalid sloc>> <invalid sloc> 'double'
  |-NoThrowAttr 0x559be55f4e10 <col:32> Implicit
  `-ConstAttr 0x559be55f4e58 <col:32> Implicit
